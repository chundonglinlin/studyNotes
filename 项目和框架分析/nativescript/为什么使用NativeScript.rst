*****************
为什么使用NativeScript
*****************

本章涵盖

- 什么是 ``NativeScript`` ；
- ``NativeScript`` 对移动开发世界的意义；
- ``NativeScript`` 的工作原理；

在移动应用程序的早期阶段( ``pre-iPhone`` )，编码一次并将其部署到多个平台没有获得太多的关注。开发人员只是想尽可能快地向苹果公司或 Google Play 商店申请一个应用程序。这意味着他们的应用程序不同时支持这两个平台，这是一个合理的牺牲。

快进到今天：移动世界正在不断变化，这使得它变得越来越困难跟上最新的设备。开发人员创建应用程序时，他们需要覆盖尽可能的大的受众群体：专注于单一平台不再是一种选择。应用程序需要跨平台和设备可用。为了跟上不断变化的环境，开发商正在为使他们能够简化移动应用程序开发流程的技术付出额外费用。

今天，开发人员可以通过多种方式编写基于一份代码可跨多个平台的移动应用程序。 ``NativeScript`` 是其中一种选择，但它不是唯一的选择。你可能听说过其他类似的，如 ``PhoneGap`` ， ``Xamarin`` 和 ``React Native`` 。这些框架中的每一个都能够编写一次代码并将其部署到 ``Android`` 和 ``iOS`` ，但我们不是在这里讨论一个框架的优缺点。相反，我们希望您学习如何使用你可能拥有的技能编写专业的跨平台移动应用程序
。如果您是一位了解使用 ``HTML`` ， ``JavaScript`` 和 ``CSS`` 编写 ``Web`` 应用程序的基础知识的初学者，或经验丰富的专家，您可以使用 ``NativeScript`` 编写移动应用程序。

在阅读本书时，我们将向您展示如何使用 ``NativeScript`` 提供的结构化方法的一份代码库编写跨平台应用程序
。完成后，您将拥有使用您选择的技术： ``HTML`` ， ``JavaScript`` 和 ``CSS`` 或者 ``Angular`` ， ``TypeScript`` 和 ``CSS`` 创建您自己的 ``Android`` 和 ``iOS`` 移动应用程序的技能。

.. note:: 如果你对 ``Angular`` 或 ``TypeScript`` 不熟悉，那没关系。 本书的最后3章致力于告诉你它们是什么以及如何使用它们来创建移动应用程序。

我们与许多第一次学习 ``NativeScript`` 的开发人员合作过，他们中的很多人都想用 ``Angular`` 直接跳入 ``NativeScript`` 。 如果听起来和你一样，那就去做吧，但要谨慎行事。如果您对 ``Angular`` 不熟悉，同时学习 ``NativeScript`` 和 ``Angular`` 可能会造成混淆，因为 ``NativeScript`` 和 ``Angular`` 之间的界限会模糊不清。 因此，我们建议您首先了解普通的 ``NativeScript`` 。跟随本书前三部分的练习，然后使用 ``Angular`` 跳转到 ``NativeScript`` 。

在我们继续之前，让我们先来看看 ``NativeScript`` 的更多细节。

NativeScript介绍
=================
``NativeScript`` 是一个开源框架，用于构建由 ``Telerik`` 创建和维护的适用于 ``iOS`` 和 ``Android`` 的跨平台移动应用程序。 ``NativeScript`` 与其他移动框架有很多不同之处，最大的不同在于它是一个跨平台框架，可以使用单一代码库创建本地移动应用程序。 此外， ``NativeScript`` 还提供了许多功能，使您可以轻松入门并充分利用您可能拥有的技能：

- 利用您对 ``HTML`` ， ``JavaScript`` 和 ``CSS`` 的现有知识（您不必了解 ``Objective C`` ， ``Swift`` 或 ``Java`` ）；
- 您的所有代码都只编写一次；
- 访问适用于 ``Android`` 和 ``iOS`` 的本机平台 ``API`` ；
- 一种可选的创建应用程序的方式，有助于构建您的代码库；
- 本地集成 ``Angular`` (但不一定)；

有时学习一种新语言是进入一个新世界的障碍。创建 ``NativeScript`` 应用程序时，您将充分利用现有的 ``HTML`` 应用程序知识，以便快速创建面向多个平台( ``Android`` 和 ``iOS`` )的应用程序。由于您已具备这些技能，因此您会发现创建 ``NativeScript`` 应用程序可以很快。更好的是，你不必学习 ``Objective C`` ， ``Swift`` 或 ``Java`` 。

如何书写NativeScript应用
------------------------
``NativeScript`` 应用程序以 ``JavaScript`` ， ``XML`` 和 ``CSS`` 的组合编写，如图1.1所示。

.. image:: ./images/1-1.png

当您编写 ``NativeScript`` 应用程序时，您的代码包含3个部分： ``JavaScript`` ， ``XML`` 和 ``CSS`` 。 ``JavaScript`` 组件运行业务逻辑，访问数据或控制应用程序的流程。 ``XML`` 部分定义了用户界面( ``UI`` )， ``CSS`` 用于对 ``UI`` 进行样式设计，就像 ``HTML`` 应用程序一样。

``NativeScript`` 应用程序的结构和代码与 ``HTML`` 应用程序非常相似，但仅此而已。 ``NativeScript`` 在跨平台移动应用程序中是独一无二的，因为它允许您一次性编写 ``UI(XML)`` 代码。 运行时， ``UI`` 代码将渲染应用中的原生 ``UI`` 元素。例如，在 ``iOS`` 上， ``UI`` 元素呈现为本机 ``iOS`` 按钮，下拉列表，列表等。同样，在 ``Android UI`` 元素上呈现为原生 ``Android`` 组件。

图2.1显示了用 ``NativeScript`` 编写的 ``iOS`` 按钮的本地渲染。

.. image:: ./images/1-2.png

你会注意到这看起来就像一个 ``iOS`` 按钮。这是因为它就是一个 ``iOS`` 按钮。所有 ``NativeScript UI`` 元素都是本机 ``iOS`` 和 ``Android UI`` 元素。

在其他跨平台框架中，您可能不得不花时间为特定平台编写特定视图代码。 但是，编写一次 ``UI`` 代码并将其渲染为本地 ``UI`` 组件的功能是将 ``NativeScript`` 与其他框架区分开来的一项功能。

``NativeScript`` 的另一个独特功能是您可以访问 ``Native API`` 。

.. note:: 是的，前面提到的几个框架同样允许您访问 ``Native API`` 。 但是，正如你将在本书中学习的那样， ``NativeScript`` 运行和访问 ``Android`` 和 ``iOS`` 的 ``Native API`` 的方式有很大的不同。 即使您使用 ``JavaScript`` 编写 ``NativeScript`` 代码，您也可以访问运行应用程序的每个本地 ``API`` 函数，功能和硬件组件设备。

随着您继续了解 ``NativeScript`` ，您将看到 ``NativeScript`` 如何将您的所有代码作为设备上运行的本机代码执行。这使您可以利用本机代码的性能，而无需学习或编写 ``Objective C`` ， ``Swift`` 或 ``Java`` ！

现在您对 ``NativeScript`` 有高度的熟悉程度，那么我们来看看您将会在本书中学到的内容。

你将会在本书中学到什么
======================
此时，您已开始了解用于编写 ``NativeScript`` 应用程序( ``HTML`` ， ``JavaScript`` 和 ``CSS`` )的技术。不是很多，对吧？ 如果你已经具备这些技能，你可能会想知道为什么你应该继续阅读。在本书中，我们将教你如何把握这些技巧，并将其应用于创建专业外观的移动应用程序。

专业意味着什么？ 职业对不同的人来说可能意味着不同的事。你可能认为只按时上班是专业的，而你的朋友可能认为专业意味着在面试中穿西装。

.. note:: 对我们来说，专业意味着为您的应用程序创建一个可维护的代码库，以便随着时间的推移可以继续增长。

创建专业应用程序也是关于使用 ``NativeScript`` 的功能，以便您的应用程序在运行它的平台上看起来和本地应用一样自然。

在学习创建专业应用程序时，您会发现 NativeScript 应用程序的结构以及如何访问本机硬件组件(如相机， ``GPS`` 和位置服务)。

但是，在我们直接跳入代码之前，重要的是我们要将 ``NativeScript`` 加以透视，以便了解它的工作原理。

NativeScript对移动开发的意义
============================
回想15年前（如果可以的话），当你携带 ``Windows 6`` 手机或通过最新的三星黑杰克游戏时：这是在 ``Android`` 和 ``iOS`` 之前。当时只有很少的平台和设备。今天，每月都会推出新设备。由于这种增长率和多样性，开发社区已经开始寻找更有效的方式来编写面向所有平台的移动应用程序。

不同类型的移动应用程序
----------------------
移动应用程序属于四大类别之一：本地(native)，混合(hybrid)，交叉编译和即时(JIT)编译（表1.1）。

表1.1 不同移动应用程序类型和他们的流行框架

+----------------+------------------+
| 移动应用类型   | 框架             |
+================+==================+
| native         | Android,iOS      |
+----------------+------------------+
| hybrid         | PhoneGap/Cordova |
+----------------+------------------+
| cross compiled | Xamarin          |
+----------------+------------------+
| JIT compiled   | NativeScript     |
+----------------+------------------+

.. tip:: 即时（JIT）编译应用程序是在运行时编译而不是在应用程序执行前编译的应用程序。 例如，在即时应用程序中，直到绝对最后一分钟或者在执行每个语句之前，您的源代码才会被编译为本地机器代码。

除了原生应用程序之外，表1.1中的其他三种应用程序类型具有相同的目标：编写一次应用程序代码并将其部署到多个平台（这就是人们说跨平台时的含义）。尽管上面列出的跨平台框架实现了类似的结果，但它们以各种方式实现。 图1.3显示了不同类型的移动应用程序之间的差异以及它们在设备上的运行方式。

.. image:: ./images/1-3.png

在图1.3中，您可以看到每种类型的移动应用程序如何使用不同的机制在移动设备上运行。 **混合移动应用程序** 本质上是网页浏览器内运行的网页。 **交叉编译的应用程序** 源码被编译，将它们转换成本机应用程序。最后， **JIT编译应用程序** (如 ``NativeScript`` )，在虚拟机内部运行。对于 ``NativeScript`` 应用程序，您的应用程序代码在 ``JavaScript`` 虚拟机内运行。

.. tip:: ``JavaScript`` 虚拟机是一个运行 ``JavaScript`` 代码的软件。

如果您是 ``.NET`` 或 ``Java`` 开发人员，那么您已经熟悉在虚拟机中运行代码，因为 ``.NET`` 和 ``Java`` 都以虚拟方式运行代码。与 ``NativeScript`` 的工作方式类似。

为什么NativeScript很重要
------------------------
除了 ``JIT`` 编译以外，与其他移动应用程序框架相比， ``NativeScript`` 还有其他不同之处。我们认为最重要的不同之处在于您可以从单一代码库编写真正的本地应用程序，并将其部署到 ``Android`` 和 ``iOS`` ，而无需进行任何更改。我们过去曾与其他移动应用程序框架合作过，在我们看来， ``NativeScript`` 与众不同。在其他框架中，我们不得不编写大量填充代码。这个垫片代码就像一块木头，用来平整厨房的炉子或帮助架起一扇门。继续比喻，想象你正在安装一个新的门和门框。大多数门都是按标准宽度，高度和深度建造的，而且几乎适合。但是在任何情况下，您都会在此添加一点垫片，并在其中添加一点垫片以使其适合正确。这就是在其他框架中编写代码时的样子：添加一些 ``UI`` 代码，以使按钮正确显示在 Android 版本的应用程序中，并添加更多的 ``UI`` 代码以使其看起来在 ``iOS`` 上恰到好处。

.. note:: 坚持下去，我们并没有试图描绘出 ``NativeScript`` 是完美的，因为没有任何东西是完美的。 但是， ``NativeScript`` 非常有吸引力，并且在我们看来，需要的垫片数量最少。 实际上，垫片非常有限，当您编写业务线应用程序时，您可能永远不会碰到它们。 当你运行它们时，有一个广泛的 ``NativeScript`` 专家社区已经准备就绪并愿意在 https://nativescript.org 上提供帮助。

这意味着什么呢：更少的垫片代码，一次写入，无处不在的部署等等。无论您是企业，独立开发人员还是业余爱好者，您都不想浪费时间。而且，这些功能（减少填充代码，编写一个代码并随处部署）意味着您将花更少的时间开发您的应用程序，让您有更多时间在更短的时间内创新并发布更多功能。

使用NativeScript可以构建哪些类型的应用程序
------------------------------------------
现在您对 ``NativeScript`` 的工作原理有了更多的了解，我们认为了解可以使用它编写的移动应用程序的类型非常重要。 您会记得， ``NativeScript`` 应用程序直接在设备上运行，并由应用程序内运行的 ``JavaScript`` 虚拟机解释。这意味着 ``NativeScript`` 应用程序不会限制访问本机设备 ``API`` 或硬件，因此任何应用程序都可以被编写为 ``NativeScript`` 应用程序。

我们先看看您不应使用 ``NativeScript`` 创建的应用类型。

- 图形密集的游戏

让我们开始清楚：不要用 ``NativeScript`` 编写图形密集型游戏。想象一下，你正在开发下一款大型手机游戏： ``Floppy Bunny`` 且 ``Floppy Bunny`` 需要大量图形和计算能力来渲染强大的 ``3D`` 图形。尽管 ``NativeScript`` 非常适合开箱即用，但为了创建高性能 ``3D`` 游戏的明确目的，可能会有更好的平台。

毕竟， ``NativeScript`` 应用程序是在 ``JavaScript`` 虚拟机内运行的，所以应用程序和裸机之间还有一个额外的，尽管很小的抽象层。为了从设备中提取出每一点性能并使 ``Floppy Bunny`` 获得巨大成功，您应该考虑编写原生 ``Android`` 或 ``iOS`` 应用程序。

- 业务线和消费应用程序

如果因为我们破坏了写 ``Floppy Bunny`` 的希望而感到沮丧，不要担心。 ``NativeScript`` 对其他类型的应用程序是一个好的选择！

与我们的游戏示例不同的是，如果您正在开发业务线应用程序（如新闻 ``feed`` ，网站的类似应用程序，社交媒体应用程序，甚至是应用程序来控制您家的所有智能设备）， ``NativeScript`` 是一个完美的选择！ 实际上，已有数十个行业已经使用 ``NativeScript`` 编写的各种应用程序。通过 https://www.nativescript.org/showcases 查看这些应用程序的展示。

NativeScript如何工作
====================
使用 ``JavaScript`` ， ``XML`` 和 ``CSS`` 编写本地移动应用程序并不是您通常所了解的那样。相反，您听说的是使用 ``Objective C`` ， ``Swift`` 或 ``Java`` 编写本机移动应用程序。 ``NativeScript`` 使用 ``NativeScript`` 运行时、核心模块、 ``JavaScript`` 虚拟机、应用程序代码和 NativeScript 命令行界面（CLI）组件来编写本地移动应用程序。 图1.5显示了这些组件如何一起工作来创建原生的 Android 和 iOS 项目，这些组件已内置到在移动设备上运行的本地应用程序中。

.. image:: ./images/1-4.png

我们知道图1.4中有很多框和线，并且可视化了这些组件在这一起如何协同工作，看起来似乎很难。别担心，我们将在本书后面介绍每一项。现在，让我们开始解释一切事物如何在高层一起工作。

让我们从已经学到的东西开始：您的应用程序代码是用 ``JavaScript`` ， ``CSS`` 和 ``XML`` 编写的。在编写代码之后，它将与 ``NativeScript`` 运行时和 ``NativeScript`` 代码模块(本书中将要学习的 ``API`` 模块)进行交互。

最后，一个称为 ``NativeScript CLI`` 的工具将您的代码， ``NativeScript`` 运行时和 ``NativeScript`` 核心模块捆绑到包含 ``JavaScript`` 虚拟机的本地应用程序中。 这个原生应用程序然后运行在 ``Android`` 和 ``iOS`` 上。

您刚刚了解了 ``NativeScript`` 应用程序在10,000英尺高度的工作方式，但让我们深入一点。在使用 ``XML`` 创建用户界面（UI）之后，您可以使用 ``CSS`` 来设置 ``UI`` 的样式（如 ``CSS`` 用于样式化 ``HTML`` 应用程序）。然后，你编写 ``JavaScript`` 来增强你的 ``UI`` 。您的 ``JavaScript`` 代码将包含编写响应事件（如应用程序启动事件）和交互（如按钮敲击或手指轻扫）的业务逻辑。这三部分（用 ``XML`` ， ``CSS`` 编写的用户界面和用 ``JavaScript`` 编写的业务逻辑）结合起来创建您的应用程序代码。

就其本身而言，您的应用程序代码不具备在移动设备上运行所需的所有内容；您还需要其他三个组件的帮助： ``NativeScript`` 运行时，核心模块和 ``JavaScript`` 虚拟机。我们将在未来的章节中探讨这些组件，但现在，请记住，您的应用程序代码和这三个组件构成了 ``NativeScript`` 应用程序的核心。

在开发应用程序代码后，它将被输入 ``NativeScript`` 命令行界面（CLI）。 ``CLI`` 负责创建原生的 ``Android`` 和 ``iOS`` 项目，并将 ``NativeScript`` 应用程序核心合并到每个项目中。运行时， ``CLI`` 调用本机 ``Android`` 或 ``iOS`` 软件开发工具包( ``SDK`` )来构建和编译本机应用程序。编译后的应用程序随后将部署（通过 ``CLI`` ）并在物理设备，模拟器或仿真器上运行。

正如您所看到的， ``NativeScript`` 的优点在于其通用性：您不必花时间学习 ``Objective C`` ， ``Swift`` 和 ``Java`` 等本地编程语言，因为您可以使用 ``JavaScript`` 。此外， ``NativeScript CLI`` 提供的平台不可知命令可确保您无需了解 ``Android`` 和 ``iOS`` 的本机工具和 ``SDK`` 如何工作。

总结
====
在本章中，您了解到：

- ``NativeScript`` 应用程序使用 ``JavaScript`` ， ``XML`` 和 ``CSS`` 编写，并在 ``JavaScript`` 虚拟机中运行。
- 您的应用程序代码和 ``NativeScript`` 运行时，核心模块和 ``JavaScript`` 虚拟机一起创建 ``NativeScript`` 应用程序的核心。
- ``NativeScript CLI`` 抽象化本地工具和 ``SDK`` 的复杂性，为您提供一组平台无关的命令来构建和部署您的应用程序。

.. note:: 在继续之前，您需要设置您的开发环境。请参阅 http://docs.nativescript.org/start/quick-setup 官方 ``NativeScript`` 安装说明。

1. 先获取模拟器名称： ``avdmanager list avd``
2. 命令行启动模拟器： ``emulator @模拟器名称``
3. 关闭模拟器命令： ``adb emu kill``

.. tip:: 如果您在获取 ``Android`` 模拟器设置和运行时遇到困难，请参阅附录A中的 ``Android`` 模拟器提示。
