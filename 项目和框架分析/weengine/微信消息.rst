****
微信消息
****

消息概述
========

用户发送给公众号的信息，包括文本、语音、视频、位置、图片等等，统称为消息。
系统在接收到这些消息时，会转化为消息的数据结构，然后进行相应的解析、分发、响应。


消息结构
========
.. code-block:: xml

	<xml>
	<ToUserName><![CDATA[toUser]]></ToUserName>
	<FromUserName><![CDATA[fromUser]]></FromUserName>
	<CreateTime>12345678</CreateTime>
	<MsgType><![CDATA[text]]></MsgType>
	<Content><![CDATA[你好！]]></Content>
	</xml>

上方 ``xml`` 即为一个消息结构原型，微擎系统接收到消息后，会转化成以下的数组形式，如下：

.. code-block:: php

	$message => array(
	    // 此部分数据结构为**全局共有的结构**, 其他消息类型为此结构的**补充**.
	    'from'  => 'fromUser', //string: 发送消息方,   代表一个粉丝用户(使用OpenID表示)
	    'to'    => 'toUser', //string: 消息接收方,   对应当前的公众号(使用OpenID表示)
	    'time'  => '12345678', //int:    消息发送时间, 使用Unix时间戳表示
	    'type'  => 'text', //string: 消息类型,     用于区分不同类型的消息, 请参阅下文
	    'content' => '你好！', //string：消息内容
	    'msgid' => ''  //int:    消息ID, 公众平台系统用于唯一标识一条请求消息
	);

微擎系统会通过这个消息结构数组，使用 **规则** 和 **模块** 的机制来处理公众平台的请求数据并返回响应的结果，具体请参看下一章“消息响应”。

消息结构类型
===========
消息类型同公众平台官方不同之处在于将 ``event`` 类型拆分开为独立的消息类型, 避免了重复判断。

根据消息类型不同，消息对象结构还存在不同的附加数据，按照类型定义如下：

文本消息
--------


图片消息
--------


地理位置消息
-----------


链接消息
--------



关注消息
--------


取消关注消息
-----------


菜单点击消息
-----------


用户未关注时，进行关注后的事件推送
-------------------------------


用户已关注时的事件推送
--------------------


上报地理位置事件
---------------


点击推事件
---------


跳转 URL
--------


扫码推事件
---------


扫码推事件且弹出“消息接收中”提示框
-------------------------------


弹出系统拍照发图
---------------


弹出拍照或者相册发图
------------------


弹出微信相册发图器
-----------------


弹出地理位置选择器
----------------


获取用户地理位置
---------------


点击菜单拉取消息时的事件推送
--------------------------