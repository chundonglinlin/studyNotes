****
缓存策略
****
在学习了持久化的数据库存储后，接下来让我们继续学习缓存。在很多情况下，都需要用到缓存。如对重复获取但变化不大的数据进行缓存以提供服务器的响应能力，又如为数据库服务器减轻压力等。另一方面，缓存也是有其弊端的。因为延时导致数据不能实时更新，或者在需要更新的场景下得不到实时更新。如在接口调试、单元测试或者预览时，当然这些都可以通过一些技巧来获得。这里，将从简单的缓存、再到高速缓存、最后延伸到多级缓存，逐步进行说明。

简单本地缓存
===========
这里所指的简单缓存，主要是存储在单台服务器上的缓存，例如使用系统文件的文件缓存， ``PHP`` 语言提供的 ``APCU`` 缓存。因为实现简单，且部署方便。但其缺点也是明显的，如文件 ``I/O`` 读写导致性能低，不能支持分布式。所以在没有集群服务器下是适用的。

文件缓存
--------
例如，当需要使用文件缓存时，先在 ``DI`` 容器中注册对文件缓存到 ``DI()->cache`` 。

.. code-block:: php

	//$ vim ./Public/init.php
	DI()->cache = new PhalApi_Cache_File(array('path' => API_ROOT . '/Runtime', 'prefix' => 'demo'));

初始化文件缓存时，需要传入配置数组，其中 ``path`` 为缓存数据的目录，可选的前缀 ``prefix`` ，用于区别不同的项目。

然后便可在适当的场景使用缓存。

.. code-block:: php

	// 设置
	DI()->cache->set('thisYear', 2015, 600);

	// 获取，输出：2015
	echo DI()->cache->get('thisYear');

	// 删除
	DI()->cache->delete('thisYear');

可以看到，在指定的缓存目录下会有类似以下这样的缓存文件。

.. code-block:: shell

	$ tree ./Runtime/cache/
	./Runtime/cache/
	└── 483
	    └── 11303fe8f96da746aa296d1b0c11d243.dat

APCU缓存
--------
安装好 ``APCU`` 扩展和设置相关配置并重启 ``PHP`` 后，便可开始使用 ``APCU`` 缓存。 ``APCU`` 缓存的初始化比较简单，只需要简单创建实例即可，不需要任何配置。

.. code-block:: php

    DI()->cache = new PhalApi_Cache_APCU();

其他使用参考缓存接口，这里不再赘述。

高速集群缓存
===========
这里的高速集群缓存，是指分布式存储能力，并且进驻内存的缓存机制。高速集群缓存性能优于简单缓存，并且能够存储的缓存容量更大，通常配置在其他服务器，即与应用服务器分开部署。其缺点是需要安装相应的 ``PHP`` 扩展，另外部署缓存服务，例如常见的 ``Memcached`` 、 ``Redis`` 。若需要考虑缓存落地，还要进一步配置。

Memcache/Memcached缓存
----------------------
若需要使用 ``Memcache/Memcached`` 缓存，则需要安装相应的 ``PHP`` 扩展。 ``PHP 7`` 中已经逐渐不支持 ``Memcache`` ，因此建议尽量使用 ``Memcached`` 扩展。

如使用 ``Memcached`` ：

.. code-block:: php

    DI()->cache = new PhalApi_Cache_Memcached(array('host' => '127.0.0.1', 'port' => 11211, 'prefix' => 'demo_'));

初始化 ``Memcached`` 时，需要传递一个配置数组，其中 ``host`` 为缓存服务器， ``port`` 为缓存端口， ``prefix`` 为可选的前缀，用于区别不同的项目。配置前缀，可以防止同一台 ``MC`` 服务器同一端口下 ``key`` 名冲突。对于缓存的配置，更好的建议是使用配置文件来统一管理配置。例如调整成：

.. code-block:: php

    DI()->cache = new PhalApi_Cache_Memcached(DI()->config->get('sys.mc'));

相应的配置，则在 ``./Config/sys.php`` 中的 ``mc`` 选项中统一维护。

完成了 ``Memcached`` 的初始化和注册后，便可考缓存接口进行使用，这里不再赘述。 ``Memcache`` 的初始化和配置和 ``Memcached`` 一样。

如何配置多个Memcache/Memcached实例？
----------------------------------
实际项目开发中，当需要连接多个 ``Memcache/Memcached`` 实例，可以在单个实例配置基础上采用以下配置：

.. code-block:: php

	$config = array(
	    'host'    => '192.168.1.1, 192.168.1.2',  //多个用英文逗号分割
	    'port'    => '11211, 11212',              //多个用英文逗号分割
	    'weight'  => '20, 80',                    //（可选）多个用英文逗号分割
	);

	DI()->cache = new PhalApi_Cache_Memcached($config);

上面配置了两个 MC 实例，分别是：

- 192.168.1.1，端口为11211，权重为20
- 192.168.1.2，端口为11212，权重为80

其中，权重是可选的。并且 **以host域名的数量为基准** ，即最终 ``MC`` 实例数量以 ``host`` 的个数为准。端口数量不足时取默认值 ``11211`` ，多出的端口会被忽略；同样，权重数量不足时取默认值 ``0`` ，多出的权重会被忽略。

如下，是一份稀疏配置：

.. code-block:: php

	$config = array(
	    'host'    => '192.168.1.1, 192.168.1.2, 192.168.1.3',
	    'port'    => '11210',
	);

相当于：

- 192.168.1.1，端口为11210，权重为0（默认值）
- 192.168.1.2，端口为11211（默认值），权重为0（默认值）
- 192.168.1.3，端口为11211（默认值），权重为0（默认值）

请注意，通常不建议在权重 ``weight`` 使用稀疏配置，即要么全部不配置权重，要么全部配置权重，以免部分使用默认权重为 ``0`` 的 ``MC`` 实例不生效。

Redis缓存
---------
当需要使用 ``Redis`` 缓存时，需要先安装对应的 ``Redis`` 扩展。

简单的 ``Redis`` 缓存的初始化如下：

.. code-block:: php

	$config = array('host' => '127.0.0.1', 'port' => 6379);
	DI()->cache = new PhalApi_Cache_Redis($config);

关于 ``Redis`` 的配置，更多选项如下。

表2-18 Redis连接配置项

+-------------+--------------------+----------+--------------------------------------------+
| Redis配置项 | 是否必须           | 默认值   | 说明                                       |
+=============+====================+==========+============================================+
| type        | 否                 | unix     | 当为unix时使用socket连接，否则使用http连接 |
+-------------+--------------------+----------+--------------------------------------------+
| socket      | type为unix时必须   | 无       | unix连接方式                               |
+-------------+--------------------+----------+--------------------------------------------+
| host        | type不为unix时必须 | 无       | Redis域名                                  |
+-------------+--------------------+----------+--------------------------------------------+
| port        | type不为unix时必须 | 6379     | Redis端口                                  |
+-------------+--------------------+----------+--------------------------------------------+
| timeout     | 否                 | 300      | 连接超时时间，单位秒                       |
+-------------+--------------------+----------+--------------------------------------------+
| prefix      | 否                 | phalapi: | key前缀                                    |
+-------------+--------------------+----------+--------------------------------------------+
| auth        | 否                 | 空       | Redis身份验证                              |
+-------------+--------------------+----------+--------------------------------------------+
| db          | 否                 | 0        | Redis库                                    |
+-------------+--------------------+----------+--------------------------------------------+


多级缓存策略
===========
很多时候，需要结合使用简单的本地缓存和高速集群缓存，以便应对承载更大的访问量和并发量，从而提供更好的用户体验和服务器吞吐率，这种组合的方式叫为多级缓存策略。

在切换到多级缓存时，甚至最后又切换到最初的简单缓存时，我们明显希望原有的代码调用不需要做出任何调整仍能正常很好的工作。所以这就引出了一个有趣的问题：该如何组织多级缓存，才能平滑进行升级切换？

作为一个框架，除了考虑上述的原有调用、单点缓存复用外，还需要考虑到多级缓存的组装。部分框架，一如我最喜欢的Phalcon则是使用了配置的形式来实现。但仍然要求熟悉其配置格式，方能更好掌握和使用，这带来了额外的学习成本。有没一种方式，可以基于已有的方式组合新的缓存策略呢？有的，PhalApi提供了基于简单组合模式的多级缓存策略。

正如你在源代码中看到的 ``PhalApi_Cache_Multi`` 类，通过此类的实例可以利用 ``PhalApi_Cache_Multi::addCache()`` 接口快速添加一个缓存节点，而节点的优先级则按开发同学添加的顺序来确定。例如可以先添加本地的本地缓存，再添加分布式高速缓存。而各个节点的初始化，则是我们之前所熟悉的，只是简单顺序添加即可轻易组装富有强大功能的多级缓存。正所谓，1 + 1 > 2。

以下是结合文件缓存和 ``MC`` 缓存的多级缓存示例：

.. code-block:: php

	$cache = PhalApi_Cache_Multi();

	$mcCache = new PhalApi_Cache_Memcached(array('host' => '127.0.0.1', 'port' => 11211, 'prefix' => 'demo_'));
	$cache->addCache($mcCache);

	$fileCache = new PhalApi_Cache_File(array('path' => API_ROOT . '/Runtime', 'prefix' => 'demo'));
	$cache->addCache($fileCache);

	DI()->cache = $cache;

然后，就可像之前那样设置、获取和删除缓存，而不需考虑是单点缓存，还是多级缓存。

.. code-block:: php

	// 设置
	DI()->cache->set('thisYear', 2015, 600);

	// 获取
	echo DI()->cache->get('thisYear');

	// 删除
	DI()->cache->delete('thisYear');

对应地，我们可以得出清晰明了的 ``UML`` 静态结构图：

.. image:: ./images/ch-2-multi-cache.jpg

图2-11 缓存的静态结构

结构层次非常简单，但主要分为三大类：左边是多级缓存；中间突出的是特殊情况，即空对象模式下的空缓存；右边是目前已提供或者后期扩展的具体缓存实现。


扩展你的项目
===========
添加新的缓存实现
---------------
当需要实现其他缓存机制时，例如使用 ``COOKIE`` 、 ``SESSION`` 、数据库等其他方式的缓存，可以先实现具体的缓存类，再重新注册 ``DI()->cache`` 即可。

首先，简单了解下 ``PhalApi`` 中的缓存接口。

.. code-block:: php

	<?php
	interface PhalApi_Cache {
	    public function set($key, $value, $expire = 600);
	    public function get($key);
	    public function delete($key);
	}

``PhalApi_Cache`` 缓存接口，主要有三个操作：设置缓存、获取缓存、删除缓存。设置时，缓存不存在时添加，缓存存在时则更新，过期时间单位为秒。当获取失败时，约定返回 ``NULL`` 。

所以，新的缓存实现类应按规约层的接口签名完成此缓存接口的实现。

