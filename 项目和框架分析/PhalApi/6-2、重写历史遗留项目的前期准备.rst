*************
重写历史遗留项目的前期准备
*************
在开始重写旧版系统之前，需要进行一些前期准备工作。


数据库迁移
==========
数据库迁移是一项基本的工作，需要将原来的数据库，进行重新设计，并将相关的业务数据导进新的数据库。选择重新设计，是因为原来的数据库存在设计不合理之处，并且随意时间的推移，大部分的表或字段已被废弃。但在 ``Family 2.0`` 项目中，情况又有点特殊，数据库进行了重新设计，并且只导入了部分数据，这意味着，将不复用旧的业务数据。这是由业务层面决定的，因为产品人员希望通过 ``Family 2.0`` 打造另一个家庭系统。为此，也大大减轻了数据库迁移这一重担。

具体的迁移过程，以及新的数据库表设计，这里暂不详细讲述，因为我们的关注点不在于此。

剖析已有的接口系统
=================
在解决完数据问题后，接下来应该考虑项目代码了。对原来系统有多了解，重写后的系统还原度就越高。剖析已有的接口系统，是不可或缺的准备之一。

彻底理解原来的业务
-----------------
先来了解一下， ``Family`` 旧系统原来的核心业务功能。它一个典型的使用场景是，小明在外面使用 ``Family`` 在家庭圈发布一条含有相片的动态后，在家里的小明爸爸和小明妈妈等家庭成员便能通过摆放的电子相框实时相看刚更新的相片。

经过与产品经理一起梳理后，可得到原来的业务主要有以下功能模块：

- **用户模块** 作为基本的功能模块，需要支持用户注册、登录，以及微信、新浪微博和QQ等第三方登录功能，支持用户信息的获取，修改与维护。
- **家庭圈模块** 有了基本的用户，才能开始组建家庭圈。家庭圈是用于维护家庭成员的虚拟社交圈子，其功能按照维度划分可分为针对用户维度和针对家庭圈这两大类的功能。用户维度的功能有加入家庭圈、删除家庭成员；家庭圈维度的功能有生成家庭号、创建家庭圈、删除家庭圈和修改家庭圈名字等功能。一个用户可以创建多个家庭圈，一个家庭圈可以有多个成员。
- **动态模块** 动态是指包括文本信息、相片素材甚至语音的内容，也是 ``Family`` 最核心的业务数据。其功能众多，为方便理解，这里可细分为三类，一类是针对动态的命令式操作，即会产生新数据或副作用的功能，如发布动态、转发动态、删除动态、收藏/取消动态；一类是针对动态的查询类操作，如获取家庭圈动态列表、获取设备动态列表、获取我的收藏列表、按关键字搜索动态；最后还有一类是关于动态评论的功能，如评论动态、获取动态评论列表、回复评论、删除评论。
- **相框模块** 对于硬件设备电子相框而言，则需要提供相框登录，获取相框的登录信息，并为其分配 ``UDID`` 等功能。

可以看出，用户模块是基础，在这基础上才能实现家庭圈模板的开发。接着，是关键核心的动态模块，需要用户在登录的情况下，将动态发布在特定的家庭圈内。最后，通过电子相框进行展示。

旧系统的痛点与难点
-----------------
好的系统都是类似的，不好的系统，各有各有痛点和难点。经过深入研究，发现原有的 ``Family`` 旧系统存在以下问题：

- 开发人员直接在生产环境进行即时修改，往往导致线上系统不稳定，因为开发人员随时都有可能在开发和调试。虽然有 ``Git`` 进行代码版本管理， ``Git`` 只是作为一个备份的工具。
- 在同步的接口服务请求过程中，进行了大量耗时的操作，如邮件发送。但更让人惊讶的是，在发布动态的接口中，竟然会对用户当前家庭圈的全部成员进行同步的通知推送。试想一下，如果用户的家庭圈成员有 100 位的话，得需要多少时间！
- 分层结构不明显，或者说结构混乱，难以找到代码明确的执行顺序。对于新加入的开发人员，学习成本高。
- 代码文件过长，复杂度高，到处充斥着意大利式面条般的代码，藕断丝连，牵一发而动全身。只有长期维度它的开发人员才能勉强懂得如何进行修改，难以支撑业务的快速迭代。
- 系统响应时间高，但受限于数据库视图设计，难以进行性能优化，无法提供更顺畅的用户体验。
- 未经过优化的数据库查询，最为明显的是到处不考虑数据库“死活”的重复查询。在一次接口请求中，重复数据库的查询就有可能高达 200 多次，而这些重复的查询完全可以使用 IN 关键字优化成只有一次查询。以下是一个典型的示例：

.. code-block:: sql

	SELECT * FROM user WHERE id = 1;
	SELECT * FROM user WHERE id = 2;
	SELECT * FROM user WHERE id = 3;
	... ...
	SELECT * FROM user WHERE id = 200;

- 没有任何单元测试，更多是凭借开发人员的主观意愿来判断功能的正确性，无法保证和可量化项目质量。
- 缺少有效的在线调试机制，不方便快速排查和定位线上问题，处理故障， ``SLA`` 不高。

以上问题，涵盖了代码、数据库、开发流程、项目质量等方面。有问题不可怕，可怕是有这么问题，但我们却未发现，甚至根本不知道。我觉得，任何作为专业的软件开发工程师，都不能对这些问题熟视无睹。这些问题都是很有趣的，因为它不仅促进了我们构想对应的解决方案，还能引申出更多有挑战的问题，从而促进更多有效的思考。

下面来看一下，我们是如何解决这些痛点和难点的，又是如何进行有效思考的。
