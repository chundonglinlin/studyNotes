****
上线发布
****
在开发完成接口服务，也完成与客户端的联调后，下一步则可以发布上线了。在正式开发流程中，应该通过严格的测试后，通过 ``QA`` 部门的验收后，方可发布上线。但在这里，假设的是非正式开发流程，因此没有专门的测试人员，而是在开发人员自测通过后，就发布上线。

上线checklist
=============
《清单革命》一书中，分享了如何通过清单有效地减少出错的概念。在把项目代码发布到生产环境前，准备一份上线 ``checklist`` 也是大有裨益的，尤其是首次上线。

首次发布，上线 ``checklist`` 包括但不限于：

- 线上运行环境是否已部署？
- Nginx配置是否已就绪，系统站点是否已可访问？
- 数据库是否已存在，数据库表是否已创建？
- PHP是否已安装，所需的扩展是否已安装，php-fpm是否已启动？
- 项目目录、日志目录、上传目录等是否已分配相应的权限？

日常发布，上线 ``checklist`` 包括但不限于：

- 所需的系统环境变更是否已执行？
- 所需的Nginx配置变更是否已执行？
- 所需的数据库变更是否已执行？
- 所需的PHP变更是否已执行？
- 所依赖的第三方系统是否已上线，是否可用？
- 所需要的计划任务是否已添加？

在 ``WeTime`` 项目首次发布时，主要是要部署线上环境，其过程与前面在部署开发环境类似，这里不再赘述。有一点不同的是，在线上使用的是真实的公网域名，需要进行 ``DNS`` 解析。

通过FTP或其他方式发布
====================
当线上环境部署好后，最后就是要把最新版本的代码发布到生产环境。 ``WeTime`` 项目的接口系统 ``api.wetime.com`` 只部署在单台服务器上，因此暂时不需要均衡负载，并且代码包发布的方式非常简单，因为只需要更新一台服务器上的项目代码即可。这时，可选用通过 ``FTP`` 实现文件上传，或者使用 ``Git`` 在服务器上进行更新，或者在本地将项目代码打包然后使用 ``rz`` 命令上传到服务器再解压等其他文件上传方式。

在使用 ``Git`` 管理项目代码时，通常以 ``dev`` 分支作为多人协作开发的分支，当需求功能开发完成后，由开发人员将 ``dev`` 分支的代码合并到主干 ``master`` 分支，最后将 ``master`` 分支的代码同步到生产环境。这种分支管理方式，虽然简单，但非常适用于小团队的项目。

发布验收
========
成功上线后，接下来需要通知产品人员或者项目干系人进行发布验收，确保所提供的接口服务能满足预期的业务需求。对于不能满足的业务场景，需要进行相应调整；对于遗漏的场景，需要开发补全；而对于发现的缺陷，需要及时修复。只有通过了发布验收，我们对接口服务的开发才算是交付完成。这也是项目开发流程中重要的里程碑之一。

