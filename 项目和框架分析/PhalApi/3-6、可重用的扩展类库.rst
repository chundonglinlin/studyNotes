********
可重用的扩展类库
********
``PhalApi`` 开源接口框架的一大特色，是提供了可重用的扩展类库，致力于与更多的开源项目一起提供企业级的解决方案。虽然此部分的扩展很多都是基于已有的第三方开源开发实现，但我们所做的不仅仅是代码的搬运工，在某个程度上是在系统架构上对组件库的重用，以及在此通过引入防腐层，避免陷入供应商锁定（Vendor Lock-In）。

除此之外，在 ``PhalApi`` 框架基础上，快速引入符合实际项目开发需求的扩展类库。你会发现，原来编程本来就是一件如此简单的事情，就像搭积木一样。也正如我们一直推崇的：接口，从简单开始！

扩展类库简介
============
``PhalApi`` 扩展类库的项目名称为 ``PhalApi-Library`` ，其 ``Github`` 地址是：

.. code-block:: shell

    https://github.com/phalapi/phalapi-library

在国内码云的项目地址是：

.. code-block:: shell

    http://git.oschina.net/dogstar/PhalApi-Library

这两个仓库的代码会同步一致，开发人员可根据自己的喜欢选择使用。

此仓库下每个目录代表一个扩展类库，各扩展类库之间相互独立，可以根据需要自动下载安装使用。

目前，截止编写此书时，已有30多个扩展类库。相信随着开源社区的不断分享，后续将会有更多优秀、可重用的扩展类库。

表3-4 当前扩展类库列表

+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| 扩展类库目录 | 扩展类库名称                      | 简要说明                                                                                     |
+==============+===================================+==============================================================================================+
| APK          | APK文件解包处理                   | 对APK进行解包，支持绝大部分APK文件处理。                                                     |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Auth         | Auth权限扩展                      | 实现了基于用户与组的权限认证功能，与RBAC权限认证类似，主要用于对服务级别的功能进行权限控制。 |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| CLI          | CLI扩展类库                       | 可用于开发命令行应用，基于GetOpt，主要作用是将命令参数进行解析和处理。                       |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Cluster      | 基于PhalApi的DB集群拓展           | 为了解决大量数据写入分析的问题，支持大量select、和大量insert。                               |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| CryptTraffic | 移动设备通信加密                  | 用于移动设备通信加密。                                                                       |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Excel        | PhalApi-Excel                     | 读取Excel。                                                                                  |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Facepp       | face++接口                        | face++接口。                                                                                 |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| FastRoute    | FastRoute快速路由                 | 基于FastRoute实现，通过配置实现自定义路由配置，从而轻松映射service接口服务。                 |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Image        | PhalApi-Image图像处理             | 按照尺寸压缩上传图片，参考自ThinkPhP图形处理。                                               |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| KafKa        | 简单舒适的PHP-KafKa拓展           | 基于rdKafKa封装的一个简单舒适KafKa拓展。                                                     |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Log4php      | 基于log4php的日志扩展             | 兼容PhalApi日志的接口操作，同时基于log4php完成更多出色的日志工作。                           |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Medoo        | Medoo数据库驱动                   | Medoo数据库驱动。                                                                            |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| OSS          | PhalApi-OSS阿里云OSS包            | 对阿里云的OSS文件服务器的封装。                                                              |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| PHPExcel     | PhalApi-PHPExcel扩展              | 提供了更为强大的Excel处理功能。                                                              |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| PHPMailer    | 基于PHPMailer的邮件发送           | 用于发送邮件。                                                                               |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| PHPRPC       | 代理模式下phprpc协议的轻松支持    | 可用于phprpc协议的调用，服务端只需要简单添加入口即可完美切换。                               |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Pay          | 基于PhalApi的第三方支付扩展       | 支持微信支付和支付宝支付。                                                                   |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Payment      | 微信支付及支付宝支付扩展          | 支持微信支付和支付宝支付。                                                                   |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Qiniu        | 七牛云存储接口调用                | 可用于将图片上传到七牛云存储，或者七牛SDK包提供的其他功能。                                  |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| RabbitMQ     | PhalApi-RabbitMQ队列拓展          | 基于队列标杆中的RabbitMQ的队列扩展。                                                         |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Redis        | 基于PhalApi的Redis拓展            | 提供更丰富的Redis操作，并且进行了分库处理可以自由搭配。                                      |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| SMS          | PhalApi-SMS容联云短信服务器扩展   | 基于容联云通讯，发送短信。                                                                   |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Smarty       | 基于PhalApi的Smarty扩展           | 基于老牌的PHP模版引擎Smarty，提供视图渲染功能。                                              |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| SOAP         | SOAP扩展                          | 使用PHP官方提供的SOAP协议，用于搭建Web Services。                                            |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Swoole       | Swoole扩展                        | 基于swoole，支持的长链接和异步任务实现。                                                     |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Task         | 计划任务扩展                      | 用于后台计划任务的调度。                                                                     |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| ThirdLogin   | 第三方登录扩展                    | 第三方登录。                                                                                 |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Translate    | PhalApi-Translate百度地图翻译扩展 | 基于百度翻译的翻译。                                                                         |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| UCloud       | 图片上传扩展                      | 用于图片文件上传。                                                                           |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| User         | User用户扩展                      | 提供用户、会话和集成第三方登录。                                                             |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| View         | Vuew视图扩展                      | 提供视图渲染功能。                                                                           |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Wechat       | 微信开发扩展                      | 可用于微信的服务号、订阅号、设备号等功能开发。                                               |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Xhprof       | 性能分析工具PhalApi-Xhprof        | 对Facebook开源的轻量级PHP性能分析工具进行了封装拓展。                                        |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| YoukuClient  | 优酷开放平台接口扩展              | 用于调用优酷开放平台的接口。                                                                 |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+
| Zip          | PhalApi-Zip压缩文件处理           | 用于处理文件压缩。                                                                           |
+--------------+-----------------------------------+----------------------------------------------------------------------------------------------+


安装、配置注册与使用
==================
对于某个扩展类库，当需要使用时，可以按安装、配置、使用这样的步骤顺序整合到项目。

安装
----
扩展类库的安装很简单，直接将 ``phalapi-library`` 目录所需要的扩展类库复制到项目的 ``Library`` 目录下即可。

例如，需要使用七牛云存储扩展 ``Qiniu`` 时，如未签出 ``PhalApi-Library`` 项目，可以签出或下载。

.. code-block:: shell

    $ git clone https://git.oschina.net/dogstar/PhalApi-Library.git

随后，将七牛云存储扩展的目录 ``Qiniu`` 拷贝到你项目的 ``Library`` 目录下。

.. code-block:: shell

    $ cp /paht/to/PhalApi-Library/Qiniu ./Library/ -R

至此，便完成了扩展类库的安装，相当简单。

配置注册
-------
根据不同的扩展类库，其配置和注册的情况不同，有些不需要配置也不需要注册，有些需要配置、注册中的一种，有些可能配置、注册都需要。这里说的配置是指在项目配置文件 ``./Config/app.php`` 内添加对应扩展类库的配置，配置选项的路径通常为： ``app.扩展类库名称`` 。此外，有的扩展类库可能还需要配置数据库配置文件 ``./Config/dbs.php`` 。而注册则是指将对应的扩展类库注册到 ``DI`` ，注册的服务名称通常为扩展类库的小写名称。

例如，这里七牛云存储扩展所需要的配置是在 ``./Config/app.php`` 配置文件中追加以下扩展配置。

.. code-block:: php

	// $ vim ./Config/app.php
	<?php
	return array(
	    ... ...
	    /**
	     * 七牛相关配置
	     */
	    'Qiniu' =>  array(
	        // 统一的key
	        'accessKey' => '*****',
	        'secretKey' => '****',
	        // 自定义配置的空间
	        'space_bucket' => '自定义配置的空间',
	        'space_host' => 'http://XXXXX.qiniudn.com',
	    ),
	);

以上配置值，可结合项目情况相应修改。此七牛云存储扩展目录名称为 ``Qiniu`` ，所在对应的配置路径为： ``app.Qiniu`` ，即对应这样的配置读取： ``DI()->config->get('app.Qiniu')`` 。

配置好后，便可在初始化文件或者在项目入口文件进行 ``DI`` 注册。

.. code-block:: php

	// $ vim ./Public/init.php
	DI()->qiniu = new Qiniu_Lite();

注册好后，便可以在项目需要的位置进行调用了。

使用
----
不同的扩展类库，其提供的功能不同，所以具体的使用也不尽相同。当使用到某个扩展类库时，可以参考对应的文档说明。有的扩展可能需要调用其内部接口才能实现对应的功能，有些扩展可能提供了直接可用的接口服务。

例如这里的七牛云存储扩展类库，则是提供了直接可用的接口服务。刷新在线接口列表文档后，可以看到多了 ``Qiniu_CDN.UploadFile`` 这一接口服务。

.. image:: ./images/ch-3-qiniu-cdn.jpg

图3-13 七牛云存储扩展类库提供的接口服务

我们可以编写一个简单的文件上传页面，测试一下。

.. code-block:: html

	// $ vim ./Public/shop/test_qiniu.html
	<html>
	    <form method="POST" action="/shop/?service=Qiniu_CDN.UploadFile" enctype="multipart/form-data">
	        <input type="file" name="file">
	        <input type="submit">
	    </form>
	</html>

随后在浏览器访问该页面，并上传一张图片。

.. code-block:: shell

    http://api.phalapi.net/shop/test_qiniu.html

在未正确配置七牛的相关扩展配置前，文件上传是会失败的，例如这里的。

.. code-block:: json

	{
	    "ret": 200,
	    "data": {
	        "code": 2,
	        "url": "",
	        "msg": "fail to upload file"
	    },
	    "msg": ""
	}

正确配置后，即可实现上传文件到七牛云存储。

常用扩展类库介绍
===============
上面通过七牛云存储扩展，说明了对于扩展类库的安装、配置注册与使用。下面将继续讲解几个有代表性、常用的扩展类库。一个是 ``PhalApi`` 框架内置的扩展：计划任务 ``Task`` ；一个是自主研发的微信框架： ``Webchat`` 微信开发；最后一个是基于第三方开源框架开发的 ``PHPMailer`` 邮件发送扩展。还有很多其他优秀的扩展类库，由于边幅有限，这里不一一详细讲解。

计划任务Task 内置扩展
-------------------
此扩展类型用于后台计划任务的调度，主要功能点有：

1. 提供了 ``Redis/文件/数据库`` 三种 ``MQ`` 队列
2. 提供了本地和远程两种调度方式
3. 以接口的形式实现计划任务
4. 提供统一的 ``crontab`` 调度

下面按安装、使用配置、使用的顺序，依次讲解。最后，我们还会一起来探讨一下此扩展类库的核心设计。

Task扩展的安装
^^^^^^^^^^^^^
此 ``Task`` 扩展已默认内置在 ``PhalApi`` 框架中，位于 ``phalapi/Task`` ，所以不需要安装便可直接使用。

Task扩展的配置
^^^^^^^^^^^^^^
我们需要在 ``./Config/app.php`` 配置文件中，为此 ``Task`` 扩展追加以下配置：

.. code-block:: php

    /**
     * 计划任务配置
     */
    'Task' => array(
        // MQ队列设置，可根据使用需要配置
        'mq' => array(
            'file' => array(
                'path' => API_ROOT . '/Runtime',
                'prefix' => 'shop_task',
            ),
        ),

        // Runner设置，如果使用远程调度方式，请加此配置
        'runner' => array(
            'remote' => array(
                'host' => 'http://api.phalapi.net/shop/',
                'timeoutMS' => 3000,
            ),
        ),
    ),

以上内容看情况需要而配置，如这里使用的是文件队列，你也可以根据需要使用 ``Redis`` 或数据库队列或其它。

当使用数据库 ``MQ`` 列队时，还需要将以下数据库的配置追加到 ``./Config/dbs.php`` 中的 ``tables`` 配置项。

.. code-block:: php

    'tables' => array(
        ... ...
        // 10张表，可根据需要，自行调整表前缀、主键名和路由
        'task_mq' => array(
            'prefix' => 'phalapi_',
            'key' => 'id',
            'map' => array(
                array('db' => 'db_demo'),
                array('start' => 0, 'end' => 9, 'db' => 'db_demo'),
            ),
        ),
    )

同时，需要将 ``/Library/Task/Data/phalapi_task_mq.sql`` 文件的 ``SQL`` 建表语句导入到你的数据库。你也可以在配置数据库后，使用 ``phalapi-buildsql`` 命令重新生成最新的 ``SQL`` 建表语句再导入数据库。

Task扩展的注册
^^^^^^^^^^^^^
首先，我们需要在入口文件进行对 ``Task`` 的初始化：

.. code-block:: php

	// 可以选择你需要的MQ
	$mq = new Task_MQ_Redis();
	DI()->taskLite = new Task_Lite($mq);

上面示例使用的是 ``Redis`` 队列，而 ``Redis`` 的 ``MQ`` 队列需要以下配置。

.. code-block:: php

    'Task' => array(
        'mq' => array(
            'redis' => array(
                'host' => '127.0.0.1',
                'port' => 6379,
                'prefix' => 'phalapi_task',
                'auth' => '',
            ),
        ),
    ),

其中：

表3-5 Redis的MQ队列配置说明

+--------+----------+-------------------------------+-------------+
| 选项   | 是否必须 | 默认值                        | 说明        |
+========+==========+===============================+=============+
| host   | 否       | 127.0.0.1                     | redis的HOST |
+--------+----------+-------------------------------+-------------+
| port   | 否       | 6379                          | redis的端口 |
+--------+----------+-------------------------------+-------------+
| prefix | 否       | phalapi_task                  | key的前缀   |
+--------+----------+-------------------------------+-------------+
| auth   | 否       | redis的验证，不为空时执行验证 | -           |
+--------+----------+-------------------------------+-------------+

可以这样创建 Redis MQ 队列：

.. code-block:: php

	// 方法一：使用app.Task.mq.redis配置
	$mq = new Task_MQ_Redis();

	// 方法二：外部依赖注入
	$redisCache = new PhalApi_Cache_Redis(array('host' => '127.0.0.1'));
	$mq = new Task_MQ_Redis($redisCache);

``Memcached/Memcache`` 的 ``MQ`` 队列，通常队列条目大小不能超过 1M ，有效期为 ``29`` 天。当需要使用此 ``MQ`` 列列时，需要的配置为：

.. code-block:: php

    'Task' => array(
        'mq' => array(
            'mc' => array(
                'host' => '127.0.0.1',
                'port' => 11211,
            ),
        ),
    ),

其中：

表3-6 Memcached/Memcache 的 MQ 队列配置说明

+------+----------+-----------+----------+
| 选项 | 是否必须 | 默认值    | 说明     |
+======+==========+===========+==========+
| host | 否       | 127.0.0.1 | MC的host |
+------+----------+-----------+----------+
| port | 否       | 11211     | MC端口   |
+------+----------+-----------+----------+

可以这样创建文件 ``MQ`` 队列：

.. code-block:: php

	// 方法一：使用app.Task.mq.mc配置
	$mq = new Task_MQ_Memcached();

	// 方法二：外部依赖注入
	$mc = new PhalApi_Cache_Memcached(array('host' => '127.0.0.1', 'port' => 11211));
	$mq = new Task_MQ_Memcached($mc);

也可以使用文件 ``MQ`` 队列，但通常不能共享，队列大小不限制，有效期为一年。文件 ``MQ`` 需要的配置为：

.. code-block:: php

    'Task' => array(
        'mq' => array(
            'file' => array(
                'path' => API_ROOT . '/Runtime',
                'prefix' => 'phalapi_task',
            ),
        ),
    ),

其中：

表3-7 文件MQ队列配置说明

+--------+----------+------------------+----------------+
| 选项   | 是否必须 | 默认值           | 说明           |
+========+==========+==================+================+
| path   | 否       | API_ROOT/Runtime | 缓存的文件目录 |
+--------+----------+------------------+----------------+
| prefix | 否       | phalapi_task     | key的前缀      |
+--------+----------+------------------+----------------+

可以这样创建文件 ``MQ`` 队列：

.. code-block:: php

	// 方法一：使用app.Task.mq.file配置
	$mq = new Task_MQ_File();

	// 方法二：外部依赖注入
	$fileCache = new PhalApi_Cache_File(array('path' => '/tmp/cache'));
	$mq = new Task_MQ_File($fileCache);

持久化的 ``MQ`` 队列，还可以使用数据库。数据库 ``MQ`` 队列需要的配置为：

.. code-block:: php

    'tables' => array(
        // 10张表，可根据需要，自行调整表前缀、主键名和路由
        'task_mq' => array(
            'prefix' => 'phalapi_',
            'key' => 'id',
            'map' => array(
                array('db' => 'db_demo'),
                array('start' => 0, 'end' => 9, 'db' => 'db_demo'),
            ),
        ),
    )

与上面的配置不同，这里是指数据库的配置 ``./Config/dbs.php`` ，而不是项目的配置 ``./Config/app.php`` 。

可以这样创建数据库 ``MQ`` 队列：

.. code-block:: php

    $mq = new Task_MQ_DB();

最后，还可以使用数组 ``MQ`` 队列。顾明思义，组 ``MQ`` 队列是将 ``MQ`` 存放在 ``PHP`` 的数组里面，用于单元测试或者是一次性、临时性的计划任务调度。

可以这样创建数据库 ``MQ`` 队列：

.. code-block:: php

    $mq = new Task_MQ_Array();

配置完 ``MQ`` 队列后，还需要配置调度的方式。调度的方式有两种：本地和远程调度。

本地调度的创建如下：

.. code-block:: php

	// 每批次弹出10个进行处理
	$runner = new Task_Runner_Local($mq, 10);

需要注意的是，每次执行一个计划任务，都会重新初始化必要的 ``DI`` 资源服务。且此调度方式不能用于接口请求时的同步调用。

远程调度，需要先添加以下配置：

.. code-block:: php

    /**
     * 计划任务配置
     */
    'Task' => array(
        // Runner设置，如果使用远程调度方式，请加此配置
        'runner' => array(
            'remote' => array(
                'host' => 'http://api.phalapi.net/shop/',
                'timeoutMS' => 3000,
            ),
        ),
    ),

其中：

表3-8 远程调度配置说明

+-----------+----------+--------------+------------------------+
| 选项      | 是否必须 | 默认值       | 说明                   |
+===========+==========+==============+========================+
| host      | 是       | 接口域名链接 | -                      |
+-----------+----------+--------------+------------------------+
| timeoutMS | 否       | 3000         | 接口超时时间，单位毫秒 |
+-----------+----------+--------------+------------------------+

然后可以这样创建：

.. code-block:: php

	// 使用默认的连接器 - HTTP + POST的方式
	// 每批次弹出10个进行处理
	$runner = new Task_Runner_Remote($mq, 10);

	// 或者，指定连接器
	$connector = new Task_Runner_Remote_Connector_Impl();
	$runner = new Task_Runner_Remote($mq, 10, $connector);

Task扩展的使用
^^^^^^^^^^^^^
``Task`` 扩展的使用，又分为两个环节。首先是把待执行的接口服务和相关参数加入到 ``MQ`` 队列，然后再通过统一调度在后台异步执行。

在上面注册了 ``DI()->task`` 服务后，便可通过 ``Task_MQ::add($service, $params = array())`` 接口添加待执行的接口服务和相关参数到 ``MQ`` 队列，第一个参数 ``$service`` 是待执行的接口服务，第二个可选参数 ``$params`` 是传递给待执行接口服务的参数。

例如待执行的接口服务为 ``Task.DoSth`` ，且需要的参数是 ``&id=1`` ，那么可以：

.. code-block:: php

    DI()->taskLite->add('Task.DoSth', array('id' => 1));

这样，就可以把相关的信息加入队列了，通过对应的存储媒介，可以查看到对应的队列信息。在产生了队列后，接下来就是要对此队列进行消费，也就是通过计划任务来进行消费、调度。

下面是第二个环节的讲解：计划任务的启动。在启动计划任务前，我们需要编写简单的脚本，一如这样：

.. code-block:: php

	#!/usr/bin/env php
	<?php
	require_once '/path/to/Public/init.php';

	DI()->loader->addDirs('Demo');

	if ($argc < 2) {
	    echo "Usage: $argv[0] <service> \n\n";
	    exit(1);
	}

	$service = trim($argv[1]);

	$mq = new Task_MQ_Redis();
	$runner = new Task_Runner_Local($mq);
	$rs = $runner->go($service);

	echo "\nDone:\n", json_encode($rs), "\n\n";

然后使用 ``nohup`` 或者 ``crontab`` 启动即可。注意上面的挂靠的项目，应该是待执行接口服务所在的目录。而使用的 ``MQ`` 队列，应该和前面配置的 ``MQ`` 保持一致，以便保证写入和消费的是同一个 ``MQ`` 。

除了上面简单的启动方式外， ``Task`` 扩展还提供一种具体的、统一的启动方式，即使用 ``crontab`` 的方式。

首先，创建以下表，或参见 ``./Library/Task/Data/phalapi_task_progress.sql`` 文件自行调整表名称前缀。

.. code-block:: sql

	CREATE TABLE `phalapi_task_progress` (
	      `id` bigint(20) NOT NULL AUTO_INCREMENT,
	      `title` varchar(200) DEFAULT '' COMMENT '任务标题',
	      `trigger_class` varchar(50) DEFAULT '' COMMENT '触发器类名',
	      `fire_params` varchar(255) DEFAULT '' COMMENT '需要传递的参数，格式自定',
	      `interval_time` int(11) DEFAULT '0' COMMENT '执行间隔，单位：秒',
	      `enable` tinyint(1) DEFAULT '1' COMMENT '是否启动，1启动，0禁止',
	      `result` varchar(255) DEFAULT '' COMMENT '运行的结果，以json格式保存',
	      `state` tinyint(1) DEFAULT '0' COMMENT '进程状态，0空闲，1运行中，-1异常退出',
	      `last_fire_time` int(11) DEFAULT '0' COMMENT '上一次运行时间',
	      PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;

接着，在 ``Linux`` 系统上添加 ``crontab`` 计划任务。

.. code-block:: shell

	$ crontab -e

	*/1 * * * * /usr/bin/php /path/to/PhalApi/Library/Task/crontab.php >> /tmp/phalapi_task_crontab.log 2>&1

记得相应调整此 ``crontab.php`` 中挂靠的项目目录，以便能正常自动加载待执行的接口服务。还记得我们一致的风格吗？先挂靠，再使用。

最后，在数据库配置计划任务。

.. code-block:: sql

    INSERT INTO `phalapi_task_progress`(title, trigger_class, fire_params, interval_time)  VALUES('你的任务名字', 'Task_Progress_Trigger_Common', 'Task_Demo.DoSth&Task_MQ_File&Task_Runner_Local', '300');

注意，在配置时，需要指明 ``MQ`` 和 ``Runner`` 的类型。各个字段的说明，可参考上面的表字段的说明。

这些都配置好后，当再 ``Task.DoSth`` 加入到 ``MQ`` 队列时，后台将会定时执行对应的接口服务。即下面这样的代码。

.. code-block:: php

	<?php
	class Api_Task extends PhalApi_Api {

	      public function doSth() {
	            // ...
	      }
	}

延伸：计划任务的核心设计解读
--------------------------
在 ``Task`` 这个计划任务中，为了让领域业务更清晰明了，我们采用了设计模式进行了巧妙的设计。下面将介绍这一设计过程。主要是以桥接模式为主模式，慢慢融入适配器模式、模板方法，同时辅以单元测试和小步重构。

https://www.phalapi.net/book/ch-3-gao-ji-zhu-ti.html


从微架构到扩展类库的演进
======================
在实际项目的开发过程中，也可以有意识地将一些通用的工具和操作与业务分离，方便后续可以在项目内的其他场景更好地重用。当抽离成工具或者通用类后，则可以进一步推广到其他项目使用，封装成扩展类库的形式，复用组件。如果允许，也可以发扬开源精神，分享给社区。这也是符合从微架构到应用构架、系统架构、乃至企业架构的演进之路。

当需要开发新的扩展类库时，为了统一扩展类库的风格、便于用户快速上手，易于使用，这里建议：

- **代码** 统一放置在 ``Library`` 目录下，一个扩展包一个目录，尽量以 ``Lite.php`` 文件为入口类，遵循 ``PEAR`` 包命名规范。
- **配置** 统一放置在 ``DI()->config->get('app.扩展包名')`` 中，避免配置冲突。
- **文档** 统一提供对扩展类库的功能、安装和配置、使用示例以及运行效果进行说明的文档。
