*********
自动生成的在线文档
*********
在线接口文档，主要有两种：

- 接口列表文档 显示当前项目下全部可用的接口服务，以及各个接口服务的名称、说明信息，如果需要，也可以显示扩展类库下提供的接口服务。
- 接口详情文档 针对单个接口服务的文档说明，用于显示该接口服务的基本信息、接口说明、接口参数、返回结果以及异常情况等。

下面分别进行解释。

.. note:: 在线文档使用反射机制生成，若文档查看失败，请确保opcache已关闭。

在线接口列表文档
===============

如何访问接口列表文档？
--------------------
在创建项目后，便可以通过访问 ``Public`` 目录下该项目目录内的 ``listAllApis.php`` 文件来访问接口列表文档。例如前面创建的 ``Shop`` 项目，其访问链接为：

.. code-block:: shell

    http://api.phalapi.net/shop/listAllApis.php

打开后，其文档显示的内容，类似如下：

.. image:: ./images/ch-3-list-all-apis.png

图3-3 在线接口列表文档的访问效果

在左边，是全部接口服务类的列表，按接口类名称的字典顺序进行排序。页面右边，是各个接口服务类所提供的全部服务，包括了接口服务、接口名称、更多说明等。

接口列表文档的注释规范
--------------------
在上面的访问效果中，有部分的信息提示了 "//请使用@desc 注释" 或 "//请检测接口服务注释" 等字样，这是因为接口列表文档的生成，除了依赖于源代码，更大程序上还依赖于规范的注释。

接口列表的注释比较简单，主要有：

- **接口服务类说明** 对应接口类文件中文档注释的第一行注释说明。例如，上面提示的 "//请检测接口服务注释(Api_Welcome)" ，可以修改对应类文件的注释来调整。

.. code-block:: php

	// $ vim ./Shop/Api/Welcome.php
	<?php
	/**
	 * Hello Wolrd示例类
	 */
	class Api_Welcome extends PhalApi_Api {

- **序号** 自动生成，不需要注释。把接口服务名称 ``Class.Action`` 按字典排序后从小到大依次编号。
- **接口服务** 自动生成，通过反射自动获取接口类的全部可访问的方法，并提取可用的接口服务，即对应 ``service`` 参数的接口服务名称。
- **接口名称** 接口中文名称，不带任何注解的注释，通常为接口类成员函数的第一行注释。如上面提示的 "//请使用@desc 注释" ，可以通过类成员函数的注释来调整。

.. code-block:: php

	/**
	 * 欢迎光临
	 */
	public function say() {

- **更多说明** 对应接口类成员函数的 ``@desc`` 注释。如上面提示的 "//请使用@desc 注释" ，可以添加 ``@desc`` 注释来调整。

.. code-block:: php

	/**
	 * 欢迎光临
	 * @desc 简单的Hello Wolrd返回
	 */
	public function say() {

按上面的注释规范调整好后，刷新刚才的接口列表页面，可以看到在线文档已经实时同步更新。

.. image:: ./images/ch-3-list-all-apis-welcome-say.png

图3-4 调整后的在线接口文档

显示扩展类库的接口服务
--------------------
查看 ``listAllApis.php`` 文件的源代码，可以看到默认情况下，已添加了若干个扩展类库的接口服务显示，包括 ``User`` 扩展、 ``Auth`` 扩展、七牛扩展。

.. code-block:: php

	//$ vim ./Public/shop/listAllApis.php
	$libraryPaths = array(
	    'Library/User/User',    // User扩展
	    'Library/Auth/Auth',    // Auth扩展
	    'Library/Qiniu/CDN',    // 七牛扩展
	);

	// 初始化
	require_once implode(D_S, array($root, '..', 'init.php'));

	// 处理项目
	DI()->loader->addDirs($apiDirName);

如果需要显示其他扩展类库下的接口服务，则需要将对应的项目目录参考上面的写法添加进来。添加好后，记得要在 ``checkApiParams.php`` 文件中同步添加。

顺便提一下，框架的一致性，在这里也得到了体现。那就是任何类的使用，都应先挂靠再使用。在添加了扩展类库的目录后，在线接口列表文档才能显示对应扩展类库下的接口服务。

在线接口详情文档
===============
如何访问在线接口详情文档？
------------------------
在进入上面的在线接口列表文档后，点击对应的接口服务即可跳转到对应的接口详情文档。或者，也可以手动拼接访问。它的访问路径与 ``listAllApis.php`` 类似，但需要访问的是 ``checkApiParams.php`` 文件，并且需要使用 ``service`` 参数指定需要查看的接口服务。例如查看我们之前定义的获取商品快照信息的接口服务。

在浏览器访问打开：

.. code-block:: shell

    http://api.phalapi.net/shop/checkApiParams.php?service=Goods.Snapshot

打开后，访问效果类似如下：

.. image:: ./images/ch-3-check-goods-snapshot.png

图3-5 商品快照信息的在线接口详情文档

在线接口详情文档的注释规范
------------------------
接口文档的注释较多，开发人员可在进行项目开发时按需注释。但各部分的规范也是简单明了的。结合上面的访问效果和商品快照信息接口类这一示例，从上到下，依次讲解各部分的使用规范。

- **接口** 当前接口服务的 ``service`` 名称，即： ``Class.Action`` 。
- **接口名称** 接口中文名称，不带任何注解的注释，通常为接口类成员函数的第一行注释。如：

.. code-block:: php

	/**
	 * 获取商品快照信息
	 */
	public function snapshot() {

- **接口说明** 对应接口类成员函数的 ``@desc`` 注释。如：

.. code-block:: php

	/**
	 * @desc 获取商品基本和常用的信息
	 */
	public function snapshot() {

- **接口参数** 根据接口类配置的参数规则自动生成，即对应当前接口类 ``getRules()`` 方法中的返回。其中最后的“说明” 字段对应参数规则中的 ``desc`` 选项。可以配置多个参数规则。此外，配置文件 ``./Config/app.php`` 中的公共参数规则也会显示在此接口参数里。这里的参数规则是：

.. code-block:: php

	public function getRules() {
	    return array(
	        'snapshot' => array(
	            'id' => array('name' => 'id', 'require' => true, 'type' => 'int', 'min' => 1, 'desc' => '商品ID'),
	        ),
	    );
	}

- **返回结果** 对应接口类成员函数的 ``@return`` 注释，可以有多组，格式为： ``\@return 返回类型 返回字段 说明`` 。这里是：
- **异常情况** 对应 ``@exception`` 注释，可以有多组，格式为： ``\@exception 错误码 错误描述信息`` 。例如，我们可以在此示例中补充异常情况。

.. code-block:: php

	/**
	 * @exception 406 签名失败
	 */
	public function snapshot() {

刷新后，可以看到新增的异常情况说明。

.. image:: ./images/ch-2-goods-snapshot-docs-exception.png

图3-6 添加了异常情况后的效果

以上获取商品快照信息接口服务的参数规则和注释，完整的代码为：

.. code-block:: php

	// $ vim ./Shop/Api/Goods.php
	<?php
	class Api_Goods extends PhalApi_Api {

	    public function getRules() {
	        return array(
	            'snapshot' => array(
	                'id' => array('name' => 'id', 'require' => true, 'type' => 'int', 'min' => 1, 'desc' => '商品ID'),
	            ),
	        );
	    }

	    /**
	     * 获取商品快照信息
	     * @desc 获取商品基本和常用的信息
	     * @return int      goods_id    商品ID
	     * @return string   goods_name  商品名称
	     * @return int      goods_price 商品价格
	     * @return string   goods_image 商品图片
	     * @exception 406 签名失败
	     */
	    public function snapshot() {
	        ... ...
	    }
	}

公共注释
--------
对于当前类的全部函数成员的公共 ``@exception`` 异常情况注释和 ``@return`` 返回结果注释，可在类注释中统一放置。而对于多个类公共的 ``@exception`` 和 ``@return`` 注释，则可以在父类的类注释中统一放置。

也就是说，通过把 ``@exception`` 注解和 ``@return`` 注解移到类注释，可以添加全部函数成员都适用的注解。例如， ``Api_User`` 类的全部接口都返回 ``code`` 字段，且都返回 ``400`` 和 ``500`` 异常，则可以：

.. code-block:: php

	<?php
	/**
	 * @return int code 操作码，0表示成功
	 * @exception 400 参数传递错误
	 * @exception 500 服务器内部错误
	 */
	class Api_User extends PhalApi_Api {

这样就不需要在每个函数成员的注释中重复添加注解。此外，也可以在父类的注释中进行添加。对于相同异常码的 ``@exception`` 注解，子类的注释会覆盖父类的注释，方法的注释会覆盖类的注释；而对于相同的返回结果 ``@return`` 注释，也一样。
