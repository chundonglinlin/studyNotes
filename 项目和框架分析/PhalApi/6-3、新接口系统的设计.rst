********
新接口系统的设计
********

既然使用  ``PhalApi`` 重写接口系统，那么我们需要在同时熟悉原有系统业务、痛点和难点，以及 ``PhalApi`` 框架的特性、工具和扩展类库，才能恰如其分地利用框架解决原来的问题。假设我们都已经熟悉 ``PhalApi`` 的基础内容和高级主题，如果不是，建议你回顾一下本书的第2章和第3章。因为下面更多是介绍如何应用，而不是重复介绍前面的知识内容。

客户端接入规范
=============
此部分规范主要是针对客户端开发人员，以便与客户端约定接口服务的接入规范，同时对于需要提供怎样的接口服务也有极大的引导作用。

统一请求格式
------------

1. 接口服务HOST

   测试环境 ``HOST`` 为： http://test.v2.api.family.com/

   生产环境 ``HOST`` 为： http://v2.api.family.com/

2. 公共参数

每个接口请求都需要传递的公共参数，目前已有的公共参数如下：

表6-1 Family 2.0 的公共参数

+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| 参数         | 是否必须 | 默认值                                                       | 说明                                                             |
+==============+==========+==============================================================+==================================================================+
| app_key      | 是       | 客户端接入的key值，由后端分配提供，以及相应的密钥app_secrect | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| sign         | 是       | 加密后的签名，加密算法请见下面详细说明                       | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| service      | 是       | 待请求的接口服务名称，由后端提供，其格式为“Class.Action”     | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| client       | 否       | 客户端类型，值为：ios/android，区分大小写                    | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| device_agent | 否       | 终端设备名称， 如：iPhone 5s/MT27i/HuaWei X                  | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| version      | 否       | 客户端App当前版本号，格式建议使用X.X.X，如：1.0.1            | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| UUID         | 否       | 用户UUID，只有当接口需要获取用户相关信息才需要提供           | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| token        | 否       | 登录凭证，只有当接口需要进行身份验证时才需要提供             | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| lan          | 否       | 语言，值为：en/zh_cn，默认为zh_cn                            | -                                                                |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+
| device_type  | 否       | all                                                          | 设备类型；可选值：scale母婴称，cube为电子相框，all为全部设备类型 |
+--------------+----------+--------------------------------------------------------------+------------------------------------------------------------------+

其中，生成 ``sign`` 的加密算法，步骤如下：

a. 将全部请求的参数去掉 ``sign`` 后按参数名字进行字典排序
b. 将字典排序后的全部参数名字对应的值依次用字符串连接起来
c. 在b步的结果后面加上相应的密钥 ``app_secrect`` 后进行 ``N`` 次 ``MD5`` （N次由项目指定）

以下是一个示例。假设，现有 ``app_key`` 为 ``test`` ，相应的密钥 ``app_secrect`` 为 ``phalapi`` ，那么对于待请求的链接：

.. code-block:: shell

    http://v2.api.family.com/demo/?service=Default.Index&username=dogstar&app_key=test

按参数名字进行字典排序后，可得：

.. code-block:: shell

	app_key=test
	service=Default.Index
	username=dogstar

依次把值用字符串连接起来，可得：

.. code-block:: shell

    testDefault.Indexdogstar

在后面加上相应的密钥 ``app_secrect`` ，为：

.. code-block:: shell

    testDefault.Indexdogstarphalapi

最后，进行 ``N`` 次 ``MD5`` 后，便可得到 ``sign`` 签名。最终在请求接口服务时，应该在添加参数，如： ``&sign=6fb2a3b48c258f561670e9b0044d6add`` 。

3. 通过POST传递非公共接口参数

对于公共参数，使用 ``GET`` 方式传递，而对于非公共参数，即特定接口服务的参数，建议统一使用使用 ``POST`` 传递，以免请求中因为数据处理不当而引起 ``GET`` 方式请求失败，同时长度不会受限，相对增强数据的安全性。

统一返回格式
------------

1. JSOn格式与字段结构

统一以JSON格式返回：

.. code-block:: json

	{
	    "ret": 状态码,
	    "data": {
	        "code": 操作码,
	        "msg": "操作提示",
	        ... ...  // 更多业务数据
	    },
	    "msg": "错误提示"
	}

2. ret状态码

状态码主要分为三大系列，分别是：2XX正常请求，4XX客户端非法请求，5XX服务器错误。如表6-2所示。

表6-2 ret状态码说明

+---------------+----------------------------------------------------------------------------------+
| 状态码（ret） | 说明                                                                             |
+===============+==================================================================================+
| 200           | 接口正常请求                                                                     |
+---------------+----------------------------------------------------------------------------------+
| 4XX           | 非法请求，如请求的服务不存在，签名失败，或缺少必要参数，由客户端调用不正确而引起 |
+---------------+----------------------------------------------------------------------------------+
| 401           | 缺少登录态或者登录态已失效，此时需要重新登录                                     |
+---------------+----------------------------------------------------------------------------------+
| 406           | 签名失败，验签不成功，或者app_key/app_secrect有误                                |
+---------------+----------------------------------------------------------------------------------+
| 5XX           | 服务器运行错误，此部分需要后端开发人员修复                                       |
+---------------+----------------------------------------------------------------------------------+

3. 业务数据

业务数据部分包含了客户端需要获取的业务数据，通常会有 ``code`` 和 ``msg`` 字段，其中： ``code`` 细分为业务操作的结果，并且 ``code`` 为 ``0`` 时表示成功； ``msg`` 则为对应的显示文案。业务数据 ``data`` 的具体返回格式，请见各个接口的详细说明。

4. 错误提示

此部分的错误提示主要是针对开发人员提供的，不应该显示给用户，以免给用户带来困惑或者显露一些接口内部的细节。

客户端开发人员可以根据此块的错误提示，获取一些指导信息。只有当 ``ret`` 不为 ``200`` 时，此错误提示信息才不为空。

5. 一个返回示例

如在微信成功登录的情况下，会返回：

.. code-block:: json

	{
	    "ret": 200,
	    "data": {
	        "code": 0,
	        "info": {
	            "UUID": "AAAKLJFKLJUE889UFLKAKDF1k23j14lk",
	            "token": "430C0F31FAF1FB1565E4290D1B61185A2408A6DEEA1604C1B5AEB14E44BDF2E0",
	            "is_new": 0
	        },
	        "msg": ""
	    },
	    "msg": ""
	}

服务端开发规范
=============
除了制定了客户端接入规范，我们在 ``Family 2.0`` 项目中还制定了服务端开发规范。希望此开发规范，能约束开发人员产出更优质的代码，并作为快速开发教程，为新加入的团队成员提供指引和帮助，降低学习成本。

1. Git代码签出

   新项目成员需要与项目经理申请 Git 帐号和权限，并创建各自对应的个人开发分支或者协同开发分支，然后在本地开发环境进行代码签出和部署。

2. 开发流程

   a. 测试先行

      根据PhalApi框架所推荐的TDD一般开发步骤，在编写产品代码前，先编写测试代码。可使用phalapi-buildtest命令来生成单元骨架代码。

   b. 实现接口服务

      在测试驱动开发的指导下，根据从Api接口层、Domain领域层再到Model数据源层的顺序进行开发。

   c. 提供文档

      除了提供PhalApi在线接口文档外，还需要参考附录A，编写提供接口服务文档。

   d. 与客户端联调

      当接口服务开发完成并自测通过后，与客户端开发人员进行必要的开发联调。

   e. 数据库变更

      当有数据库变更时，如服务器迁移、新加表或字段等，请将变更的SQL语句保存到./Config/sql目录下，并同步外网环境。

3. 常用操作

   对于登录态验证，可以有两种检查方式，一种是在失败时直接抛出异常的拦截式检测，另一种是在失败时返回检测结果的温柔式检测。分别如下：

.. code-block:: php

	// 拦截式检测：如果未登录时，直接400返回
	DI()->userLite->check(true);

	// 温柔式检测：获取登录的情况，为不同的业务提供不同的选择
	DI()->userLite->check();

对于原始的数值型的用户 ``ID`` ，由于其可遍历性，为了保障用户信息的安全性，需要将数字转换成不可遍历、更复杂的字符串。对于这两者之间的互相转换，可以使用：

.. code-block:: php

	// UUID --> userId
	$userId = Domain_User_Helper::UUID2UserId('AAAD56B5460339234A4A2492680171A88818B96B8D8DA687FB');

	// userId --> UUID
	$UUID = Domain_User_Helper::userId2UUID(187);

4. 约定编程

接口参数、返回字段、数据库的字段，这些外部可见的数据全部使用下划线分割的格式，如：

接口参数：

.. code-block:: shell

	// 正确的
	&user_id=888

	// 错误的
	&userId=888

返回字段：

.. code-block:: shell

	// 正确的
	"device_type": "cube",

	// 错误的
	"deviceType": "cube",

数据库字段：

.. code-block:: shell

	-- 正确的
	`user_id` bigint(20) DEFAULT '0' COMMENT '创建者的用户ID',

	-- 错误的
	`userId` bigint(20) DEFAULT '0' COMMENT '创建者的用户ID',

内部PHP代码变量则使用驼峰命名法，如：

接口参数规则：

.. code-block:: php

	// 正确的
	'otherUserId' => array('name' => 'other_user_id', 'type' => 'int', 'min' => 1, 'require' => true),

	// 错误的
	'other_user_id' => array('name' => 'other_user_id', 'type' => 'int', 'min' => 1, 'require' => true),

5. 一键测试

在测试环境上，执行以下命令可进行一键测试：

.. code-block:: shell

    $ ./run_tests

运行效果类似：

.. image:: ./images/ch-6-run-tests.jpg

图6-2 一键测试的运行效果

一键测试，作为持续集成的一部分，应该随时、频繁执行，以校验接口服务的正确性，最大限度保证项目质量。如果做不到持续集成，至少在以下场景中应当执行一键测试： 发布版本到生产环境前；更新 ``PhalApi`` 框架后；进行大范围改动，或底层修改后。


多入口，多模块
=============
``Family 2.0`` 业务模块主要有原有的业务线智能电子相框，以及新增的业务线母婴营养称。需要服务的客户端除了安卓、iOS移动设备外，还有PC版的客户端和PC端的管理后台系统，除此之外，还有电子相框和营养称这些硬件设备。为清晰划分这些不同的模块，经过不断迭代，最终创建的项目有：

- **Fami项目** 提供重写原有接口系统后的接口服务，包括原有的用户模块、家庭圈模块、动态模块和电子相框模块。并且作为整个系统的基础项目，提供公共接口服务。
- **Scale项目** 提供新增的母婴营养称业务线的接口服务，包括了秤模块、体重模块、食谱模块等。可结合营养秤上报的体重进行分析，然后提供改善建议。
- **Admin项目** 主要针对管理后台系统提供接口服务，用于实现下订购买、售后服务、后台运营等功能。
- **Task项目** 负责用于计划任务的耗时接口服务的实现，如为商家生成一系列设备信息，进行消息推送等。
- **PC项目** 针对PC版客户端提供AJAX接口，由于此场景不适宜采用签名加密，所以需要自定义接口服务白名单，以便前端能正常调用指定的接口服务。

上面所说的项目，是指放置源代码的项目，类似默认的 ``Demo`` 项目，每个项目都是可作为单独的子系统。这些项目都位于根目录的 ``Apps`` 目录下。

.. code-block:: shell

	Family-2.0$ tree ./Apps/
	./Apps/
	├── Admin
	├── Fami
	├── Pc
	├── Scale
	└── Task

经过综合考虑，决定对外提供多个访问入口，这些入口与上面划分的项目对应，但又有所变化，主要有：

- **电子相框访问入口/fami** 对外提供Fami项目的接口服务。
- 母婴营养秤访问入口/scale 对外提供Scale项目的接口服务，但内部实现依赖于Fami项目。
- ``管理后台访问入口/admin_28***4`` 为管理后台提供Admin项目的接口服务，但内部实现依赖于Fami项目和Scale项目。增加数字后续是为了避免外界简单地猜测到此入口路径。
- **PC端访问入口/web** 对外提供Fami项目和Scale项目的部分接口服务，并且不需要任何签名验证。

由于 ``Task`` 计划任务的接口服务都是本地调用，故不需要对外提供访问入口。


通过系统变量维护服务器配置
========================
原有的系统，使用硬编码的方式配置数据库连接等配置信息。一如常见的：

.. code-block:: php

    'servers' => array(
        'db_demo' => array(                         //服务器标记
            'host'      => 'localhost',             //数据库域名
            'name'      => 'phalapi',               //数据库名字
            'user'      => 'root',                  //数据库用户名
            'password'  => '',                    //数据库密码
            'port'      => '3306',                  //数据库端口
            'charset'   => 'UTF8',                  //数据库字符集
        ),
    ),

为了更方便在不同环境下，在不改动任何代码的情况下实现快速部署，在 ``Family 2.0`` 系统中全部数据库链接、 ``Memcache`` 链接等配置信息采用系统环境变量的方式配置。例如，上面的配置换为：

.. code-block:: php

    'servers' => array(
        'db_A' => array(                         //服务器标记
            'host'      => $_ENV['FAMILY_V2_DB_HOST'],                 //数据库域名
            'name'      => $_ENV['FAMILY_V2_DB_NAME'],                   //数据库名字
            'user'      => $_ENV['FAMILY_V2_DB_USER'],                   //数据库用户名
            'password'  => $_ENV['FAMILY_V2_DB_PASS'],                   //数据库密码
            'port'      => $_ENV['FAMILY_V2_DB_PORT'],                   //数据库端口
            'charset'   => $_ENV['FAMILY_V2_DB_CHARSET'],                //数据库字符集
        ),
    ),

下面分别简单介绍，对于本书的开发环境，对于 ``cli`` 命令行和 ``php-fpm`` 这两种模式如何配置这些系统变量。

php-fpm下如何配置系统变量
------------------------
首先，确保在 ``php.ini`` 配置文件中已经开启 ``$_ENV`` 全局变量。可打开 ``/etc/php5/fpm/php.ini`` 配置文件，并确保 ``variables_order`` 值为 ``EGPCS`` ，其中首字母 ``E`` 表示 ``$_ENV`` 全局变量。即：

.. code-block:: shell

	# vim /etc/php5/fpm/php.ini

	variables_order = "EGPCS"

其次，在 ``php-fpm`` 相应的配置文件中添加相应的 ``env`` 配置，如：

.. code-block:: shell

	# vim /etc/php5/fpm/pool.d/www.conf

	env[FAMILY_V2_DB_HOST]=$FAMILY_V2_DB_HOST
	env[FAMILY_V2_DB_NAME]=$FAMILY_V2_DB_NAME
	env[FAMILY_V2_DB_USER]=$FAMILY_V2_DB_USER
	env[FAMILY_V2_DB_PASS]=$FAMILY_V2_DB_PASS
	env[FAMILY_V2_DB_PORT]=$FAMILY_V2_DB_PORT
	env[FAMILY_V2_DB_CHARSET]=$FAMILY_V2_DB_CHARSET

接着，在 ``/etc/profile`` 中，添加相应的系统变量。即：

.. code-block:: shell

# vim /etc/profile

	export FAMILY_V2_DB_HOST=localhost
	export FAMILY_V2_DB_NAME=phalapi
	export FAMILY_V2_DB_USER=root
	export FAMILY_V2_DB_PASS=''
	export FAMILY_V2_DB_PORT=3306
	export FAMILY_V2_DB_CHARSET=UTF8

为了让 ``php-fpm`` 每次重启时能自动加载系统变量，可以修改 ``php-fpm`` 的启动脚本，并在合适的位置添加 ``source`` 操作，即：

.. code-block:: shell

	# vim /etc/init.d/php5-fpm

	. /etc/profile

配置好后，重启 ``php-fpm`` 。

.. code-block:: shell

    # service php5-fpm restart

重启后便可以通过代码的 ``$_ENV`` 读取到相应的系统环境变量了，在保护敏感配置信息的同时，还可以实现不同环境下的配置切换和管理。此外，这里还有一个小技巧，对于域名可以再配置 ``HOST`` ，指向特定的 ``IP`` 地址。

cli下如何配置系统变量
--------------------
相比之下， ``cli`` 下的配置要比 ``php-fpm`` 下的要简单得多。只需要在 ``/etc/environment`` 文件中配置系统变量后，但可以通过代码的 ``$_ENV`` 进行读取了。例如：

.. code-block:: shell

	# vim /etc/environment

	export FAMILY_V2_DB_HOST=localhost
	export FAMILY_V2_DB_NAME=phalapi
	export FAMILY_V2_DB_USER=root
	export FAMILY_V2_DB_PASS=''
	export FAMILY_V2_DB_PORT=3306
	export FAMILY_V2_DB_CHARSET=UTF8

编辑保存后，只需要 ``source`` 一下，便可生效。

在线接口文档
===========
在 ``Family 2.0`` 项目中，除了按照接口模样提供文档外，我们还充分利用了 ``PhalApi`` 框架提供的在线接口文档。客户端在实时生成的在线文档获取最新最可靠的信息，也可以通过手动编写的文档获取更多补充的说明。这两份文档是相互相成的。为了充分使用在线接口列表文档和在线接口详情文档，就需要按 ``PhalApi`` 的规范编写注释和配置参数规则。

最终手动编写的接口文档约有130多份，以下是其中的部分文档列表。

.. image:: ./images/ch-6-apis-list-manual.png

图6-3 部分手动编写的接口文档


扩展类库的应用
=============
在开发业务系统时，经常会看到重复通用的功能模块。结合 ``Family 2.0`` 的项目情况和业务场景，为了减少重复开发的成本，提升开发效率，我们使用了 ``User`` 、 ``Task`` 和 ``Qiniu`` 等扩展类库，快速地搭建好了基础设施层，为实际具体的业务功能开发提供了更丰富的支持。

User用户扩展
------------
对于用户模块，我们基于 ``User`` 用户扩展进行了二次开发，以满足特定业务场景的需要。集成后，最终的使用和 ``User`` 扩展类库的使用基本一致。例如，前面已经讲述判断用户是否已登录的方式。

.. code-block:: php

	// 拦截式检测：如果未登录时，直接400返回
	DI()->userLite->check(true);

	// 温柔式检测：获取登录的情况，为不同的业务提供不同的选择
	DI()->userLite->check();

Task计划任务扩展
---------------
``Family 2.0`` 项目中有很多耗时的操作，这些操作应该通过后台异步计划任务进行调度。例如为商家生成一系列设备信息，进行消息推送等。为此，我们集成了 ``Task`` 计划任务扩展，这样开发人员只需要开发实现具体的业务功能即可，其他的工作则交由 ``Task`` 扩展来完成。不仅流程质量得到了保障，同时也分离了关注点，降低开发难度。

Qiniu七牛扩展
-------------
在小的项目中，图片等文件往往是上传到本地服务器。但对于一定规模的系统来说，这种简单粗暴的方式是行不通的。因为存放在本地服务器的文件，不能在服务器集群内进行共享；其次，这些上传的文件不仅占据了服务器有限的硬盘空间，还会在访问时消耗大量的网络带宽，从而间接影响了接口服务的吐吞量；最后也不方便对上传的文件进行管理，如添加 ``CDN`` 加速访问。在现在这个时代，是技术领域细分的时代。专业的事，应该交由专业的团队去处理。一如，对于上传的图片文件，可以考虑交给第三方 ``CDN`` 服务。 ``Family 2.0`` 项目也需要上传图片文件，故此我们选择了七牛云存储，并相应地集成了 ``Qiniu`` 七牛扩展。

