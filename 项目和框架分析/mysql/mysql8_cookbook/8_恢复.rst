********
恢复数据
********
在本章中，我们将介绍以下主题：

- 从 mysqldump 和 mysqlpump 恢复
- 使用 myloader 从 mydumper 恢复
- 从物理备份文件恢复
- 执行时间点恢复

简介
====
在本章中，您将了解各种备份恢复方法。假设备份和二进制日志在服务器上可用。

从 mysqldump 和 mysqlpump 恢复
==============================
登录使用备份的服务器：

.. code-block:: shell

    shell> cat /backups/full_backup.sql | mysql -u <user> -p
    #或者
    shell> mysql -u <user> -p < /backups/full_backup.sql

要在远程服务器上还原，可以提及 ``-h <hostname>`` 选项：

.. code-block:: shell

    shell> cat /backups/full_backup.sql | mysql -u <user> -p -h <remote_hostname>

在还原备份时，备份语句将记录到二进制日志中，这会降低还原过程的速度。如果您不希望还原过程写入二进制日志，则可以使用 ``SET SQL_LOG_BIN=0`` 在会话级别禁用它：

.. code-block:: shell

    shell> (echo "SET SQL_LOG_BIN=0;";cat /backups/full_backup.sql) | mysql -u <user> -p -h <remote_hostname>

或者使用：

.. code-block:: shell

    mysql> SET SQL_LOG_BIN=0; SOURCE full_backup.sql

1. 由于备份恢复需要很长时间，因此建议在屏幕会话内启动恢复过程，这样即使您失去与服务器的连接，恢复也将继续。
2. 有时，恢复期间可能会出现故障。如果将 ``--force`` 选项传递给 ``MySQL`` ，则还原将继续：

.. code-block:: shell

    shell> (echo "SET SQL_LOG_BIN=0;";cat /backups/full_backup.sql) | mysql -u <user> -p -h <remote_hostname> -f

使用 myloader 从 mydumper 恢复
==============================
``myloader`` 是一个用于使用 ``mydumper`` 进行多线程恢复备份的工具。 ``myloader`` 与 ``mydumper`` 一起出现，你不需要单独安装它。在本节中，您将了解还原备份的各种方法。

恢复全部数据库
---------------

.. code-block:: shell

    shell> myloader --directory=/backups --user=<user> --password=<password> --queries-per-transaction=5000 --threads=8 --compress-protocol --overwrite-tables

选项解释如下：

- ``--overwrite-tables`` ：如果表已存在，则此选项将删除表；
- ``--compress-protocol`` ：此选项在 MySQL 连接上使用压缩；
- ``--threads`` ：此选项指定要使用的线程数; 默认值为4；
- ``--queries-per-transaction`` ：这指定了每个事务的查询数量; 默认值为 1000 ；
- ``--directory`` ：这指定要导入的转储的目录；

恢复指定的数据库
----------------
您可以指定 ``--source-db <db_name>`` 以还原指定的数据库。

假设您要还原公司(company)数据库：

.. code-block:: shell

    shell> myloader --directory=/backups --queries-pertransaction=5000 --threads=6 --compress-protocol --user=<user> --password=<password> --source-db company --overwrite-tables

恢复指定的表
------------
``mydumper`` 将每个表的备份写入单独的 ``.sql`` 文件。 你可以挑拣 ``.sql`` 文件并恢复：

.. code-block:: shell

    shell> mysql -u <user> -p<password> -h <hostname> company -A -f < company.payments.sql

如果将表拆分为块，则可以将与表相关的所有块和信息复制到目录并指定该目录的位置。

复制所需的文件：

.. code-block:: shell

    shell> sudo cp /backups/employee_table_chunks/employees.employees.* /backups/employee_table_chunks/employees.employees-schema.sql /backups/employee_table_chunks/employees-schema-create.sql /backups/employee_table_chunks/metadata /backups/single_table/

使用 ``myloader`` 加载; 它会自动检测块并加载它们：

.. code-block:: shell

    shell> myloader --directory=/backups/single_table/ --queries-per-transaction=50000 --threads=6 --compress-protocol --overwrite-tables

从物理备份文件恢复
==================
从物理文件中恢复需要您停止 ``MySQL`` 服务器，替换所有文件，更改权限并启动 ``MySQL`` 。

1. 停止MySQL服务端：

.. code-block:: shell

    shell> sudo systemctl stop mysql

2. 移动文件到 data directory 中：

.. code-block:: shell

    shell> sudo mv /backup/mysql /var/lib

3. 修改文件属主为 mysql ：

.. code-block:: shell

    shell> sudo chown -R mysql:mysql /var/lib/mysql

4. 启动MySQL：

.. code-block:: shell

    shell> sudo systemctl start mysql

为了最大限度地减少停机时间，如果磁盘上有足够的空间，则可以将备份复制到 ``/var/lib/mysql2`` 。然后停止 ``MySQL`` ，重命名目录，并启动服务器：

.. code-block:: shell

    shell> sudo mv /backup/mysql /var/lib/mysql2
    shell> sudo systemctl stop mysql
    shell> sudo mv /var/lib/mysql2 /var/lib/mysql
    shell> sudo chown -R mysql:mysql /var/lib/mysql
    shell> sudo systemctl start mysql

执行时间点的恢复
================
恢复完整备份后，您需要还原二进制日志以获取时间点恢复。备份提供备份可用的二进制日志坐标。您应该根据 ``mysqldump`` 中指定的 ``--dump-slave`` 或 ``--master-data`` 选项从正确的服务器中选择二进制日志备份。

mysqldump或者mysqlpump
----------------------
二进制日志信息根据传递给 ``mysqldump/mysqlpump`` 的选项作为 ``CHANGE MASTER TO`` 命令存储在 ``SQL`` 文件中。

1. 如果使用 --master-data (因为在从服务器上执行，会记录从服务器二进制日志坐标)，你应该使用从服务器的二进制日志：

.. code-block:: shell

    shell> head -30 /backups/dump.sql
    -- MySQL dump 10.13 Distrib 8.0.3-rc, for Linux
    (x86_64)
    --
    -- Host: localhost Database:
    -- ---------------------------------------------
    ---------
    -- Server version 8.0.3-rc-log
    /*!40101 SET
    @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT
    */;
    /*!40101 SET
    @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESUL
    TS */;
    /*!40101 SET
    @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION
    */;
    /*!40101 SET NAMES utf8 */;
    /*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
    /*!40103 SET TIME_ZONE='+00:00' */;
    /*!50606 SET
    @OLD_INNODB_STATS_AUTO_RECALC=@@INNODB_STATS_AUT
    O_RECALC */;
    /*!50606 SET GLOBAL INNODB_STATS_AUTO_RECALC=OFF
    */;
    /*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS,
    UNIQUE_CHECKS=0 */;
    /*!40014 SET
    @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS,
    FOREIGN_KEY_CHECKS=0 */;
    /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE,
    SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
    /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES,
    SQL_NOTES=0 */;
    --
    -- Position to start replication or point-intime recovery from
    --
    CHANGE MASTER TO
    MASTER_LOG_FILE='server1.000008',
    MASTER_LOG_POS=154;

在这种情况下，你应该从从服务器的 server1.000008 文件 154 的位置开始恢复。

.. code-block:: shell

    shell> mysqlbinlog --start-position=154 --disable-log-bin /backups/binlogs/server1.000008 | mysql -u<user> -p -h <host> -f

2. 如果你使用了 ``--dump-slave`` (因为在从服务器上执行，会记录主服务器二进制日志坐标)，你应该使用主服务器的二进制日志：

.. code-block:: shell

    --
    -- Position to start replication or point-intime recovery from (the master of this slave)
    --
    CHANGE MASTER TO MASTER_LOG_FILE='centos7-
    bin.000001', MASTER_LOG_POS=463;

在这种情况下，你应该从主服务器的 centos7-bin.000001 文件的 463 位置开始恢复。

.. code-block:: shell

    shell> mysqlbinlog --start-position=463 --disablelog-bin /backups/binlogs/centos7-bin.000001 | mysql -u<user> -p -h <host> -f

mydumper
--------
二进制日志信息在元数据中可用：

.. code-block:: shell

    shell> sudo cat /backups/metadata
    Started dump at: 2017-08-26 06:26:19
    SHOW MASTER STATUS:
        Log: server1.000012
        Pos: 154
        GTID:
    SHOW SLAVE STATUS:
        Host: 35.186.158.188
        Log: centos7-bin.000001
        Pos: 463
        GTID:
    Finished dump at: 2017-08-26 06:26:24

如果您已从从服务器获取二进制日志备份，则应使用Master二进制日志坐标从位置 154（显示主状态）的 ``server1.000012`` 文件开始还原：

.. code-block:: shell

    shell> mysqlbinlog --start-position=154 --disable-log-bin /backups/binlogs/server1.000012 | mysql -u<user> -p -h <host> -f

如果您有来自主服务器的二进制日志备份，则应使用SLAVE二进制日志坐标从位置 463（显示从状态）的 ``centos7-bin.000001`` 开始还原：

.. code-block:: shell

    shell> mysqlbinlog --start-position=463 --disable-log-bin /backups/binlogs/centos7-bin.000001 | mysql -u<user> -p -h <host> -f
