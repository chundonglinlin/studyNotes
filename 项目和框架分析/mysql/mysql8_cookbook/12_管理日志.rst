********
管理日志
********

简介
====
您现在将学习如何管理不同类型的日志：错误日志，常规查询日志，慢查询日志，二进制日志，中继日志和 ``DDL`` 日志。

管理错误日志
=============
根据 ``MySQL`` 文档：错误日志包含 ``mysqld`` 启动和关闭时间的记录。它还包含诊断消息，例如在服务器启动和关闭期间以及服务器运行期间发生的错误，警告和注释。

错误日志子系统由执行日志事件过滤和写入的组件以及名为 ``log_error_services`` 的系统变量组成，该变量配置要启用哪些组件以实现所需的日志记录结果。 ``global.log_error_services`` 的默认值是 ``log_filter_internal;log_sink_internal`` ：

.. code-block:: shell

    mysql> SELECT @@global.log_error_services;
    +----------------------------------------+
    | @@global.log_error_services            |
    +----------------------------------------+
    | log_filter_internal; log_sink_internal |
    +----------------------------------------+

该值表示日志事件首先通过内置过滤器组件 ``log_filter_internal`` ，然后通过内置日志编写器组件 ``log_sink_internal`` 。 组件顺序很重要，因为服务器按列出的顺序执行组件。必须首先使用 ``INSTALL COMPONENT`` 安装 ``log_error_services`` 值中指定的任何可加载（未内置）组件，本节将对此进行介绍。

为了知道错误日志的所有类型，请参考 https://dev.mysql.com/doc/refman/8.0/en/error-log.html

配置错误日志
------------
错误日志记录由 ``log_error`` 变量控制（ 对于启动脚本则是 ``--log-error`` ）。

如果未给出 ``--log-error`` ，则默认目标是控制台。

如果在给出 ``--log-error`` 但未指定文件名称的情况下，则缺省目标是数据目录中名为 ``host_name.err`` 的文件。

如果给出命名文件的 ``--log-error`` ，则默认目标是该文件（如果名称没有后缀，则添加 ``.err`` 后缀），位于数据目录下，除非给出绝对路径名以指定不同的位置。

``log_error_verbosity`` 系统变量控制服务器详细程度，以便将错误，警告和注释消息写入错误日志。允许的 ``log_error_verbosity`` 值为1（仅错误），2（错误和警告）和3（错误，警告和注释），默认值为3。

要更改错误日志位置，请编辑配置文件并重新启动 ``MySQL`` ：

.. code-block:: shell

    shell> sudo mkdir /var/log/mysql
    shell> sudo chown -R mysql:mysql /var/log/mysql
    shell> sudo vi /etc/my.cnf
    [mysqld]
    log-error=/var/log/mysql/mysqld.log
    shell> sudo systemctl restart mysql

验证错误日志：

.. code-block:: shell

    mysql> SHOW VARIABLES LIKE 'log_error';
    +---------------+---------------------------+
    | Variable_name | Value                     |
    +---------------+---------------------------+
    | log_error     | /var/log/mysql/mysqld.log |
    +---------------+---------------------------+
    1 row in set (0.00 sec)

要调整详细程度，可以动态更改 ``log_error_verbosity`` 变量。但是，建议保留默认值 3 ，以便记录错误，警告和注释消息：

.. code-block:: shell

    mysql> SET @@GLOBAL.log_error_verbosity=2;
    Query OK, 0 rows affected (0.00 sec)
    mysql> SELECT @@GLOBAL.log_error_verbosity;
    +------------------------------+
    | @@GLOBAL.log_error_verbosity |
    +------------------------------+
    | 2                            |
    +------------------------------+
    1 row in set (0.00 sec)

转储错误日志
------------
假设错误日志文件变大了，你想要转储它; 您只需移动文件并执行 ``FLUSH LOGS`` 命令：

.. code-block:: shell

    shell> sudo mv /var/log/mysql/mysqld.log /var/log/mysql/mysqld.log.0;
    shell> mysqladmin -u root -p<password> flush-logs
    mysqladmin: [Warning] Using a password on the command
    line interface can be insecure.
    shell> ls -lhtr /var/log/mysql/mysqld.log
    -rw-r-----. 1 mysql mysql 0 Oct 10 14:03 /var/log/mysql/mysqld.log
    shell> ls -lhtr /var/log/mysql/mysqld.log.0
    -rw-r-----. 1 mysql mysql 3.4K Oct 10 14:03 /var/log/mysql/mysqld.log.0

您可以使用一些脚本自动执行上述步骤并将它们放入 ``cron`` 中。

如果服务器无法写入错误日志文件的位置，则日志刷新操作将无法创建新的日志文件。


使用系统日志来记录日志
----------------------
要使用系统日志进行日志记录，需要加载名为 ``log_sink_syseventlog`` 的系统日志写入程序。您可以使用内置过滤器 ``log_filter_internal`` 进行过滤：

1. 加载系统日志写入器：

.. code-block:: shell

    mysql> INSTALL COMPONENT 'file://component_log_sink_syseventlog';

2. 使其在重新启动时保持持久性：

.. code-block:: shell

    mysql> SET PERSIST log_error_services ='log_filter_internal; log_sink_syseventlog';
    mysql> SHOW VARIABLES LIKE 'log_error_services';

3. 您可以验证日志是否将定向到 ``syslog`` 。 在 CentOS 和 Red Hat 上，您可以检查 ``/var/log/messages;`` 在 Ubuntu 上，您可以检入 ``/var/log/syslog`` 。为了演示，服务器重新启动。您可以在 syslog 中看到这些日志：

.. code-block:: shell

    shell> sudo grep mysqld /var/log/messages | tail

如果有多个 ``mysqld`` 进程在运行，则可以使用 [] 中指定的 ``PID`` 进行区分。否则，您可以设置 ``log_syslog_tag`` 变量，该变量将服务器标识符附加前导连字符，从而生成 ``mysqld-tag_val`` 的标识符。 例如，您可以使用类似 ``instance1`` 的标记标记实例：

.. code-block:: shell

    mysql> SELECT @@GLOBAL.log_syslog_tag;
    +-------------------------+
    | @@GLOBAL.log_syslog_tag |
    +-------------------------+
    |                         |
    +-------------------------+
    1 row in set (0.00 sec)
    mysql> SET @@GLOBAL.log_syslog_tag='instance1';
    Query OK, 0 rows affected (0.00 sec)
    mysql> SELECT @@GLOBAL.log_syslog_tag;
    +-------------------------+
    | @@GLOBAL.log_syslog_tag |
    +-------------------------+
    | instance1               |
    +-------------------------+
    1 row in set (0.01 sec)
    shell> sudo systemctl restart mysqld
    shell> sudo grep mysqld /var/log/messages | tail
    Oct 10 14:59:20 centos7 mysqld-instance1[21220]:
    InnoDB: Buffer pool(s) dump completed at 171010
    14:59:20

您会注意到 ``instance1`` 标记已附加到日志中，因此您可以轻松识别多个实例。

如果要切换回原始日志记录，可以将 l``og_error_services`` 设置为 ``'log_filter_internal;log_sink_internal'`` ：

.. code-block:: shell

    mysql> SET @@global.log_error_services='log_filter_internal;log_sink_internal';

JSON格式的错误日志
------------------
要使用 ``JSON`` 格式进行日志记录，您需要加载名为 ``log_sink_json`` 的 ``JSON`` 日志编写器。您可以使用内置过滤器 ``log_filter_internal`` 进行过滤：

1. 安装JSON日志写入器：

.. code-block:: shell

    mysql> INSTALL COMPONENT 'file://component_log_sink_json';

2. 使其在重新启动时保持持久性：

.. code-block:: shell

    mysql> SET PERSIST log_error_services = 'log_filter_internal;log_sink_json';

3. JSON 日志编写器根据默认错误日志目标确定其输出目标，该目标由 ``log_error`` 系统变量给出：

.. code-block:: shell

    mysql> SHOW VARIABLES LIKE 'log_error';
    +---------------+---------------------------+
    | Variable_name | Value                     |
    +---------------+---------------------------+
    | log_error     | /var/log/mysql/mysqld.log |
    +---------------+---------------------------+

4. 日志将类似于 mysqld.log.00.json 。 重新启动后，JSON 日志文件如下所示：

.. code-block:: shell

    shell> sudo less /var/log/mysql/mysqld.log.00.json
    { "prio" : 2, "err_code" : 4356, "subsystem" :
    "", "SQL_state" : "HY000", "source_file" :
    "sql_plugin.cc", "function" : "reap_plugins",
    "msg" : "Shutting down plugin
    'sha256_password'", "time" : "2017-10-
    15T12:29:08.862969Z", "err_symbol" :
    "ER_PLUGIN_SHUTTING_DOWN_PLUGIN", "label" :
    "Note" }

如果要切换回原始日志记录，可以将 ``log_error_services`` 设置为 ``'log_filter_internal;log_sink_internal'`` ：

.. code-block:: shell

    mysql> SET @@global.log_error_services='log_filter_internal;log_sink_internal';

了解有关错误日志记录配置的更多信息，请参考 https://dev.mysql.com/doc/refman/8.0/en/error-log-component-configuration.html

管理普通查询和慢查询日志
=========================
您可以通过两种方式记录查询。一种方法是通过一般查询日志，另一种方式是通过慢速查询日志。在本节中，您将学习如何配置它们。

普通查询日志
------------
根据MySQL文档：通用查询日志是 ``mysqld`` 正在做什么的一般记录。当客户端连接或断开连接时，服务器会将信息写入此日志，并记录从客户端收到的每个 ``SQL`` 语句。当您怀疑客户端中存在错误并想要确切知道客户端发送给 ``mysqld`` 的内容时，通用查询日志非常有用：

1. 指定日志文件。如果你没有指定，它将会在 ``data directory`` 目录下创建名为 ``hostname.log`` 文件；服务器在数据目录中创建文件，除非给出绝对路径名来指定不同的目录：

.. code-block:: shell

    mysql> SET @@GLOBAL.general_log_file='/var/log/mysql/general_query_log';

2. 开启普通查询日志：

.. code-block:: shell

    mysql> SET GLOBAL general_log = 'ON';

3. 你可以查看查询日志：

.. code-block:: shell

    shell> sudo cat /var/log/mysql/general_query_log

常规查询日志生成一个非常大的日志文件。在生产服务器上启用它时要非常谨慎。它极大地影响了服务器的性能。

慢查询日志
----------
根据MySQL文档：慢查询日志包含的 ``SQL`` 语句执行时间超过 ``long_query_time`` 秒，并且至少需要检查 ``min_examined_row_limit`` 行。

要记录所有查询，可以将 ``long_query_time`` 的值设置为 ``0`` 。 ``long_query_time`` 的默认值为 10 秒， ``min_examined_row_limit`` 为 0 。默认情况下，不使用索引进行的查询和管理语句(例如 ALTER TABLE ， ANALYZE TABLE，CHECK TABLE，CREATE INDEX，DROP INDEX，OPTIMIZE TABLE 和 REPAIR TABLE )不会被记录。可以使用 ``log_slow_admin_statements`` 和 ``log_queries_not_using_indexes`` 更改此行为。

要启用慢速查询日志，可以动态设置 ``slow_query_log=1`` ，并可以使用 ``slow_query_log_file`` 设置文件名。要指定日志目标，请使用 ``--log-output`` ：

1. 验证 ``long_query_time`` 并根据您的需求进行调整：

.. code-block:: shell

    mysql> SELECT @@GLOBAL.LONG_QUERY_TIME;
    +--------------------------+
    | @@GLOBAL.LONG_QUERY_TIME |
    +--------------------------+
    | 10.000000                |
    +--------------------------+
    1 row in set (0.00 sec)
    mysql> SET @@GLOBAL.LONG_QUERY_TIME=1;
    Query OK, 0 rows affected (0.00 sec)
    mysql> SELECT @@GLOBAL.LONG_QUERY_TIME;
    +--------------------------+
    | @@GLOBAL.LONG_QUERY_TIME |
    +--------------------------+
    | 1.000000                 |
    +--------------------------+
    1 row in set (0.00 sec)

2. 验证慢查询文件。默认情况下，它将位于数据目录的 ``hostname-slow`` 的文件中：

.. code-block:: shell

    mysql> SELECT @@GLOBAL.slow_query_log_file;
    +---------------------------------+
    | @@GLOBAL.slow_query_log_file    |
    +---------------------------------+
    | /var/lib/mysql/server1-slow.log |
    +---------------------------------+
    1 row in set (0.00 sec)
    mysql> SET @@GLOBAL.slow_query_log_file='/var/log/mysql/mysql_slow.log';
    Query OK, 0 rows affected (0.00 sec)
    mysql> SELECT @@GLOBAL.slow_query_log_file;
    +-------------------------------+
    | @@GLOBAL.slow_query_log_file  |
    +-------------------------------+
    | /var/log/mysql/mysql_slow.log |
    +-------------------------------+
    1 row in set (0.00 sec)
    mysql> FLUSH LOGS;
    Query OK, 0 rows affected (0.03 sec)

3. 开启慢查询日志：

.. code-block:: shell

    mysql> SELECT @@GLOBAL.slow_query_log;
    +-------------------------+
    | @@GLOBAL.slow_query_log |
    +-------------------------+
    | 0                       |
    +-------------------------+
    1 row in set (0.00 sec)
    mysql> SET @@GLOBAL.slow_query_log=1;
    Query OK, 0 rows affected (0.01 sec)
    mysql> SELECT @@GLOBAL.slow_query_log;
    +-------------------------+
    | @@GLOBAL.slow_query_log |
    +-------------------------+
    | 1                       |
    +-------------------------+
    1 row in set (0.00 sec)

4. 验证是否记录了查询（您必须执行一些长时间运行的查询才能在慢查询日志中查看它们）：

.. code-block:: shell

    mysql> SELECT SLEEP(2);
    +----------+
    | SLEEP(2) |
    +----------+
    | 0        |
    +----------+
    1 row in set (2.00 sec)

    shell> sudo less /var/log/mysql/mysql_slow.log

选择查询日志输出目的地
----------------------
您可以通过指定 ``log_output`` 变量将查询记录到 ``MySQL`` 本身的 ``FILE`` 或 ``TABLE`` 中，该变量可以是 ``FILE`` 或 ``TABLE`` ，也可以同时是 ``FILE`` 和 ``TABLE`` 。

如果将 ``log_output`` 指定为 ``FILE`` ，则通用查询日志和慢查询日志将分别写入 ``general_log_file`` 和 ``slow_query_log_file`` 指定的文件。

如果将 ``log_output`` 指定为 ``TABLE`` ，则通用查询日志和慢查询日志将分别写入 ``mysql.general_log`` 和 ``mysql.slow_log`` 表。 可以通过 ``SQL`` 语句访问日志内容。

例如：

.. code-block:: shell

    mysql> SET @@GLOBAL.log_output='TABLE';
    Query OK, 0 rows affected (0.00 sec)
    mysql> SET @@GLOBAL.general_log='ON';
    Query OK, 0 rows affected (0.02 sec)

执行一些查询，然后查询 ``mysql.general_log`` 表：

.. code-block:: shell

mysql> SELECT * FROM mysql.general_log WHERE command_type='Query' \G
~
~
*************************** 3. row ***************************
event_time: 2017-10-25 10:56:56.416746
user_host: root[root] @ localhost []
thread_id: 2421
server_id: 32
command_type: Query
argument: show databases

您可以以类似的方式使用 ``slow_log`` 表：

.. code-block:: shell

    mysql> SET @@GLOBAL.slow_query_log=1;
    Query OK, 0 rows affected (0.00 sec)
    mysql> SET @@GLOBAL.long_query_time=1;
    Query OK, 0 rows affected (0.00 sec)
    mysql> SELECT SLEEP(2);
    +----------+
    | SLEEP(2) |
    +----------+
    | 0        |
    +----------+
    1 row in set (2.00 sec)

    mysql> SELECT * FROM mysql.slow_log \G
    *************************** 1. row ***************************
    start_time: 2017-10-25 11:01:44.817421
    user_host: root[root] @ localhost []
    query_time: 00:00:02.000530
    lock_time: 00:00:00.000000
    rows_sent: 1
    rows_examined: 0
    db: employees
    last_insert_id: 0
    insert_id: 0
    server_id: 32
    sql_text: SELECT SLEEP(2)
    thread_id: 2421
    1 row in set (0.00 sec)

如果慢查询日志表变得很大，您可以通过创建一个新表并交换它：

1. 创建一个新表， ``mysql.general_log_new`` ：

.. code-block:: shell

    mysql> DROP TABLE IF EXISTS mysql.general_log_new;
    Query OK, 0 rows affected, 1 warning (0.19 sec)
    mysql> CREATE TABLE mysql.general_log_new LIKE mysql.general_log;
    Query OK, 0 rows affected (0.10 sec)

2. 使用 ``RENAME TABLE`` 命令交换表：

.. code-block:: shell

    mysql> RENAME TABLE mysql.general_log TO mysql.general_log_1, mysql.general_log_new TO mysql.general_log;
    Query OK, 0 rows affected (0.00 sec)

管理二进制日志
==============
在本节中，将介绍如何在复制环境中管理二进制日志。第6章 “二进制日志记录” 中已经介绍了基本的二进制日志处理，使用了 ``PURGE BINARY LOGS`` 命令和 ``expire_logs_days`` 变量。

在复制环境中使用这些方法是不安全的，因为如果任何一个从服务器没有消费该二进制日志并且您已删除它们，则从服务器将不同步，您将需要重建它。

删除二进制日志的安全方法是检查每个从服务器上已经读取的二进制日志并删除它们。您可以使用 ``mysqlbinlogpurge`` 实用程序来实现此目的。

在任何服务器上执行 ``mysqlbinlogpurge`` 脚本，并指定主从服务器主机。该脚本连接到所有从服务器并找出最新被应用的二进制日志。然后它清除主服务器到该点的二进制日志。您需要超级用户连接到所有从服务器：

1. 连接到任何服务器并执行 ``mysqlbinlogpurge`` 脚本：

.. code-block:: shell

    shell> mysqlbinlogpurge --master=dbadmin:<pass>@master:3306 --slaves=dbadmin:<pass>@slave1:3306,dbadmin:<pass>@slave2:3306

.. code-block:: shell

    mysql> SHOW BINARY LOGS;
    +--------------------+-----------+
    | Log_name           | File_size |
    +--------------------+-----------+
    | master-bin.000001  | 177       |
    | master-bin.000018  | 47785     |
    | master-bin.000019  | 203       |
    | master-bin.000020  | 203       |
    | master-bin.000021  | 177       |
    | master-bin.000022  | 203       |
    | master-bin.000023  | 57739432  |
    +--------------------+-----------+
    23 rows in set (0.00 sec)

    shell> mysqlbinlogpurge --master=dbadmin:<pass>@master:3306 --slaves=dbadmin:<pass>@slave1:3306,dbadmin:<pass>@slave2:3306
    # Latest binlog file replicated by all slaves:master-bin.000022
    # Purging binary logs prior to 'masterbin.000023'

2. 如果您希望在命令中未指定的情况下发现所有从服务器，则应在所有从服务器上设置 ``report_host`` 和 ``report_port`` 并重新启动 ``MySQL`` 服务器。在每个从服务器上：

.. code-block:: shell

    shell> sudo vi /etc/my.cnf
    [mysqld]
    report-host = slave1
    report-port = 3306
    shell> sudo systemctl restart mysql
    mysql> SHOW VARIABLES LIKE 'report%';
    +-----------------+---------------+
    | Variable_name   | Value         |
    +-----------------+---------------+
    | report_host     | slave1        |
    | report_password |               |
    | report_port     | 3306          |
    | report_user     |               |
    +-----------------+---------------+
    4 rows in set (0.00 sec)

3. 使用 discover-slaves-login 选项来执行 mysqlbinlogpurge ：

.. code-block:: shell

    mysql> SHOW BINARY LOGS;
    +--------------------+-----------+
    | Log_name           | File_size |
    +--------------------+-----------+
    | centos7-bin.000025 | 203       |
    | centos7-bin.000026 | 203       |
    | centos7-bin.000027 | 203       |
    | centos7-bin.000028 | 154       |
    +--------------------+-----------+
    4 rows in set (0.00 sec)
    shell> mysqlbinlogpurge --master=dbadmin:<pass>@master --discover-slaves-login=dbadmin:<pass>
    # Discovering slaves for master at master:3306
    # Discovering slave at slave1:3306
    # Found slave: slave1:3306
    # Discovering slave at slave2:3306
    # Found slave: slave2:3306
    # Latest binlog file replicated by all slaves:master-bin.000027
    # Purging binary logs prior to 'masterbin.000028'
