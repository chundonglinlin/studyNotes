**********
二进制日志
**********

在本章中，我们将会覆盖如下主题：

- 使用二进制日志；
- 二进制日志格式；
- 从二进制日志中抽取语句；
- 忽略要写入二进制日志的数据库；
- 重定位二进制日志；

简介
====
二进制日志包含数据库所有更改的记录，包括数据和结构。二进制日志不用于不修改数据的 ``SELECT`` 或 ``SHOW`` 等语句。运行启用了二进制日志记录的服务器会产生轻微的性能影响 二进制日志是崩溃安全的。仅记录或回读完整的事件或事务。

你为什么要使用二进制日志？

- 复制：使用二进制日志将对服务器所做的更改流式传输到另一台服务器。从服务器充当镜像副本，可用于分配负载。接受写入的服务器称为主服务器，镜像副本服务器称为从服务器。
- 时间点恢复：假设您在星期日 00:00 进行备份，并且数据库在星期日的 8:00 崩溃。 使用备份，您可以恢复到周日 00:00 。 使用二进制日志，您可以恢复到 08:00 。

使用二进制日志
==============
要启用 ``binlog`` ，您必须设置 ``log_bin`` 和 ``server_id`` 并重新启动服务器。您可以在 ``log_bin`` 本身中提及路径和基本名称。例如， ``log_bin`` 设置为 ``/data/mysql/binlogs/server1`` ，二进制日志存储在 ``/data/mysql/binlogs`` 文件夹中，名称为 ``server1.000001`` ， ``server1.000002`` ，依此类推。每次启动或刷新日志或当前日志的大小达到 ``max_binlog_size`` 时，服务器都会在序列中创建一个新文件。它维护 ``server1.index`` 文件，该文件包含每个二进制日志的位置。

开启二进制日志
--------------

1. 启用二进制日志记录并设置 ``server_id`` 。在您喜欢的编辑器中打开 ``MySQL`` 配置文件，并附加以下行。选择 ``server_id`` ，使其对您架构中的每个 ``MySQL`` 服务器都是唯一的。您也可以简单地将 ``log_bin`` 变量放在 ``my.cnf`` 中，没有任何值。在这种情况下，二进制日志在 ``data directory`` 目录中创建，并使用主机名( ``hostname`` )作为其名称。

.. code-block:: shell

    shell> sudo vi /etc/my.cnf
    [mysqld]
    log_bin = /data/mysql/binlogs/server1
    server_id = 100

2. 重启MySQL服务器：

.. code-block:: shell

    shell> sudo systemctl restart mysql

3. 验证二进制日志被创建：

.. code-block:: shell

    mysql> SHOW VARIABLES LIKE 'log_bin%';
    mysql> SHOW MASTER LOGS;
    shell> sudo ls -lhtr /data/mysql/binlogs

4. 执行 ``SHOW BINARY LOGS;`` 或者 ``SHOW MASTER LOGS;`` 显示服务器的所有二进制日志。

5. 执行 ``SHOW MASTER STATUS;`` 获取当前二进制日志位置的命令：

一旦 ``server1.000001`` 达到 ``max_binlog_size`` （默认为 ``1GB`` ），将创建一个新文件 ``server1.000002`` 并将其添加到 ``server1.index`` 。 您可以配置为使用 ``SET @@ global.max_binlog_size=536870912`` 动态设置 ``max_binlog_size`` 。

关闭一个会话的二进制日志
------------------------
在某些情况下，您可能不希望将语句复制到其他服务器。为此，您可以使用以下命令禁用该会话的二进制日志记录：

.. code-block:: shell

    mysql> SET SQL_LOG_BIN = 0;

执行上一个语句后所有 ``SQL`` 语句都不会记录到二进制日志中。这仅适用于该会话。

要启用，您可以执行以下操作：

.. code-block:: shell

    mysql> SET SQL_LOG_BIN = 1;

移动到下一个日志
----------------
您可以使用 ``FLUSH LOGS`` 命令关闭当前的二进制日志并打开一个新日志：

.. code-block:: shell

    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------+
    | server1.000001 | 154       |
    +----------------+-----------+
    1 row in set (0.00 sec)
    mysql> FLUSH LOGS;
    Query OK, 0 rows affected (0.02 sec)
    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------+
    | server1.000001 | 198       |
    | server1.000002 | 154       |
    +----------------+-----------+
    2 rows in set (0.00 sec)

过期二进制日志
--------------
二进制日志会根据写入次数占用大量空间。它们可以立即填满磁盘。清理它们至关重要：

1. 使用 ``binlog_expire_logs_seconds`` 和 ``expire_logs_days`` 设置日志的过期。如果要设置以天为单位的到期时间，请设置 ``expire_logs_days`` 。例如，如果要删除所有超过两天的二进制日志，则 ``SET @@ global.expire_logs_days = 2`` 。将值设置为 0 将禁用自动到期。如果要获得更多粒度，可以使用 ``binlog_expire_logs_seconds`` 变量，该变量以秒为单位设置二进制日志过期时间。此变量和 ``expire_logs_days`` 的效果是累加的。例如，如果 ``expire_logs_days`` 为 ``1`` 且 ``binlog_expire_logs_seconds`` 为 ``43200`` ，则每 ``1.5`` 天清除一次二进制日志。这会产生与将 ``binlog_expire_logs_seconds`` 设置为 ``129600`` 并将 ``expire_logs_days`` 设置为 ``0`` 相同的结果。在 MySQL 8.0 中，必须将 ``binlog_expire_logs_seconds`` 和 ``expire_logs_days`` 都设置为 ``0`` 才能禁用自动清除二进制日志。
2. 要手动清除日志，请执行 ``PURGE BINARY LOGS TO'<file_name>'`` 。 例如，有 server1.000001，server1.000002，server1.000003 和 server1.000004 等文件，如果执行 ``PURGE BINARY LOGS TO'server1.000004'`` ，将删除 ``server1.000003`` 及之前的所有文件但不会删除 ``server1.000004`` ：

.. code-block:: shell

    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------+
    | server1.000001 | 198       |
    | server1.000002 | 198       |
    | server1.000003 | 198       |
    | server1.000004 | 154       |
    +----------------+-----------+
    4 rows in set (0.00 sec)
    mysql> PURGE BINARY LOGS TO 'server1.000004';
    Query OK, 0 rows affected (0.00 sec)
    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------+
    | server1.000004 | 154       |
    +----------------+-----------+
    1 row in set (0.00 sec)

您还可以执行 ``PURGE BINARY LOGS '2017-08-03 15:45:00'`` 命令，而不是指定日志文件。您也可以使用 ``MASTER`` 而不是 ``BINARY`` 。 ``mysql> PURGE MASTER LOGS TO'server1.000004'`` 也有效。

3. 要删除所有二进制日志并从头开始，请执行 ``RESET MASTER`` ：

.. code-block:: shell

    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------|
    | server1.000004 | 154       |
    +----------------+-----------+
    1 row in set (0.00 sec)
    mysql> RESET MASTER;
    mysql> SHOW BINARY LOGS;
    +----------------+-----------+
    | Log_name       | File_size |
    +----------------+-----------+
    | server1.000001 | 154       |
    +----------------+-----------+
    1 row in set (0.00 sec)

如果使用复制，清除或过期日志是一种非常不安全的方法。清除二进制日志的安全方法是使用 ``mysqlbinlogpurge`` 脚本，这将在第12章管理日志中介绍。

二进制日志格式
==============
二进制日志可以用三种格式编写：

1. STATEMENT ：记录实际的SQL语句。
2. ROW ：将记录对每行所做的更改。例如，更新语句更新10行，所有10行的更新信息都写入日志。而在基于语句的复制中，只写入 ``update`` 语句。默认格式为 ``ROW`` 。
3. MIXED ： MySQL 在需要时从 ``STATEMENT`` 切换到 ``ROW`` 。

有些语句在不同的服务器上执行时会导致不同的结果。例如， ``UUID()`` 函数的输出因服务器而异。这些语句称为非确定性语句，对于基于语句的复制不安全。在这些情况下， MySQL 服务器在您设置 ``MIXED`` 格式时会切换到基于行的格式。

更多的详情，请参考 https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html 。

你可以使用动态变量 binlog_format 来设置格式，它具有全局和会话范围。

.. code-block:: shell

    mysql> SET GLOBAL binlog_format = 'STATEMENT';
    #或者
    mysql> SET GLOBAL binlog_format = 'ROW';

对于各种格式的优点和缺点。请参考 https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html 。

1. MySQL 8.0 使用版本 2 二进制日志行事件，MySQL 5.6.6 之前的 MySQL 服务器版本无法读取这些事件。将 ``logbin-use-v1-row-events`` 设置为 ``1`` 以使用版本 ``1`` ，以便 MySQL 5.6.6 之前的版本可以读取它。默认值为 ``0`` 。

.. code-block:: shell

    mysql> SET @@GLOBAL.log_bin_use_v1_row_events=0;

2. 创建存储函数时，必须声明它是确定性的或不修改数据。否则，二进制日志记录可能不安全。默认情况下，要接受 ``CREATE FUNCTION`` 语句，必须至少明确指定 ``DETERMINISTIC`` ， ``NO SQL`` 或 ``READS SQL DATA`` 中的一个。 否则会发生错误。

您可以在例程中编写非确定性语句，并仍然声明为 ``DETERMINISTIC`` （不是一个好习惯），如果要复制未声明为 ``DETERMINISTIC`` 的例程，可以设置 ``log_bin_trust_function_creators`` 变量：

.. code-block:: shell

    mysql> SET GLOBAL log_bin_trust_function_creators = 1;

要了解更多复制存储编程，请参考 https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html

从二进制日志中抽取语句
======================
您可以使用 ``mysqlbinlog`` 实用程序（随MySQL一起提供）从二进制日志中提取内容并将其应用于其他服务器。

使用各种二进制格式执行一些语句。将 ``binlog_format`` 设置为 ``GLOBAL`` 级别时，必须断开连接并重新连接才能获得更改。如果继续使用当前连接，请设置为 ``SESSION`` 级别。

修改为基于语句的复制(SBR)：

.. code-block:: shell

    mysql> SET @@GLOBAL.BINLOG_FORMAT='STATEMENT';

更新几行：

.. code-block:: shell

    mysql> BEGIN;
    mysql> UPDATE salaries SET salary=salary*2 WHERE emp_no<10002;
    mysql> COMMIT;

修改为基于行的复制(RBR)：

.. code-block:: shell

    mysql> SET @@GLOBAL.BINLOG_FORMAT='ROW';

更新几行：

.. code-block:: shell

    mysql> BEGIN;
    mysql> UPDATE salaries SET salary=salary/2 WHERE emp_no<10002;
    mysql> COMMIT;

修改为MIXED格式：

.. code-block:: shell

    mysql> SET @@GLOBAL.BINLOG_FORMAT='MIXED';

更新几行：

.. code-block:: shell

    mysql> BEGIN;
    mysql> UPDATE salaries SET salary=salary*2 WHERE emp_no<10002;
    mysql> INSERT INTO departments VALUES('d010',UUID());
    mysql> COMMIT;

要显示 ``server1.000001`` 的内容，请执行以下操作：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001

您将获得类似于以下内容的输出：

.. code-block:: shell

    # at 226
    #170815 12:49:24 server id 200 end_log_pos 312 CRC32
    0x9197bf88 Query thread_id=5 exec_time=0
    error_code=0
    BINLOG '
    ~
    ~

在第一行中，``＃at`` 后面的数字表示二进制日志文件中事件的起始位置（文件偏移量）。 第二行包含语句在服务器上启动的时间戳。时间戳后跟 ``server id`` ， ``end_log_pos`` ， ``thread_id`` ， ``exec_time`` 和 ``error_code`` 。

- server id：发生事件的服务器的 ``server_id`` 值（本例中为200）。
- end_log_pos：是下一个事件的开始位置。
- thread_id：表示执行事件的线程。
- exec_time：在主服务器上执行事件所花费的时间。在从服务器上，它是从服务器上的结束执行时间减去主服务器上的开始执行时间的差异。差异用作指示复制滞后于主服务器的程度。
- error_code：表示执行事件的结果。零表示没有发生错误。

建议
-----

1. 您在基于语句的复制中执行了 ``UPDATE`` 语句，并在二进制日志中记录了相同的语句。 除了服务器之外，会话变量也会保存在二进制日志中，以便在从服务器上复制相同的行为。

2. 使用基于行的复制时，而不是语句，将保存 ROW ，它是二进制格式，您无法读取。而且，你可以查看长度，单个更新语句生成了这么多数据。在 Extract 行事件显示部分，其中说明了如何查看二进制格式。

3. 使用 ``MIXED`` 格式时， ``UPDATE`` 语句记录为 ``SQL`` ，而 ``INSERT`` 语句以基于行的格式记录，因为 ``INSERT`` 具有非确定性的 ``UUID()`` 函数。

提取的日志可以通过管道传输到 ``MySQL`` 以重放事件。在重放 ``binlog`` 时最好使用 ``force`` 选项，因为如果它在某一点停留，它将不会停止执行。稍后，您可以找出错误并手动修复数据。

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 | mysql -f -h <remote_host> -u <username> -p

或者您可以保存到文件中并稍后执行：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 > server1.binlog_extract
    shell> cat server1.binlog_extract | mysql -h <remote_host> -u <username> -p

基于时间和位置抽取
------------------
您可以通过指定位置从二进制日志中提取部分数据。假设你想做时间点恢复。假设 ``DROP DATABASE`` 命令在 2017-08-19 12:18:00 执行，最新的可用备份是 2017-08-19 12:00:00，您已经恢复到这个点了。现在，您需要从 12:00:01 到 2017-08-19 12:17:00 恢复数据。请记住，如果您提取完整日志，它还将包含 ``DROP DATABASE`` 命令，它将再次擦除您的数据。您可以通过 ``--start-datetime`` 和 ``--stop-datatime`` 选项指定时间窗口来提取数据。

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 --start-datetime="2017-08-19 00:00:01" --stop-datetime="2017-08-19 12:17:00" > binlog_extract

**使用时间窗口的缺点是您将错过在灾难发生的第二天发生的事务。** 为避免这种情况，您必须在二进制日志文件中使用事件的文件偏移量。

一致的备份会保存已备份的 ``binlog`` 文件偏移量。恢复备份后，必须从备份提供的偏移量中提取 ``binlog`` 。您将在下一章中了解有关备份的更多信息。

假设备份的偏移量为 471 ， ``DROP DATABASE`` 命令的偏移量为 1793 。您可以使用 ``--start-position`` 和 ``--stop-position`` 选项在偏移量之间提取日志：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 --start-position=471 --stop-position=1793 > binlog_extract

确保 ``DROP DATABASE`` 命令不会再次出现在提取的 ``binlog`` 中。

为了恢复关闭二进制日志
^^^^^^^^^^^^^^^^^^^^^^
在恢复二进制日志时，如果您不希望 ``mysqlbinlog`` 进程创建二进制日志，则可以使用 ``--disable-log-bin`` 选项，以便不会写入二进制日志：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 --startposition=660 --stop-position=1298 --disable-log-bin > binlog_restore

您可以看到 ``SQL_LOG_BIN=0`` 被写入 ``binlog`` 还原文件，这将阻止创建 ``binlog`` 。

.. code-block:: ini

    /*!32316 SET @OLD_SQL_LOG_BIN=@@SQL_LOG_BIN,SQL_LOG_BIN=0*/;

基于数据库抽取
--------------
使用 ``--database`` 选项，可以筛选特定数据库的事件。如果多次给出，则只考虑最后一个选项。这对于基于行的复制非常有效。但对于基于语句的复制和 ``MIXED`` ，仅在选择默认数据库时才会提供输出。

以下命令从 ``employees`` 数据库中提取事件：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 --database=employees > binlog_extract

如 MySQL 8 参考手册中所述，假设通过使用基于语句的日志记录执行这些语句来创建二进制日志：

.. code-block:: shell

    mysql>
    INSERT INTO test.t1 (i) VALUES(100);
    INSERT INTO db2.t2 (j) VALUES(200);

    USE test;
    INSERT INTO test.t1 (i) VALUES(101);
    INSERT INTO t1 (i) VALUES(102);
    INSERT INTO db2.t2 (j) VALUES(201);

    USE db2;
    INSERT INTO test.t1 (i) VALUES(103);
    INSERT INTO db2.t2 (j) VALUES(202);
    INSERT INTO t2 (j) VALUES(203);

``mysqlbinlog --database = test`` 不输出前两个 ``INSERT`` 语句，因为没有默认数据库。

它会输出 ``USE test`` 后三个 ``INSERT`` 语句，但不输出 ``USE db2`` 之后的三个 ``INSERT`` 语句。

``mysqlbinlog --database = db2`` 不输出前两个 ``INSERT`` 语句，因为没有默认数据库。它不会在 ``USE test`` 后输出三个 ``INSERT`` 语句，但会在 ``USE db2`` 之后输出三个 ``INSERT`` 语句。

提取行事件的显示
----------------
在基于行的复制中，默认情况下会显示二进制格式。要查看 ``ROW`` 信息，您必须将 ``--verbose`` 或 ``-v`` 选项传递给 ``mysqlbinlog`` 。行事件的二进制格式以伪 ``SQL`` 语句的形式显示为注释，行以 ``###`` 开头。您可以看到单个 ``UPDATE`` 语句被重写为每行的 ``UPDATE`` 语句：

.. code-block:: shell

    shell> mysqlbinlog
    /data/mysql/binlogs/server1.000001 --startposition=660 --stop-position=1298 --verbose
    ~
    ~
    # at 660
    #170815 13:29:02 server id 200 end_log_pos 722 CRC32
    0xe0a2ec74 Table_map: `employees`.`salaries`
    mapped to number 165
    # at 722
    #170815 13:29:02 server id 200 end_log_pos 1298
    CRC32 0xf0ef8b05 Update_rows: table id 165 flags:
    STMT_END_F

    BINLOG '
    HveSWRPIAAAAPgAAANICAAAAAKUAAAAAAAEACWVtcGxveWVlcwAIc
    2FsYXJpZXMABAMDCgoAAAEB
    AHTsouA=
    ~
    ~
    '/*!*/;
    ### UPDATE `employees`.`salaries`
    ### WHERE
    ### @1=10001
    ### @2=240468
    ### @3='1986:06:26'
    ### @4='1987:06:26'
    ### SET
    ### @1=10001
    ### @2=120234
    ### @3='1986:06:26'
    ### @4='1987:06:26'
    ~
    ~
    ### UPDATE `employees`.`salaries`
    ### WHERE
    ### @1=10001
    ### @2=400000
    ### @3='2017:06:18'
    ### @4='9999:01:01'
    ### SET
    ### @1=10001
    ### @2=200000
    ### @3='2017:06:18'
    ### @4='9999:01:01'
    SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by
    mysqlbinlog */ /*!*/;
    DELIMITER ;
    # End of log file
    /*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
    /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;

如果您只想查看没有二进制行信息的伪 ``SQL`` ，请指定 ``--base64-output ="decoderows"`` 以及 ``--verbose`` ：

.. code-block:: shell

    shell> sudo mysqlbinlog
    /data/mysql/binlogs/server1.000001 --startposition=660 --stop-position=1298 --verbose --base64-
    output="decode-rows"
    /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
    /*!50003 SET
    @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYP
    E=0*/;
    DELIMITER /*!*/;
    # at 660
    #170815 13:29:02 server id 200 end_log_pos 722 CRC32
    0xe0a2ec74 Table_map: `employees`.`salaries`
    mapped to number 165
    # at 722
    #170815 13:29:02 server id 200 end_log_pos 1298
    CRC32 0xf0ef8b05 Update_rows: table id 165 flags:
    STMT_END_F
    ### UPDATE `employees`.`salaries`
    ### WHERE
    ### @1=10001
    ### @2=240468
    ### @3='1986:06:26'
    ### @4='1987:06:26'
    ### SET
    ### @1=10001
    ### @2=120234
    ### @3='1986:06:26'
    ### @4='1987:06:26'
    ~

重写数据库的名称
----------------
假设您要将生产服务器上的 ``employees`` 数据库的二进制日志还原到开发服务器上的 ``employees_dev`` 。您可以使用 ``--rewrite-db ='from_name->to_name'`` 选项。这将重写所有 ``from_name`` 发生的事情到 ``to_name`` 。

要转换多个数据库，请多次指定该选项：

.. code-block:: shell

    shell> sudo mysqlbinlog /data/mysql/binlogs/server1.000001 --startposition=1499 --stop-position=1646 --rewrite-db='employees->employees_dev'
    ~#
    at 1499
    #170815 13:29:27 server id 200 end_log_pos 1646
    CRC32 0xc73d68fb Query thread_id=8
    exec_time=0 error_code=0
    use `employees_dev`/*!*/;
    ~~U
    PDATE salaries SET salary=salary*2 WHERE
    emp_no<10002
    /*!*/;
    SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by
    mysqlbinlog */ /*!*/;
    DELIMITER ;
    # End of log file
    ~

您可以看到该语句 ``use `employees_dev` / *！* /;`` 被使用。因此，在恢复时，所有更改都将应用于 ``employees_dev`` 数据库。正如 ``MySQL`` 参考手册中所述：

与 ``--database`` 选项一起使用时，首先应用 ``--rewrite-db`` 选项，然后使用重写数据库名称应用 ``--database`` 选项。选项的顺序没有关系。这意味着，例如，如果使用 ``--rewrite-db ='mydb->yourdb' --database=yourdb`` 启动 ``mysqlbinlog`` ，则对数据库 ``mydb`` 和 ``yourdb`` 中的任何表的所有更新都包含在输出中。另一方面，如果以 ``--rewrite-db ='mydb->yourdb' --database=mydb`` 启动，那么 ``mysqlbinlog`` 根本不输出任何语句：因为 ``mydb`` 的所有更新在应用 ``--database`` 选项之前首先被重写为对 ``yourdb`` 的更新，存在不匹配``--database=mydb`` 的更新。

在二进制日志文件中显示事件
--------------------------
除了使用 ``mysqlbinlog`` 之外，您还可以使用 ``SHOW BINLOG EVENTS`` 命令来显示事件。

以下命令将显示 ``server1.000008`` 二进制日志中的事件。如果未指定 ``LIMIT`` ，则显示所有事件：

.. code-block:: shell

    mysql> SHOW BINLOG EVENTS IN 'server1.000008' LIMIT 10;

您还可以指定位置和偏移量：

.. code-block:: shell

    mysql> SHOW BINLOG EVENTS IN 'server1.000008' FROM 123 LIMIT 2,1;

**show binlog events [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]**

选项解析：

- IN 'log_name'   指定要查询的 ``binlog`` 文件名(不指定就是第一个 ``binlog`` 文件)
- FROM pos        指定从哪个 ``pos`` 起始点开始查起(不指定就是从整个文件首个 ``pos`` 点开始算)
- LIMIT [offset,] 偏移量(不指定就是 0 )
- row_count       查询总条数(不指定就是所有行)

忽略要写入二进制日志的数据库
============================
您可以通过在 ``my.cnf`` 中指定 ``--binlog-do-db=db_name`` 选项来选择应将哪些数据库写入二进制日志。要指定多个数据库，必须使用此选项的多个实例。由于数据库名称可以包含逗号，因此如果提供以逗号分隔的列表，则该列表将被视为单个数据库的名称。您需要重新启动 MySQL 服务器才能生效。

打开 ``my.cnf`` 并添加以下行：

.. code-block:: shell

    shell> sudo vi /etc/my.cnf
    [mysqld]
    binlog_do_db=db1
    binlog_do_db=db2

binlog_do_db 的行为从基于语句的日志记录到基于行的日志记录，就像 ``mysqlbinlog`` 实用程序中的 ``--database`` 选项一样。

在基于语句的日志记录中，只有默认数据库（即 ``USE`` 选择的数据库）被写入二进制日志。 使用 ``binlog_do_db`` 选项时应该非常小心，因为它在使用基于语句的日志记录时无法正常工作。请参阅参考手册中提到的以下示例。

例子1

如果使用 ``--binlog-do-db=sales`` 启动服务器并发出以下语句，则不会记录 ``UPDATE`` 语句：

.. code-block:: shell

    mysql> USE prices; #非配置数据库
    mysql> UPDATE sales.january SET amount=amount+1000; #但执行的是配置数据库内容

这主要原因是只检查默认数据库的行为，且仅从语句中就很难知道是否应该复制它。如果不需要，还可以更快地检查默认数据库而不是所有数据库。

例子2

如果使用 ``--binlog-do-db=sales`` 启动服务器，则即使在设置 ``--binlog-do-db`` 时未包含 ``prices`` ，也会记录以下 ``UPDATE`` 语句：

.. code-block:: shell

    mysql> USE sales;
    mysql> UPDATE prices.discounts SET percentage = percentage + 10;

因为在发出 ``UPDATE`` 语句时 ``sales`` 是默认数据库，所以会记录 ``UPDATE`` 。

在基于行的日志记录中，它仅限于数据库 ``db_name`` 。仅记录对属于 ``db_name`` 的表的更改；默认数据库对此没有影响。

与基于行的日志记录相反，基于语句的日志记录的 --binlog-do-db 处理的另一个重要区别在于引用多个数据库的语句。假设服务器以 ``--binlog-do-db=db1`` 启动，并执行以下语句：

.. code-block:: shell

    mysql> USE db1;
    mysql> UPDATE db1.table1 SET col1 = 10, db2.table2 SET col2 = 20;

如果使用基于语句的日志记录，则两个表的更新都将写入二进制日志。但是，使用基于行的格式时，仅记录对 ``table1`` 的更改;  ``table2`` 位于不同的数据库中，因此 ``UPDATE`` 不会记录它的更改。

同样，您可以使用 ``--binlog-ignore-db=db_name`` 选项忽略写入二进制日志的数据库。

为了获取更多信息，请参考 https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html

重定位二进制日志
================
由于二进制日志占用的空间更多，有时您可能希望更改二进制日志的位置，因此以下过程有所帮助。仅更改 ``log_bin`` 是不够的，您必须移动所有二进制日志并使用新位置更新索引文件。 ``mysqlbinlogmove`` 实用程序通过自动执行这些任务来简化您的工作。

应安装 MySQL Utilities 以使用 mysqlbinlogmove 脚本。 有关安装步骤，请参阅第1章，MySQL 8.0 - 安装和升级。

1. 停止MySQL服务器：

.. code-block:: shell

    shell> sudo systemctl stop mysql

2. 启动 ``mysqlbinlogmove`` 实用程序。如果要将二进制日志从 ``/data/mysql/binlogs`` 更改为 ``/binlogs`` ，则应使用以下命令。如果您的基本名称不是默认名称，则必须通过 ``--binlog-base-name`` 选项提及您的基本名称：

.. code-block:: shell

shell> sudo mysqlbinlogmove --bin-log-base-name=server1 --binlog-dir=/data/mysql/binlogs /binlogs

3. 编辑 ``my.cnf`` 文件并更新 ``log_bin`` 的新位置：

.. code-block:: shell

    shell> sudo vi /etc/my.cnf
    [mysqld]
    log_bin=/binlogs

4. 启动MySQL服务器：

.. code-block:: shell

    shell> sudo systemctl start mysql

如果有很多 ``binlog`` ，服务器的停机时间会很长。为了避免这种情况，您可以使用 ``--server`` 选项重新定位除当前正在使用的二进制日志之外的所有二进制日志(具有更高的序列号)。然后停止服务器，使用前面的方法，并重新定位最后的二进制日志，这将会更快，因为只有一个文件。然后你可以改变 ``my.cnf`` 并启动服务器。

例如：

.. code-block:: shell

    shell> sudo mysqlbinlogmove --server=root:pass@host1:3306 /new/location
