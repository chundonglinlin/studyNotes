****
查询数据
****


基本查询
========

查询单个数据
-----------
使用 ``find`` 方法：

.. code-block:: php

	// table方法必须指定完整的数据表名
	Db::table('think_user')->where('id',1)->find();

最终生成的 ``SQL`` 语句可能是：

.. code-block:: shell

    SELECT * FROM `think_user` WHERE  `id` = 1 LIMIT 1

.. note:: ``find`` 方法查询结果不存在，返回 ``null`` ，否则返回结果数组。

如果希望在没有找到数据后抛出异常可以使用

.. code-block:: php

    // table方法必须指定完整的数据表名
	Db::table('think_user')->where('id',1)->findOrFail();


如果没有查找到数据，则会抛出一个 ``think\db\exception\DataNotFoundException`` 异常。

``V5.1.23+`` 版本开始，支持 ``findOrEmpty`` 方法，当查询不存在的时候返回空数组而不是 ``Null`` 。

.. code-block:: php

    // table方法必须指定完整的数据表名
	Db::table('think_user')->where('id',1)->findOrEmpty();

查询多个数据（数据集）
-------------------
使用 ``select`` 方法：

.. code-block:: php

    Db::table('think_user')->where('status',1)->select();

最终生成的SQL语句可能是：

.. code-block:: shell

    SELECT * FROM `think_user` WHERE `status` = 1

.. note:: ``select`` 方法查询结果是一个二维数组，如果结果不存在，返回空数组。

如果希望在没有查找到数据后抛出异常可以使用

.. code-block:: php

    Db::table('think_user')->where('status',1)->selectOrFail();

如果没有查找到数据，同样也会抛出一个 ``think\db\exception\DataNotFoundException`` 异常。

如果设置了数据表前缀参数的话，可以使用

.. code-block:: php

	Db::name('user')->where('id',1)->find();
	Db::name('user')->where('status',1)->select();

.. note:: 如果你的数据表没有设置表前缀的话，那么 ``name`` 和 ``table`` 方法效果一致。

在 ``find`` 和 ``select`` 方法之前可以使用所有的链式操作（参考链式操作章节）方法。

.. note:: 默认情况下， ``find`` 和 ``select`` 方法返回的都是数组，区别在于后者是二维数组。

助手函数
--------
系统提供了一个 ``db`` 助手函数，可以更方便的查询：

.. code-block:: php

	db('user')->where('id',1)->find();
	db('user')->where('status',1)->select();

``db`` 方法的第一个参数的作用和 ``name`` 方法一样，如果需要使用不同的数据库连接，可以使用：

.. code-block:: php

    db('user','db_config1')->where('id', 1)->find();


值和列查询
=========

查询某个字段的值
---------------
可以用 ``value`` 只返回一个值

.. code-block:: php

    // 返回某个字段的值
	Db::table('think_user')->where('id',1)->value('name');

.. note:: ``value`` 方法查询结果不存在，返回 ``null``



查询某一列的值
-------------
可以用 ``column`` 方法。

.. code-block:: php

	// 返回数组
	Db::table('think_user')->where('status',1)->column('name');
	// 指定id字段的值作为索引
	Db::table('think_user')->where('status',1)->column('name','id');

如果要返回完整数据，并且添加一个索引值的话，可以使用

.. code-block:: php

	// 指定id字段的值作为索引 返回所有数据
	Db::table('think_user')->where('status',1)->column('*','id');

.. note:: ``column`` 方法查询结果不存在，返回空数组


数据分批处理
===========
如果你需要处理成千上百条数据库记录，可以考虑使用 ``chunk`` 方法，该方法一次获取结果集的一小块，然后填充每一小块数据到要处理的闭包，该方法在编写处理大量数据库记录的时候非常有用。

比如，我们可以全部用户表数据进行分批处理，每次处理 ``100`` 个用户记录：

.. code-block:: php

	Db::table('think_user')->chunk(100, function($users) {
	    foreach ($users as $user) {
	        //
	    }
	});
	// 或者交给回调方法myUserIterator处理
	Db::table('think_user')->chunk(100, 'myUserIterator');

你可以通过从闭包函数中返回 ``false`` 来中止对后续数据集的处理：

.. code-block:: php

	Db::table('think_user')->chunk(100, function($users) {
	    foreach ($users as $user) {
	        // 处理结果集...
			if($user->status==0){
	            return false;
	        }
	    }
	});

也支持在 ``chunk`` 方法之前调用其它的查询方法，例如：

.. code-block:: php

	Db::table('think_user')
	->where('score','>',80)
	->chunk(100, function($users) {
	    foreach ($users as $user) {
	        //
	    }
	});

``chunk`` 方法的处理默认是根据主键查询，支持指定字段，例如：

.. code-block:: php

	Db::table('think_user')->chunk(100, function($users) {
	    // 处理结果集...
	    return false;
	},'create_time');

并且支持指定处理数据的顺序。

.. code-block:: php

	Db::table('think_user')->chunk(100, function($users) {
	    // 处理结果集...
	    return false;
	},'create_time', 'desc');

.. note:: ``chunk`` 方法一般用于命令行操作批处理数据库的数据，不适合 ``WEB`` 访问处理大量数据，很容易导致超时。

大批量数据处理
=============
如果你需要处理大量的数据，可以使用新版提供的游标查询功能，该查询方式利用了 ``PHP`` 的生成器特性，可以大幅减少大量数据查询的内存占用问题。

.. code-block:: php

	$cursor = Db::table('user')->where('status', 1)->cursor();
	foreach($cursor as $user){
		echo $user['name'];
	}

``cursor`` 方法返回的是一个生成器对象， ``user`` 变量是数据表的一条数据（数组）。


JSON类型数据查询（mysql）
=======================
``MySQL 5.7.7`` 版本开始， ``InnoDB`` 存储引擎已经原生支持 ``JSON`` 格式。

.. code-block:: php

	// 查询JSON类型字段 （info字段为json类型）
	Db::table('think_user')
		->where('info->email','thinkphp@qq.com')
		->find();

