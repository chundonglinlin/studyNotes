*******
原生查询
*******

``Db`` 类支持原生 ``SQL`` 查询操作，主要包括下面两个方法：

query方法
=========
``query`` 方法用于执行 ``SQL`` 查询操作，如果数据非法或者查询错误则返回 ``false`` ，否则返回查询结果数据集（同 ``select`` 方法）。

使用示例：

.. code-block:: php

    Db::query("select * from think_user where status=1");
    Db::query("select * from think_user where status=?",[1]);
    Db::query("select * from think_user where status=:id", ["id"=>1]);

.. note:: 如果你当前采用了分布式数据库，并且设置了读写分离的话， ``query`` 方法始终是在读服务器执行，因此 ``query`` 方法对应的都是读操作，而不管你的 ``SQL`` 语句是什么。


execute方法
===========
``execute`` 用于更新和写入数据的 ``sql`` 操作，如果数据非法或者查询错误则返回 ``false`` ，否则返回影响的记录数。

使用示例：

.. code-block:: php

    Db::execute("update think_user set name='thinkphp' where status=1");
    Db::execute("update think_user set name='thinkphp' where status=?", [1]);
    Db::execute("update think_user set name='thinkphp' where status=:status", ["status" => 1]);

.. note:: 如果你当前采用了分布式数据库，并且设置了读写分离的话， ``execute`` 方法始终是在写服务器执行，因此 ``execute`` 方法对应的都是写操作，而不管你的 ``SQL`` 语句是什么。


参数绑定
========

支持在原生查询的时候使用参数绑定，包括问号占位符或者命名占位符，例如：

.. code-block:: php

	Db::query("select * from think_user where id=? AND status=?", [8, 1]);
	// 命名绑定
	Db::execute("update think_user set name=:name where status=:status", ['name' => 'thinkphp', 'status' => 1]);

.. note:: 注意不支持对表名使用参数绑定

