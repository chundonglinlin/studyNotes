*****
钩子和行为
*****

钩子和行为
==========

``ThinkPHP`` 中的行为是一个比较抽象的概念，你可以把行为想象成在应用执行过程中的一个动作。在框架的执行流程中，例如路由检测是一个行为，静态缓存是一个行为，用户权限检测也是行为，大到业务逻辑，小到浏览器检测、多语言检测等等都可以当做是一个行为，甚至说你希望给你的网站用户的第一次访问弹出 Hello，world！ 这些都可以看成是一种行为，把这些行为抽离出来的目的是为了让你无需改动框架和应用，而在外围通过扩展或者配置来改变或者增加一些功能。

而不同的行为之间也具有位置共同性，比如，有些行为的作用位置都是在应用执行前，有些行为都是在模板输出之后，我们把这些行为发生作用的位置称之为钩子，当应用程序运行到这个钩子的时候，就会被拦截下来，统一执行相关的行为，类似于 ``AOP`` 编程中的 ``切面`` 的概念，给某一个钩子绑定相关行为就成了一种类 ``AOP`` 编程的思想。

一个钩子可以注册多个行为，执行到某个钩子位置后，会按照注册的顺序依次执行相关的行为。但在某些特殊的情况下，你可以设置某个钩子只能执行一次行为，又或者你可以在一个钩子的某个行为中返回 ``false`` 来强制终止后续的行为执行；一个行为可以同时注册到多个不同的钩子上，完全看应用的需求来设计。

钩子的位置必须是事先设计好的，无论是框架还是应用的，要设置一个钩子，只需要在相关的位置添加一行代码（事先需要引入 ``think\facade\Hook`` 类）：

.. code-block:: shell

    Hook::listen('钩子名称','参数','是否只有一次有效返回值');

除了钩子名称之外，其它参数都是可选的，注意5.1版本第二个参数不支持引用传值。

系统核心设计提供了一些可能会需要的钩子（位置），尽可能的方便应用的扩展而不必改动框架核心，按照执行顺序依次如下：

+---------------+---------------------+------------------------------------------+
| 钩子          | 描述                | 参数                                     |
+===============+=====================+==========================================+
| app_init      | 应用初始化标签位    | 无                                       |
+---------------+---------------------+------------------------------------------+
| app_dispatch  | 应用调度标签位      | 无                                       |
+---------------+---------------------+------------------------------------------+
| app_begin     | 应用开始标签位      | 无                                       |
+---------------+---------------------+------------------------------------------+
| module_init   | 模块初始化标签位    | 无                                       |
+---------------+---------------------+------------------------------------------+
| action_begin  | 控制器开始标签位    | 当前的callback参数                       |
+---------------+---------------------+------------------------------------------+
| view_filter   | 视图输出过滤标签位  | 当前模板渲染输出内容                     |
+---------------+---------------------+------------------------------------------+
| app_end       | 应用结束标签位      | 当前响应对象实例                         |
+---------------+---------------------+------------------------------------------+
| log_write     | 日志write方法标签位 | 当前写入的日志信息                       |
+---------------+---------------------+------------------------------------------+
| log_level     | 日志写入标签位      | 包含日志类型和日志信息的数组（V5.1.25+） |
+---------------+---------------------+------------------------------------------+
| response_send | 响应发送标签位      | 当前响应对象                             |
+---------------+---------------------+------------------------------------------+
| response_end  | 输出结束标签位      | 当前响应对象实例                         |
+---------------+---------------------+------------------------------------------+

.. note:: 其中 ``log_write`` 钩子仅在调用 ``Log::write`` 方法的时候执行。

``view_filter`` 钩子 ``v5.1.3+`` 版本中已经废除，改用视图类的 ``filter`` 方法过滤。


行为定义
========
行为类的定义很简单，一般来说只需要定义一个行为入口方法 ``run`` 即可，例如：

.. code-block:: php

	namespace app\index\behavior;

	class Test 
	{
	    public function run($params)
	    {
	        // 行为逻辑
	    }
	}

可以在行为方法中使用依赖注入，例如：

.. code-block:: php

	namespace app\index\behavior;

	use think\Request;

	class Test 
	{
	    public function run(Request $request, $params)
	    {
	        // 行为逻辑
	    }
	}

行为的入口方法名称支持自定义，如果需要更改在应用公共文件中添加下面的代码即可：

.. code-block:: php

    Hook::portal('portal');

入口方法名称就变成了 ``portal`` 。

行为类并不需要继承任何类，相对比较灵活。如果行为类需要绑定到多个钩子，可以采用如下定义：

.. code-block:: php


	namespace app\index\behavior;

	class Test 
	{
	    public function appInit($params)
	    {

	    }
	    
	    public function appEnd($params)
	    {

	    }    
	}


该行为绑定到 ``app_init`` 和 ``app_end`` 钩子后 就会调用相关的方法，方法名就是钩子名称的驼峰命名（首字母小写）。

行为绑定
========
行为定义完成后，就需要绑定到某个标签位置才能生效，否则是不会执行的。

使用 ``think\facade\Hook`` 类的 ``add`` 方法注册行为，例如：

.. code-block:: php

	// 注册 app\index\behavior\CheckLang行为类到app_init标签位
	Hook::add('app_init','app\\index\\behavior\\CheckLang'); 
	//注册 app\admin\behavior\CronRun行为类到app_init标签位
	Hook::add('app_init','app\\admin\\behavior\\CronRun');

如果要批量注册行为的话，可以使用：

.. code-block:: php

    
	Hook::add('app_init',['app\\index\\behavior\\CheckAuth','app\\index\\behavior\\CheckLang','app\\admin\\behavior\\CronRun']);


当应用运行到 ``app_init`` 标签位的时候，就会依次调用 ``app\index\behavior\CheckAuth、app\index\behavior\CheckLang和app\admin\behavior\CronRun`` 行为。如果其中一个行为中有中止代码的话则后续不会执行，如果返回 ``false`` 则当前标签位的后续行为将不会执行，但应用将继续运行。

我们也可以直接在应用目录下面或者模块的目录下面定义 ``tags.php`` 文件来统一定义行为，定义格式如下：

.. code-block:: php

	return [
	    'app_init'=> [
	        'app\\index\\behavior\\CheckAuth',
	        'app\\index\\behavior\\CheckLang'
	    ],
	    
	    'app_end'=> [
	        'app\\admin\\behavior\\CronRun'
	    ]
	]

如果应用目录下面和模块目录下面的 ``tags.php`` 都定义了 ``app_init`` 的行为绑定的话，会采用合并模式，如果希望覆盖，那么可以在模块目录下面的 ``tags.php`` 中定义如下：

.. code-block:: php

	return [
	    'app_init'=> [
	        'app\\index\\behavior\\CheckAuth',
	        '_overlay'=>true
	    ],
	    'app_end'=> [
	        'app\\admin\\behavior\\CronRun'
	    ]
	]

如果某个行为标签定义了 ``'_overlay' =>true`` 就表示覆盖之前的相同标签下面的行为定义。

闭包支持
========

可以不用定义行为直接把闭包函数绑定到某个标签位，例如：

.. code-block:: php

	Hook::add('app_init',function(){ 
	    echo 'Hello,world!';
	});

如果标签位有传入参数的话，闭包也可以支持传入参数，例如：

.. code-block:: php

	Hook::listen('action_init',$params);
	Hook::add('action_init',function($params){ 
	    var_dump($params);
	});

直接执行行为
============
如果需要，你也可以不绑定行为标签，直接调用某个行为，使用：

.. code-block:: php

	// 执行 app\index\behavior\CheckAuth行为类的run方法 并引用传入params参数
	$result = Hook::exec('app\\index\\behavior\\CheckAuth',$params);

直接执行行为的时候，执行的是 ``run`` 方法，如果需要执行行为类的其它方法，可以使用

.. code-block:: php

	// 执行 app\index\behavior\CheckAuth行为类的hello方法 并引用传入params参数
	$result = Hook::exec(['app\\index\\behavior\\CheckAuth','hello'], $params);
