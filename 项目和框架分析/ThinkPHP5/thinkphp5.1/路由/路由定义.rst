****
路由定义
****

注册路由规则
===========

.. note:: ``route`` 目录下的任何路由定义文件都是有效的，默认的路由定义文件是 ``route.php`` ，但你完全可以更改文件名，或者添加多个路由定义文件（你可以进行模块定义区分，但最终都会一起加载）。

.. code-block:: shell

	├─route                 路由定义目录
	│  ├─route.php          路由定义
	│  ├─api.php            路由定义
	│  └─...                更多路由定义

假设后面的路由定义内容我们统一在 ``route.php`` 文件里面定义，最基础的路由定义方法是：

.. code-block:: shell

    Route::rule('路由表达式','路由地址','请求类型');

除了路由表达式和路由地址是必须的外，其它参数均为可选。虽然也可以使用数组的方式定义路由，5.1版本推荐采用方法的方式定义请求类型、路由参数及变量规则。

例如注册如下路由规则：

.. code-block:: php

    // 注册路由到index模块的News控制器的read操作
	Route::rule('new/:id','index/News/read');

我们访问：

.. code-block:: shell

	http://serverName/new/5  

会自动路由到：

.. code-block:: shell

    http://serverName/index/news/read/id/5

并且原来的访问地址会自动失效。

可以在 ``rule`` 方法中指定请求类型（不指定的话默认为任何请求类型有效），例如：

.. code-block:: php

    Route::rule('new/:id','News/update','POST');

.. note:: 请求类型参数不区分大小写。

表示定义的路由规则在 ``POST`` 请求下才有效。

如果要定义 ``GET`` 和 ``POST`` 请求支持的路由规则，可以用：

.. code-block:: php

    Route::rule('new/:id','News/read','GET|POST');

不过通常我们更愿意使用对应请求类型的快捷方法，包括：

+--------+--------------+----------+
| 类型   | 描述         | 快捷方法 |
+========+==============+==========+
| GET    | GET请求      | get      |
+--------+--------------+----------+
| POST   | POST请求     | post     |
+--------+--------------+----------+
| PUT    | PUT请求      | put      |
+--------+--------------+----------+
| DELETE | DELETE请求   | delete   |
+--------+--------------+----------+
| PATCH  | PATCH请求    | patch    |
+--------+--------------+----------+
| ``*``  | 任何请求类型 | any      |
+--------+--------------+----------+

快捷注册方法的用法为：

.. code-block:: shell

	Route::快捷方法名('路由表达式','路由地址');    

使用示例如下：

.. code-block:: php

	Route::get('new/:id','News/read'); // 定义GET请求路由规则
	Route::post('new/:id','News/update'); // 定义POST请求路由规则
	Route::put('new/:id','News/update'); // 定义PUT请求路由规则
	Route::delete('new/:id','News/delete'); // 定义DELETE请求路由规则
	Route::any('new/:id','News/read'); // 所有请求都支持的路由规则

注册多个路由规则后，系统会依次遍历注册过的满足请求类型的路由规则，一旦匹配到正确的路由规则后则开始执行最终的调度方法，后续规则就不再检测。


路由规则表达式
=============

路由规则表达式统一使字符串定义，采用规则定义的方式（不支持直接使用正则表达式，但支持给某个变量定义正则，参考后面的变量规则部分）。

规则表达式
----------

规则表达式通常包含静态地址和动态地址，或者两种地址的结合，例如下面都属于有效的规则表达式：

.. code-block:: php

	Route::rule('/', 'index'); // 首页访问路由
	Route::rule('my', 'Member/myinfo'); // 静态地址路由
	Route::rule('blog/:id', 'Blog/read'); // 静态地址和动态地址结合
	Route::rule('new/:year/:month/:day', 'News/read'); // 静态地址和动态地址结合
	Route::rule(':user/:blog_id', 'Blog/read'); // 全动态地址

.. note:: 规则表达式的定义以 ``/`` 为参数分割符（无论你的 ``PATH_INFO`` 分隔符设置是什么，请确保在定义路由规则表达式的时候统一使用 ``/`` 进行 ``URL`` 参数分割，除非是使用组合变量的情况）。

每个参数中以 ``:`` 开头的参数都表示动态变量，并且会自动绑定到操作方法的对应参数。

.. note:: 你的 ``URL`` 访问 ``PATH_INFO`` 分隔符使用 ``pathinfo_depr`` 配置，但无论如何配置，都不影响路由的规则表达式的路由分隔符定义。

动态路由
--------
可以把路由规则中的变量传入路由地址中，就可以实现一个动态路由，例如：

.. code-block:: php

	// 定义动态路由
	Route::get('hello/:name', 'index/:name/hello');

``name`` 变量的值作为路由地址传入。

动态路由中的变量也支持组合变量及拼装，例如：

.. code-block:: php

	Route::get('item-<name>-<id>', 'product_:name/detail')
    ->pattern(['name' => '\w+', 'id' => '\d+']);


可选定义
--------

支持对路由参数的可选定义，例如：

.. code-block:: php

	Route::get('blog/:year/[:month]','Blog/archive'); 

变量用 ``[ ]`` 包含起来后就表示该变量是路由匹配的可选变量。

以上定义路由规则后，下面的 ``URL`` 访问地址都可以被正确的路由匹配：

.. code-block:: shell

	http://serverName/index.php/blog/2015
	http://serverName/index.php/blog/2015/12

采用可选变量定义后，之前需要定义两个或者多个路由规则才能处理的情况可以合并为一个路由规则。

.. note:: 可选参数只能放到路由规则的最后，如果在中间使用了可选参数的话，后面的变量都会变成可选参数。

完全匹配
--------
规则匹配检测的时候默认只是对 ``URL`` 从头开始匹配，只要 ``URL`` 地址包含了定义的路由规则就会匹配成功，如果希望 ``URL`` 进行完全匹配，可以在路由表达式最后使用 ``$`` 符号，例如：

.. code-block:: php

    Route::get('new/:cate$', 'News/category');

这样定义后

.. code-block:: shell

    http://serverName/index.php/new/info

会匹配成功,而

.. code-block:: shell

    http://serverName/index.php/new/info/2

则不会匹配成功。

如果是采用

.. code-block:: php

    Route::get('new/:cate', 'News/category');

方式定义的话，则两种方式的 ``URL`` 访问都可以匹配成功。

如果需要全局进行 ``URL`` 完全匹配，可以在 ``app.php`` 中设置

.. code-block:: shell

	// 开启路由完全匹配
    'route_complete_match'   => true,

额外参数
--------
在路由跳转的时候支持额外传入参数对（额外参数指的是不在 ``URL`` 里面的参数，而是通过隐式传入到需要的操作中，有时候能够起到一定的安全防护作用，后面我们会提到）。例如：

.. code-block:: php

    Route::get('blog/:id','blog/read?status=1&app_id=5');

上面的路由规则定义中额外参数的传值方式都是等效的。 ``status`` 和 ``app_id`` 参数都是 ``URL`` 里面不存在的，属于隐式传值，当然并不一定需要用到，只是在需要的时候可以使用。

路由标识
--------
如果你需要快速的根据路由生成 ``URL`` 地址，可以在定义路由的时候指定生成标识（但要确保唯一）。

例如：

.. code-block:: php

	// 注册路由到index模块的News控制器的read操作
	Route::name('new_read')->rule('new/:id','index/News/read');

生成路由地址的时候就可以使用

.. code-block:: php

    url('new_read',['id'=>10]);

如果不定义路由标识的话，使用下面的方式生成

.. code-block:: php

    url('index/News/read',['id'=>10]);

.. note:: ``V5.1.6+`` 版本开始，路由标识的用法调整，原来的用法：

.. code-block:: php

	// 注册路由到index模块的News控制器的read操作
	Route::name('new_read')->rule('new/:id','index/News/read');

需要改为：

.. code-block:: php

	// 注册路由到index模块的News控制器的read操作
	Route::rule('new/:id','index/News/read')->name('new_read');

因为后者更符合语义。





















