****
路由地址
****

实现位于 ``\think\route\Rule::dispatch`` 函数中。

路由地址
========
路由地址表示定义的路由表达式最终需要路由到的地址以及一些需要的额外参数，支持下面几种方式定义：

+---------------------------+---------------------------------------------------------------------+
| 定义方式                  | 定义格式                                                            |
+===========================+=====================================================================+
| 方式1：路由到模块/控制器  | ``[模块/控制器/操作]?额外参数1=值1&额外参数2=值2...``               |
+---------------------------+---------------------------------------------------------------------+
| 方式2：路由到重定向地址   | '外部地址'（默认301重定向） 或者 ['外部地址','重定向代码']          |
+---------------------------+---------------------------------------------------------------------+
| 方式3：路由到控制器的方法 | ``@[模块/控制器/]操作``                                             |
+---------------------------+---------------------------------------------------------------------+
| 方式4：路由到类的方法     | ``\完整的命名空间类::静态方法`` 或者 ``\完整的命名空间类@动态方法`` |
+---------------------------+---------------------------------------------------------------------+
| 方式5：路由到闭包函数     | 闭包函数定义（支持参数传入）                                        |
+---------------------------+---------------------------------------------------------------------+
| 方式6：路由到Response对象 | Response对象定义及设置                                              |
+---------------------------+---------------------------------------------------------------------+
| 方式7：路由到模板文件     | 使用view方法（V5.1.3+）                                             |
+---------------------------+---------------------------------------------------------------------+

对应 ``Rule`` 类的 ``dispatch`` 方法。

其中方式5和6我们将会在下一节闭包支持中详细描述。

路由到模块/控制器/操作
=====================
这是最常用的一种路由方式，把满足条件的路由规则路由到相关的模块、控制器和操作，然后由 ``App`` 类调度执行相关的操作。

同时会进行模块的初始化操作（包括配置读取、公共文件载入、行为定义载入、语言包载入等等）。

路由地址的格式为：

.. code-block:: shell

    [模块/控制器/]操作?参数1=值1&参数2=值2...

解析规则是从操作开始解析，然后解析控制器，最后解析模块，例如：

.. code-block:: php

	// 路由到默认或者绑定模块
	Route::get('blog/:id','blog/read');
	// 路由到index模块
	Route::get('blog/:id','index/blog/read');

Blog类定义如下：

.. code-block:: php

	<?php
	namespace app\index\controller;

	class Blog
	{
	    public function read($id)
	    {
	        return 'read:' . $id;
	    }
	}

路由地址中支持多级控制器，使用下面的方式进行设置：

.. code-block:: php

    Route::get('blog/:id','index/group.blog/read');

表示路由到下面的控制器类，

.. code-block:: shell

    index/controller/group/Blog

Blog类定义如下：

.. code-block:: php

	<?php
	namespace app\index\controller\group;

	class Blog
	{
	    public function read($id)
	    {
	        return 'read:' . $id;
	    }
	}

还可以支持路由到动态的模块、控制器或者操作，例如：

.. code-block:: php

	// action变量的值作为操作方法传入
	Route::get(':action/blog/:id', 'index/blog/:action');
	// 变量传入index模块的控制器和操作方法
	Route::get(':c/:a', 'index/:c/:a');

额外参数
--------
在这种方式路由跳转的时候支持额外传入参数对（额外参数指的是不在 ``URL`` 里面的参数，隐式传入需要的操作中，有时候能够起到一定的安全防护作用，后面我们会提到）。例如：

.. code-block:: php

    Route::get('blog/:id','blog/read?status=1&app_id=5');

上面的路由规则定义中额外参数 ``status`` 和 ``app_id`` 参数都是 ``URL`` 里面不存在的，属于隐式传值，当然并不一定需要用到，只是在需要的时候可以使用。


路由到操作方法
=============
路由地址的格式为：

.. code-block:: shell

   @[模块/控制器/]操作 

这种方式看起来似乎和第一种是一样的，本质的区别是直接执行某个控制器类的方法，而不需要去解析 ``模块/控制器/操作`` 这些，同时也不会去初始化模块（因此不会调用模块的初始化方法）。

例如，定义如下路由后：

.. code-block:: php

    Route::get('blog/:id','@index/blog/read');

相当于直接调用 ``\app\index\controller\blog`` 类的 ``read`` 方法。

Blog类定义如下：

.. code-block:: php

	<?php
	namespace app\index\controller;

	class Blog
	{
	    public function read($id)
	    {
	        return 'read:' . $id;
	    }
	}

.. note:: 通常这种方式下面，由于没有定义当前模块名、当前控制器名和当前方法名 ，从而导致视图的默认模板规则失效，所以这种情况下面，如果使用了视图模板渲染，则必须传入明确的参数而不是留空。


路由到类的方法
=============
路由地址的格式为（动态方法）：

.. code-block:: shell

    \类的命名空间\类名@方法名

或者（静态方法）:

.. code-block:: shell

    \类的命名空间\类名::方法名

这种方式更进一步，可以支持执行任何类的方法，而不仅仅是执行控制器的操作方法，例如：

.. code-block:: php

    Route::get('blog/:id','\app\index\service\Blog@read');

执行的是 ``\app\index\service\Blog`` 类的 ``read`` 方法。

也支持执行某个静态方法，例如：

.. code-block:: php

    Route::get('blog/:id','\app\index\service\Blog::read');

支持传入额外的参数作为方法的参数调用（用于参数绑定），例如：

.. code-block:: php

    Route::get('blog/:id','\app\index\service\Blog::read?status=1');


路由到重定向地址
===============
重定向的外部地址必须以 ``/`` (重定向到应用内部)或者 ``http`` (重定向到应用外部)开头的地址。

如果路由地址以 ``/`` 或者 ``http`` 开头则会认为是一个重定向地址或者外部地址，例如：

.. code-block:: php

    Route::get('blog/:id','/blog/read/id/:id');

和

.. code-block:: php

    Route::get('blog/:id','blog/read');

虽然都是路由到同一个地址，但是前者采用的是 ``301`` 重定向的方式路由跳转，这种方式的好处是 ``URL`` 可以比较随意（包括可以在 ``URL`` 里面传入更多的非标准格式的参数），而后者只是支持模块和操作地址。举个例子，如果我们希望 ``avatar/123`` 重定向到 ``/member/avatar/id/123_small`` 的话，只能使用：

.. code-block:: php

    Route::get('avatar/:id','/member/avatar/id/:id_small');

路由地址采用重定向地址的话，如果要引用动态变量，直接使用动态变量即可。

采用重定向到外部地址通常对网站改版后的 ``URL`` 迁移过程非常有用，例如：

.. code-block:: php

    Route::get('blog/:id','http://blog.thinkphp.cn/read/:id');

表示当前网站（可能是 ``http://thinkphp.cn`` ）的 ``blog/123`` 地址会直接重定向到 ``http://blog.thinkphp.cn/read/123`` 。

路由重定向默认使用 ``301`` 状态码，可以使用 ``status`` 方法单独设置，例如：

.. code-block:: php

    Route::get('blog/:id','http://blog.thinkphp.cn/read/:id')->status(302);

``V5.1.3+`` 版本开始，可以直接使用 ``redirect`` 方法注册一个重定向路由

.. code-block:: php

    Route::redirect('blog/:id','http://blog.thinkphp.cn/read/:id',302);
    // 当使用redirect方法时，就不需要路由地址前面的斜杠或者http://
    Route::redirect('avatar/:id','member/avatar/id/:id_small');

路由到模板（V5.1.3）
==================
``V5.1.3+`` 版本开始，支持路由直接渲染模板输出。

.. code-block:: php

    Route::view('hello/:name','index@hello');

表示该路由会渲染 ``index`` 模块下面的 ``view/hello.html`` 模板文件输出。

模板文件中可以直接输出当前请求的 ``param`` 变量，如果需要增加额外的模板变量，可以使用：

.. code-block:: php

	Route::view('hello/:name','index@hello',['city'=>'shanghai']);

在模板中可以输出 ``name`` 和 ``city`` 两个变量。

.. code-block:: shell

    Hello,{$name}--{$city}！


