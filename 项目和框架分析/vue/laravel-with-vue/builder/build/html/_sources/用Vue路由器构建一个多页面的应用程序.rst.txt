*******************
用Vue路由器构建一个多页面的应用程序
*******************

.. contents:: 目录
   :depth: 4

在上一章中，我们了解了 ``Vue.js`` 组件，并将 ``Vuebnb`` 转换为基于组件的体系结构。 现在我们已经完成了这个工作，我们可以使用 ``Vue Router`` 轻松地将新页面添加到我们的应用程序中。

在本章中，我们将为 ``Vuebnb`` 创建一个主页，其中包括一个可点击缩略图库，展示全套模拟列表。

本章涵盖的主题：

- 解释什么是路由器库，以及它们为什么是单页应用程序的关键部分；
- ``Vue`` 路由器及其主要特性概述；
- ``Vue Router`` 的安装和基本配置；
- 使用 ``RouterLink`` 和 ``RouterView`` 特殊组件来管理页面导航；
- 在 ``Vue`` 中使用 ``AJAX`` 可以在不刷新页面的情况下从 ``Web`` 服务中检索数据；
- 在加载新页面之前使用路由导航警卫来检索数据；


单页面应用
==========
大多数网站都被分成多个网页，以便使他们所包含的信息更易于使用。传统上，这是通过服务器/客户端模型完成的，其中每个页面必须使用不同的 ``URL`` 从服务器加载。要导航到新页面，浏览器必须向该页面的 ``URL`` 发送请求。服务器将发回数据，浏览器可以卸载现有页面并加载新页面。对于普通的互联网连接，这个过程可能需要几秒钟的时间，在此期间用户必须等待新页面加载。

通过使用强大的前端框架和 ``AJAX`` 工具，可以使用不同的模型：浏览器可以加载初始网页，但导航到新页面不需要浏览器卸载页面并加载新页面。相反，新页面所需的任何数据都可以使用 ``AJAX`` 异步加载。从用户的角度来看，这样一个网站看起来像其他网页一样，但从技术角度来看，这个网站实际上只有一个页面。因此，名称，单页面应用程序（SPA）。

单页应用程序体系结构的优点是可以为用户创建更加无缝的体验。新页面的数据仍然需要检索，并且因此会对用户的流程造成一些小的中断，但是由于数据检索可以异步完成并且 ``JavaScript`` 可以继续运行，所以这种中断被最小化了。而且，由于 ``SPA`` 页面由于重新使用某些页面元素而通常需要较少的数据，因此页面加载更快。

``SPA`` 体系结构的缺点是，由于增加了功能，它使得客户端应用程序变得笨重，因此用户必须在第一次加载页面时下载大型应用程序，否则加速页面更改的收益可能会被抵消。此外，处理路由会增加应用程序的复杂性，因为必须管理多个状态，必须处理 ``URL`` 以及必须在应用程序中重新创建大量浏览器默认功能。

路由器
======
如果您打算使用 ``SPA`` 架构，并且您的应用设计包含多个页面，则需要使用路由器。在这种情况下，路由器是一个库，它将通过 ``JavaScript`` 和各种本机 ``API`` 模拟浏览器导航，以便用户获得类似于传统多页应用的体验。 路由器通常会包含以下功能：

- 处理页面内的导航操作
- 将应用程序的部分与路由匹配
- 管理地址栏
- 管理浏览器历史记录
- 管理滚动条行为

Vue路由器
=========
一些前端框架（如 ``Angular`` 或 ``Ember`` ）包括一个开箱即用的路由器库。 指导这些框架的理念是开发人员可以更好地为他们的 ``SPA`` 提供完整的集成解决方案。

其他框架/库，如 ``React`` 和 ``Vue.js`` ，不包括路由器。 相反，你必须安装一个单独的库。

在 ``Vue.js`` 的情况下，可以使用称为 ``Vue`` 路由器的官方路由器库。该库由 ``Vue.js`` 核心团队开发，因此针对 ``Vue.js`` 的使用进行了优化，充分利用了基本的 ``Vue`` 特性，如组件和反应性。

使用 ``Vue`` 路由器，应用程序的不同页面由不同的组件表示。 当你设置 ``Vue`` 路由器时，你会通过配置告诉它哪个 ``URL`` 映射到哪个组件。 然后，当在应用程序中点击链接时， ``Vue`` 路由器将切换活动组件以匹配新的 ``URL`` ，例如：

.. code-block:: js

    let routes = [
      { path: '/', component: HomePage },
      { path: '/about', component: AboutPage },
      { path: '/contact', component: ContactPage }
    ];

由于在一般情况下渲染组件几乎是一个瞬间过程，因此使用 ``Vue Router`` 进行页面之间的转换也是如此。 但是，如果您的不同页面需要加载数据，则可以调用异步挂钩以使您有机会从服务器加载新数据。

具体的组件
----------
当您安装 ``Vue`` 路由器时，将在您的应用中全局注册两个组件： ``RouterLink`` 和 ``RouterView`` 。

通常使用 ``RouterLink`` 代替 ``a`` 标签，并让您的链路访问 ``Vue Router`` 的特殊功能。

如上所述， ``Vue`` 路由器将切换指定的页面组件作为模仿浏览器导航的方式。 `` RouterView`` 是发生此组件切换的出口。 就像插槽一样，您可以将它放在主页面模板的某个位置。 例如：

.. code-block:: html

    <div id="app">
      <header></header>
      <router-view>
        // This is where different page components display
      </router-view>
      <footer></footer>
    </div>

Vuebnb路由
==========
``Vuebnb`` 从未成为单页应用程序的既定目标。 事实上， ``Vuebnb`` 将会偏离纯粹的 ``SPA`` 架构，我们将在本书后面看到。

也就是说，整合 ``Vue`` 路由器对于用户在应用中导航的体验非常有益，因此我们将在本章中将其添加到 ``Vuebnb`` 。

当然，如果我们要添加路由器，我们将需要一些额外的页面！到目前为止，在该项目中，我们一直在研究 ``Vuebnb`` 的列表页面，但尚未开始在应用的首页上工作。因此，除了安装 ``Vue`` 路由器之外，我们还将开始 ``Vuebnb`` 主页的工作，该主页会显示缩略图和指向我们所有模拟列表的链接：

.. figure:: ./images/7-1.png

   图7.1 Vuebnb前端页面

安装Vue路由器
=============
``Vue Router`` 是一个 ``NPM`` 软件包，可以在命令行上安装：

.. code-block:: shell

    $  npm i --save-dev vue-router

创建路由配置文件 ``router.js``

.. code-block:: shell

    $ touch resources/assets/js/router.js

要将 ``Vue Router`` 添加到我们的项目中，我们必须导入该库，然后使用 ``Vue.use``  API方法使 ``Vue`` 与 ``Vue Router`` 兼容。这将给 ``Vue`` 一个新的配置属性， ``router`` ，我们可以用它来连接一个新的路由器。

然后我们用新的 ``VueRouter()`` 创建一个 ``Vue`` 路由器的实例。

resources/assets/js/router.js:

.. code-block:: js

    import Vue from 'vue';
    import VueRouter from 'vue-router';
    Vue.use(VueRouter);

    export default new VueRouter();

通过从这个新文件中导出我们的路由器实例，我们已经将它创建为一个可以在 ``app.js`` 中导入的模块。 如果我们命名导入的模块为 ``router`` ，则可以使用对象解构来简洁地将其连接到我们的主配置对象。

resources/assets/js/app.js:

.. code-block:: js

    import "core-js/fn/object/assign";
    import Vue from 'vue';

    import ListingPage from '../components/ListingPage.vue';
    import router from './router'

    var app = new Vue({
      el: '#app',
      render: h => h(ListingPage),
      router
    });

创建路由
========
``Vue Router`` 的最基本配置是提供一个 ``routes`` 数组，它将 ``URL`` 映射到相应的页面组件。该数组将包含具有至少两个属性的对象： ``path`` 和 ``component`` 。

.. note:: 请注意，通过页面组件，我只是指用来在我们的应用中表示页面的任何组件。 它们是任何形式的常规组件。

现在，我们只会在我们的应用中使用两条路由，一条用于我们的主页，另一条用于我们的列表页面。 ``HomePage`` 组件尚不存在，因此我们将保留其路由注释，直到我们创建它。

resources/assets/js/router.js:

.. code-block:: js

    import ListingPage from '../components/ListingPage.vue';

    export default new VueRouter({
      mode: 'history',
      routes: [
        // { path: '/', component: HomePage }, // doesn't exist yet!
        { path: '/listing/:listing', component: ListingPage }
      ]
    });

您会注意到我们的 ``ListingPage`` 组件的路径包含一个动态细分 ``:listing`` ，以便此路由将匹配路径，包括 ``/listing/1`` ， ``listing/2 ... listing/whatever`` 。

.. note::  ``Vue`` 路由器有两种模式：哈希模式和历史模式。 哈希模式使用 ``URL`` 哈希模拟完整的 ``URL`` ，以便在哈希更改时不会重新加载页面。 历史记录模式具有真实 ``URL`` ，并利用 ``history.pushState`` API更改 ``URL`` 而不会导致页面重新加载。 历史模式唯一的缺点是应用程序外部的 ``URL`` （例如 ``/some/weird/path`` ）不能由 ``Vue`` 处理，必须由服务器处理。 这对我们来说没有问题，所以我们将使用 ``Vuebnb`` 的历史记录模式。

App组件
=======


Home页面
=========


Home路由
========

初始状态
--------

重构
^^^^^

主页初始状态
^^^^^^^^^^^^

增加缩略图
^^^^^^^^^^


在客户端接收
^^^^^^^^^^^^


ListingSummary组件
==================

app内导航
=========

给模型增加一个路径
------------------

路由导航卫士
------------

next
^^^^^

主页组件
--------

主页API
-------


Axios
-----


Mixins
------

将解决方案移至mixin
--------------------


assignData
^^^^^^^^^^

链接到列表页面
--------------


滚动行为
========


添加页脚
========

路由对象
--------

动态选择容器类
--------------


列出摘要图像滑块
================

增加滑块
--------

过渡
----

轮播控制
--------

结束触发
--------


总结
====








