*******
数字证书的原理
*******

互联网的安全性在很大程度上依赖于对证书颁发机构(CA)的信任， CA 颁发数字证书以供 Web 服务器用于识别自己和加密服务器及用户之间的流量。这些证书可以防止攻击者伪造网站或者窃听发送到和发送自网站的通信。

名词解释
=======
首先解释一下上面的几个名词：

- ``https`` ：在 ``http`` (超文本传输协议)基础上提出的一种安全的 ``http`` 协议，因此可以称为安全的超文本传输协议。 ``http`` 协议直接放置在 ``TCP`` 协议之上，而 ``https`` 提出在 ``http`` 和 ``TCP`` 中间加上一层加密层。从发送端看，这一层负责把 ``http`` 的内容加密后送到下层的 ``TCP`` ，从接收方看，这一层负责将 ``TCP`` 送来的数据解密还原成 ``http`` 的内容。
- ``SSL(Secure Socket Layer)`` ：是 ``Netscape`` 公司设计的主要用于 ``WEB`` 的安全传输协议。从名字就可以看出它在 ``https`` 协议栈中负责实现上面提到的加密层。
- 数字证书：一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性。其中包含的信息，用于实现上述功能。
- 加密和认证：加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算他获得密文也无能为力；认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的骗子，采取的确认身份的方式。只有同时进行了加密和认真才能保证通信的安全，因此在 ``SSL`` 通信协议中这两者都被应。

因此，这三者的关系已经十分清楚了： ``https`` 依赖一种实现方式，目前通用的是 ``SSL`` ，数字证书是支持这种安全通信的文件。另外有 ``SSL`` 衍生出 ``TLS`` 和 ``WTLS`` ，前者是 ``IEFT`` 将 ``SSL`` 标准化之后产生的（ ``TSL1.0`` ），与 ``SSL`` 差别很小，后者是用于无线环境下的 ``TSL`` 。

如何加密
=======
常用的加密算法
-------------

- 对称密码算法：是指加密和解密使用相同的密钥，典型的有 ``DES`` 、 ``RC5`` 、 ``IDEA`` （分组加密）， ``RC4`` （序列加密）；
- 非对称密码算法：又称为公钥加密算法，是指加密和解密使用不同的密钥（公开的公钥用于加密，私有的私钥用于解密）。比如A发送，B接收，A想确保消息只有B看到，需要B生成一对公私钥，并拿到B的公钥。于是A用这个公钥加密消息，B收到密文后用自己的与之匹配的私钥解密即可。反过来也可以用私钥加密公钥解密。也就是说对于给定的公钥有且只有与之匹配的私钥可以解密，对于给定的私钥，有且只有与之匹配的公钥可以解密。典型的算法有 ``RSA`` ， ``DSA`` ， ``DH`` ；
- 散列算法：散列变换是指把文件内容通过某种公开的算法，变成固定长度的值（散列值），这个过程可以使用密钥也可以不使用。这种散列变换是不可逆的，也就是说不能从散列值变成原文。因此，散列变换通常用于验证原文是否被篡改。典型的算法有： ``MD5`` ， ``SHA`` ， ``Base64`` ， ``CRC`` 等。

证书的组成
==========
首先，有一个权威的证书签发机构，称为 ``CA`` ——全球就那么几个公司比较权威啦，这个机构，先用 ``RSA`` 产生一对公私钥。私钥自己留着藏起来，你要是能偷到手就厉害了。然后用自己的私钥对自己的公钥进行签名，生成所谓的数字证书。这个过程大概是这样的：

先生成一个文件，文件内容大概是这样的：

- 公钥内容；
- 签发者ID—-谁签发的证书，证书的签发机构；
- Subject—-这个证书是发布给谁的，或者说证书的所有者，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等。
- 证书的有效期；
- 签名所使用的算法；就是指的这个数字证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的证书里面的公钥，根据这个算法对指纹进行解密。
- 指纹以及指纹算法；这个是用来保证证书的完整性的，也就是说确保证书没有被修改过，其原理就是在发布证书时，发布者根据指纹算法(一个hash算法)计算整个证书的hash值(指纹)并和证书放在一起，使用者在打开证书时，自己也根据指纹算法计算一下证书的hash值(指纹)，如果和刚开始的值对得上，就说明证书没有被修改过，因为证书的内容被修改后，根据证书的内容计算的出的hash值(指纹)是会变化的。 注意，这个指纹会使用"SecureTrust CA"这个证书机构的私钥用签名算法(Signature algorithm)加密后和证书放在一起。


.. note:: 注意，为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会加密后再和证书放到一起发布，以防有人修改指纹后伪造相应的数字证书。这里问题又来了，证书的指纹和指纹算法用什么加密呢？他们是用证书发布机构的私钥进行加密的。可以用证书发布机构的公钥对指纹和指纹算法解密，也就是说证书发布机构除了给别人发布证书外，他自己本身也有自己的证书。证书发布机构的证书是哪里来的呢？？？这个证书发布机构的数字证书(一般由他自己生成)在我们的操作系统刚安装好时(例如windows xp等操作系统)，这些证书发布机构的数字证书就已经被微软(或者其它操作系统的开发机构)安装在操作系统中了，微软等公司会根据一些权威安全机构的评估选取一些信誉很好并且通过一定的安全认证的证书发布机构，把这些证书发布机构的证书默认就安装在操作系统里面了，并且设置为操作系统信任的数字证书。这些证书发布机构自己持有与他自己的数字证书对应的私钥，他会用这个私钥加密所有他发布的证书的指纹作为数字签名。


以上内容都是明文。我们称为内容 ``P`` 。然后使用 ``hash`` 算法，对内容 ``P`` 进行 ``hash`` 计算，得到一个 ``hash`` 值 ``H`` 。然后使用签发机构的私钥对 ``H`` 进行 ``RSA`` 加密，得到签名信息 ``S`` 。这个步骤称为签名，就是用私钥对某公开内容的 ``hash`` 值进行加密。

然后将 ``P`` ， ``S`` 连成一个文件，这个文件就是所谓的数字证书了。所以数字证书里，包括证书持有者的身份信息，证书信息，证书持有人的公钥，以及签名信息。


证书的验证
=========
现在假设某人得到了这个证书，如何确认这个证书属于谁的呢？我们看数字证书里有些什么？可以得到 ``P`` ，可以得到 ``S`` 。我们用同样的 ``hash`` 算法对 ``P`` 进行 ``hash`` 计数，得到一个 ``hash`` 值 ``H1`` 。

``P`` 里有公钥，签发者ID，证书的所有者 ，有效期，及其他信息。我们用公钥解密 ``S`` ，得到了一个值 ``H'`` 。这个 ``H'`` 就是制作数字证书的时候，用私钥对 ``S`` 加密的 ``H`` 。

现在对比 ``H'`` 和 ``H1`` 是否相等，如果相等，那么就证明这个证书是有签发者签发给证书的所有者的证书。否则就说明：1.内容 ``P`` 被篡改过，或者2.证书不是由 ``CA`` 签发的。

这个是对自签发证书的验证过程。需要说明的是，这种自签发证书的验证不常使用，但如何验证证书的原理类似。