*******
p2p协议规范
*******

摘要

在这份文档中，我们提供了一份关于点对点（P2P)系统的调查报告。这份调查包括一个 ``P2P`` 系统的定义和几种不同的 ``P2P`` 系统分类。这份调查还描述了何种应用可以用 ``P2P`` 技术来实现以及几个正在使用中的 ``P2P`` 互联网应用。最后，这份调查讨论了各种结构之间的利弊权衡并提供一份判断 ``P2P`` 结构是否适用于一种应用的指南。

这份备忘录的状态

这份备忘录仅仅为互联网社区提供了一些信息，并非一种特定的互联网标准。您可以随意分发这份备忘录。

版权

Copyright (c) 2009 IETF 信任者和这篇文档的署名作者。版权归以上所有。


介绍
====

``P2P``  (点对点) 系统在最近几年很受关注。大量的科技出版物涉及 ``P2P`` 系统的各个方面，一些明确讨论 ``P2P`` 网络的科技会议陆续召开，互联网工程工作小组（IETF）也设立了专门的 ``P2P`` 研究小组。现在正在使用中的互联网商业和非商业应用中也有很多是按照 P2P 的规则来构建的。这其中有一些是现今非常流行的互联网应用。

然而，至今为止，那些设计系统或者开发协议详细规格的工程师们对 ``P2P`` 系统的理解仍然因人而异。另一个令人担忧的事实是，很多电信业和数据通信业的从业人员相信 ``P2P`` 就是
非法活动（诸如非法利用互联网交换文件和 ``P2P`` 僵尸网络）的同义词。

所以写这份文档的目的有三个：首先，讨论用 ``P2P`` 架构或其他系统架构（如 ``C/S`` ）实现一个应用之间的利弊关系；其次，让工程师们对 ``P2P`` 系统有一个宏观上的认识，使他们了解 ``P2P`` 系统能够提供的特性，以及什么样的应用可以用 ``P2P`` 技术来实现，这些知识帮助他们理解 ``P2P`` 架构和其他架构之间的区别，从而决定是否使用 ``P2P`` 技术来实现他们的应用；最后，文档通篇提供了几个使用 ``P2P`` 系统实现的完全合法的应用以证明 ``P2P`` 技术事实上也可以用了构建合法的应用。


P2P系统定义
===========

要讨论 ``P2P`` 系统，首先要有一个可以使用的 ``P2P`` 定义。在这一节，我们将定义什么是 ``P2P`` 系统。本文档中所有的讨论都将遵守这个定义。除了 ``P2P`` 系统的例子，本文还提供了一些严格来说不是 ``P2P`` 系统的例子，他们并非完全符合 ``P2P`` 定义的系统。因此，本文的讨论可能只在某些方面适用于这些系统。之所以提到这些系统是想强调 ``P2P`` 系统和集中式系统并非没有交点的两种系统，事实上有很多系统都是处于这两种系统之间的系统。

``P2P`` 这个术语在文中出现的地方非常多，有些时候它们之间的意思是有些差异的。在不同的科技文献中，这个词的定义也不是完全一样的。如果在算上其他材料（例如市场调查资料）中的定义，这个术语意思就多了。

实际上 ``P2P`` 模型和其他相反的模型（如 ``C/S`` 模型 【Milojicic2002】 ）并没有明显的界限。非常极端的情况下，有些系统是纯 ``P2P`` 架构，而有些系统则是纯 ``C/S`` 架构。但是根据不同的 ``P2P`` 定义，也有一些系统可以被认为是两者之一，或者两者的混合体。所以，理解哪些是所有不同 ``P2P`` 定义中的共性,哪些是作者自己添加的特征是非常重要的。

当构成系统的部分共享他们的资源来共同提供系统被设计提供的服务，并且组成系统的部分
不仅为系统的其它部分提供服务还从系统的其他部分请求服务时，我们认为这个系统是
``P2P`` 系统。

原则上，只有组成系统的所有部分都符合上面的定义时，这个系统才是 ``P2P`` 系统。而实际上，存在例外情况（例如有些节点不满足上述定义）的系统仍然被认为是 ``P2P`` 系统。例如,一个包含中心注册服务器的系统仍然可以认为是一个 ``P2P`` 系统。另外，也有一些系统把节点中的 ``peers`` 和 ``clients`` 区分开， ``peers`` 提供服务的同时也向其他 ``peers`` 请求服务，而 ``clients`` 通常只请求服务。如果一个系统中的大部分节点都是 ``clients`` 的话，这个系统严格意义上是不能称为 ``P2P`` 系统的。

虽然大部分的定义都没有明确规定，但是很多定义中都隐含了一个 ``P2P`` 必备的特性——系统中的节点都需要传输系统提供服务的数据，而这些数据可能并非节点所需要的。

有些作者认为组成系统的部分，也就是 ``peers`` ，应该能够不经过中介直接相互通信
【Schollmeier2001】。还有一些作者认为系统应该具有自组织和分布式管理功能
【Roussopulus2004】。

需要注意的是，前面的定义有一个前提——系统只提供一种独立的服务。而一种复杂的服务可
能由几种独立的服务组合在一起。这些独立的服务可能是 ``P2P`` 服务，也有可能是 ``C/S``
服务。例如，一个文件分享客户端可能包括一个实现文件分享服务 ``P2P`` 客户端和一个用来
访问附加信息的浏览器功能。另外，有的系统架构使用 ``C/S`` 系统作为提供服务的 ``P2P`` 系统
的回退系统，或者相反。

一种服务通常包含数据处理和数据存储。根据我们的定义， ``P2P`` 系统中的 ``peers`` 共享它们
的处理能力和储存能力（也就是它们的软硬件资源）来提供系统的服务。例如，系统要提供
文件的分布式存储服务，文件就会被存储到系统中不同的 ``peers`` 中。当系统中的一个
``peer`` 想要获取某个特定的文件时，它首先要找到存储这个文件的 ``peer`` 或者 ``peers`` 然后再
从这些 ``peers`` 获取这个文件。

有了 ``P2P`` 系统的定义，我们就能判断一个系统是不是 ``P2P`` 系统。下面我们就利用 ``P2P`` 系
统的定义来判断 ``DNS`` ， ``SIP`` ， ``P2PSIP`` 和 ``BitTorrent`` 是不是 ``P2P`` 系统。


DNS 是不是 P2P 系统
------------------
``DNS`` 是一个分层的分布式系统，它有时被认为是一种分层的 ``C/S`` 系统，有时被认为是 ``P2P``
系统【Milojicic2002】。根据我们的定义， ``DNS`` 不是一个 ``P2P`` 系统。因为 ``DNS`` 系统中的
地址解析器只请求服务而不提供服务，而根据我们的定义， ``P2P`` 系统的组成部分必须同时扮
演服务请求者和提供者的角色。

SIP 是不是 P2P 系统
-------------------
SIP `[RFC3261] <https://tools.ietf.org/html/rfc3261>`_ 是一种可以让一个用户定位一个远端的用户并与之建立通信会话的集中式协
议。当远端用户被定位后，在所有的 ``SIP`` 系统中，直接连接两者的会话就会建立起来。用
户汇合功能可以用传统的 ``SIP`` 方式和 ``P2P`` 方式两种不同的方式实现。这一节讨论前一种实
现，下一节讨论后一种实现。

在传统 ``SIP`` 协议中，通常一个中心服务器负责一个域名。同一域下的用户代理在服务器上注
册。当一个用户代理想和一个在同一域下的远端用户代理通信时，它首先向服务器请求这个
远端用户代理的通讯信息。随后，在没有服务器参与的情况下，两者之间的会话就会直接建
立起来。

不同域间的通信由服务器联合实现。每个域的服务器组成一个可以相互通信的集合，当一个
用户代理想和不在同一域中的远程用户代理通信时，它可以向所在的域服务器发出请求，再
由本地域服务器接着想远程用户所在的域服务器发出请求。

``SIP`` 中的用户代理既是服务器也是客户端。一个用户代理可以在一次的通信中作为服务器，
在下一次通信中作为客户端。但是传统 ``SIP`` 系统并不能因此被当做 ``P2P`` 系统，因为用户代
理只有在对自己有利的情况下共享自己的资源。也就是说，一个用户代理只会参加涉及到自
身需要的数据传输中。例如，任何一个用户代理只会为含有自己的 ``SIP`` 会话邀请传输数据。
而在 ``P2P`` 系统中，每一个节点都需要为其他节点传输数据，即每一个节点都要为对自身没有
直接好处的服务传输数据。

P2PSIP 是不是 P2P 系统
----------------------

除了用上面的方式外， ``SIP`` 还可以使用 ``P2PSIP`` (开发这项技术的的 IETF 工作组的名字也叫
P2PSIP ) 实现。在 ``P2PSIP`` 中，用户代理不是在中心服务器注册自己的通信信息，而是把他
们注册在由系统中用户代理形成的网络层。这种方式，当一个用户代理想和远程用户代理通讯时，用户代理询问该网络层，它会返回远程用户代理的通信信息。通常，会话直接在两个用户代理之间建立。 ``P2PSIP`` 是一个 ``P2P`` 系统，因为节点通过存储和自己不相关的数据来共享资源(如， 不同用户代理的通信信息)且参与到与节点本身不直接相关的服务传输数据(如， 两个远程连接的建立)。

在 BitTorrent 中应用 P2P 系统
-----------------------------

``BitTorrent`` 是用于分发文件的协议。该参与特定文件分发的端点组被称为 ``swarm`` (群)。该文件分为几个片段。一个对文件感兴趣的端点需要下载所有的来自 ``swarm`` (群)中其他端点的文件片段。端点下载文件的各个片段还会将自己已有的片段上传到 ``swarm`` (群)中其它端点。下载的端点（因为它还没有完整的文件）上传片段称为 ``leecher`` (吸血者，注意这个定义是有悖常理的，因为，在其他情况下，一个 ``leecher`` 通常意味着某人只获取不付出)。当一个端点拥有整个文件时（即它拥有全部文件片段），它不再需要任何下载任何片段。因此，它只将片段上传到其他端点。这样端点称为 ``seeder`` (播种器)。

``BitTorrent`` 系统是 ``P2P`` 系统，因为端点请求服务从其他端点（即从其他端点下载片段）和为其他端点提供服务（即，将片段上传到其他端点）。但请注意，大部分的端点一开始就具有完整文件的基础结构节点的特定群体，因为一直作为播种者而不能严格认为是 ``P2P`` 系统，因为大多数端点只会提供服务，而不是要求下载。

P2P系统中的功能
==============
``P2P`` 系统包括几个功能。以下功能是 ``P2P`` 系统提供的独立服务。他们处理对等体如何连接到系统：

- 注册功能：加入 ``P2P`` 系统的节点需要获取加入系统的有效凭据。注册功能处理节点认证和授权；
- ``peer`` 发现功能：为了加入 ``P2P`` 系统（即，成为 ``peer`` ），节点需要与一个或者更多已经是系统一部分的 ``peer`` 建立连接。 为了连接 ``peer`` ， ``peer`` 发现功能允许节点发现系统中的 ``peer`` 。

上述功能在一些 ``P2P`` 系统中以集中方式提供（例如，通过中央注册服务器和中央 ``peer`` 发现服务器，有时也称为引导服务器）。

``P2P`` 系统的分类法将在第4节中讨论，在对 ``P2P`` 系统进行分类时不考虑这些功能。 相反，他们根据如何实现以下功能集来对 ``P2P`` 系统进行分类。

以下功能取决于 ``P2P`` 系统提供的服务。也就是说，并非所有 ``P2P`` 系统都实现所有功能。对于例如，仅用于存储数据的 ``P2P`` 系统可能无法实现计算功能。在另一示例中，仅使用 ``P2P`` 系统用于计算可能无法实现数据存储功能。同样的，其中一些功能在某些 ``P2P`` 系统中以集中方式实现。

- 数据索引功能：它处理存储在系统中的数据索引。
- 数据存储功能：它处理存储和检索来自系统的数据。
- 计算功能：它处理由计算机执行的系统计算。除其他外，这种计算可能与数据处理或实时媒体处理相关。
- 消息传输功能：它处理 ``peer`` 之间消息交换。根据此功能的实现方式， ``peer`` 可以通过中央服务器，直接在 peer 之间，或通过提供叠加的 ``peer`` 路由层交换协议消息。

根据提供的服务，上面某些功能是不需要的。第5小节讨论P2P不同类型应用，这些应用实现不同的服务。

P2P系统的分类
=============
分类法将元素分类成组，以便可以对它们进行更容易的研究。学习类似元素的人可以专注于共同问题集。分类法也提供了通用的术语，在给定分类中讨论与个别元素和元素组相关的问题时很有用。在本节中，我们为 ``P2P`` 系统提供一些分类，以方便他们研究并提出这样一个共同的术语。

鉴于不同的作者似乎无法就 ``P2P`` 的单一通用定义达成一致，因此 ``P2P`` 系统的许多不同分类法的事实就不应该让人感到意外。 虽然根据不同的特征对 ``P2P`` 系统进行分类是正常的，但是不同的作者使用相同的术语来表示不同的事物（例如，第一代和第二代 ``P2P`` 系统对于不同的作者意味着不同的事物）这一事实有时会使读者感到困惑。

可以说， ``P2P`` 系统最有用的分类是怎样实现数据的索引方式。也就是说，数据索引如何功能实现。 ``P2P`` 索引可以是集中的，本地的，也可以是分布式的 。使用集中索引，中央服务器保持对所有 ``peer`` 中的数据的引用。使用本地索引每个 ``peer`` 只保留对自己数据的引用。使用分布式索引，对数据的引用驻留在多个节点上。 ``Napster`` ，早期 ``Gnutella`` 的版本（最高版本为0.4）和 ``Distributed Hash Table`` 基于（DHT）的系统分别是集中式，本地式和分布式索引。

索引也可以分为语义和无语义。一个语义索引可以捕获文档和元数据之间关系而无语义索引则不能。虽然语义索引允许更丰富的搜索，但它们有时（取决于在他们的实现上）也找不到数据(即使它实际上在系统中)。

一些作者根据不集中的等级对 ``P2P`` 系统进行分类。混合 ``P2P`` 系统需要一个中央实体来提供他们的服务而纯 ``P2P`` 系统即使任何单个 ``peer`` 从系统中删除也可以继续提供服务。根据这个定义， ``P2P`` 系统具有集中索引是混合 ``P2P`` 系统，而系统是本地和分布式的索引是纯 ``P2P`` 系统。

不过，有些作者将纯 P2P 系统根据他们展示的结构进行分类。在非结构化系统中，对等体加入系统通过将自己连接到任何其他现有的 ``peers`` 。在结构化系统， ``peer`` 通过逻辑标识符把自己连接到明确定义的对等体来加入。该早期非结构化系统之间的区别（例如，早期版本 Gnutella ），它使用了本地索引并且根本没有结构，使用的结构化系统（例如，基于DHT的系统）分布式索引并具有明确的结构，是非常清楚的。然而，非结构化系统已经发展并且现在显示出来了某种程度的结构（例如，一些系统具有特殊节点具有更多功能）并使用分布式索引。因此，非结构化和结构化之间的边界有点模糊。

一些作者提到了不同代的 ``P2P`` 系统。对于一些人来说，第一代，第二代和第三代由分别使用集中索引的 ``P2P`` 系统，基于泛洪的搜索（即，使用本地索引）和 ``DHT`` （即，基于 ``DHT`` 的分布式索引）组成。其他作者认为第二代系统也可以有基于非 ``DHT`` 的分布式索引。然而对于其他作者，第一代和第二代分别由使用非结构化（通常使用基于泛洪的搜索）和结构化（例如，基于 ``DHT`` ）的路由的 ``P2P`` 系统组成。在技​​术背景下谈论几代 ``P2P`` 系统是没有用的（如前所述，基于它们如何索引数据对系统进行分类更有用），因为不同的世代根据作者以不同的方式定义，因为谈论世代给出后人比以前更好的印象。取决于要实现的应用，前一代的 ``P2P`` 系统可以以比后一代系统更好的方式满足应用的要求。

如第3节所述，上面的分类法没有考虑注册和 ``peer`` 发现功能。例如，即使存在集中的注册和 ``peer`` 发现服务也仍然被认为是纯粹的 ``P2P`` 系统。

P2P应用
=======
到目前为止开发的 ``P2P`` 应用程序可以归类为以下领域：内容分发，分布式计算，协作和平台。

内容分发
--------
当大多数人想到 ``P2P`` 时，他们会想到文件共享。此外，他们想到用户交换资料的非法文件共享（例如，数字格式的歌曲，电影和软件）它们不是合法授权分发。然而，尽管有这样的感觉，但 ``P2P`` 文件共享系统本质上不是非法的。

``P2P`` 文件共享应用程序提供了许多在互联网上存储并分发内容方法中的一种。 ``HTTP`` 和 ``FTP`` 服务器是其他内容分发的示例机制。人们不会声称 ``HTTP`` 是一种非法机制仅仅因为许多用户上传不了非法的材料到 ``HTTP`` 服务器。该同样地，仅仅因为非法使用 ``P2P`` ，就声明 ``P2P`` 是非法的是不合理的。

``P2P`` 内容分发系统用于实现利用这些 ``P2P`` 系统的特征的合法应用和商业模型。 这些系统的合法使用示例包括由法律授权分发该内容的各方分发预先录制的电视节目[Rodriguez2005]，Linux发行版[Rodriguez2005]，游戏更新[WoW]和直播电视[Peltotalo2008] [Octoshape]（ 例如，内容所有者）。

``P2P`` 内容分发系统的主要优点是它们可扩展性。一般来说，内容处理越受欢迎， ``P2P`` 系统更具可扩展性。拥有原始内容的 ``peer`` （即文件的所有者或音频或视频的来源 stream ）将它分发给对此感兴趣的 ``peer`` 的一小部分内容，这些 ``peers`` 又将其分发给其他对内容感兴趣的 ``peer`` 。请注意，一般来说， ``peer`` 没有必要能够访问分发内容（例如，可以对内容进行加密，使得没有该内容的解密密钥的 ``peer`` 是内容分发者，而不是内容消费者）。 ``peer`` 可以通过不同方式将内容分发给其它 ``peer`` 。例如，他们可以分发整个内容，内容的片段（即，群集），或内容片段的线性组合。无论如何，最终结果就是原始内容 ``peer`` 不需要将整个内容分发到所有对它感兴趣的 ``peer`` (即，就像使用集中服务器一样)。因此，系统的容量不是受到最初拥有原始内容 ``peer`` 的处理能力和带宽的限制，因此整个服务的质量增加。

决定 ``P2P`` 分布系统的重要特征是其 ``peer`` 选择过程。有趣的是，参与分布的各方对于如何选择 ``peers`` 具有不同的看法。用户感兴趣是连接到具有他们想要的内容的 ``peer`` 具有高带宽和处理能力，以及低延迟使传输更快。内容分发网络( ``CDN`` )运营商希望 ``peer`` 首先连接到拥有最少内容片段的 ``peer`` 以提高系统可靠性（如，那些具有很少内容片段的 ``peer`` 离开系统）。网络运营商更喜欢 ``peer`` 在他们的网络内执行本地传输，以便他们的 ``peer`` 和过境协议不会受到负面影响（即尽管本地内容可用，但还是通过远程网络下载内容）。有时，所有这些要求都可以同时满足（例如，具有稀有内容片段的 ``peer`` 具有高带宽和处理能力，并在本地网络）。但是，其他系统可以尝试达到可接受的权衡时间来选择 ``peer`` 。这些问题是2008年举行的IETF P2P基础设施（P2PI）研讨会的主题。


分布式计算
---------




协作
----




平台
----





架构权衡和指南
=============





安全考虑
========


- https://tools.ietf.org/html/rfc5694