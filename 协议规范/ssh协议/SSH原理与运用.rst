********
SSH原理与运用
********

什么是SSH？
==========

简单说， ``SSH`` 是一种网络协议，用于计算机之间的加密登录。

如果一个用户从本地计算机，使用 ``SSH`` 协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。

最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了 ``SSH`` 协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为 Linux 系统的标准配置。

需要指出的是， ``SSH`` 只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是 `OpenSSH`_ ，它是自由软件，应用非常广泛。

此外，本文只讨论 ``SSH`` 在 Linux Shell 中的用法。如果要在 Windows 系统中使用 ``SSH`` ，会用到另一种软件 `PuTTY`_ ，这需要另文介绍。


最基本的用法
===========

``SSH`` 主要用于远程登录。假定你要以用户名 ``user`` ，登录远程主机 ``host`` ，只要一条简单命令就可以了。

.. code-block:: shell

    $ ssh user@host

如果本地用户名与远程用户名一致，登录时可以省略用户名。

.. code-block:: shell

    $ ssh host

``SSH`` 的默认端口是 22 ，也就是说，你的登录请求会送进远程主机的 22 端口。使用 ``p`` 参数，可以修改这个端口。

.. code-block:: shell

    $ ssh -p 2222 user@host

上面这条命令表示， ``ssh`` 直接连接远程主机的 2222 端口。

中间人攻击
==========

``SSH`` 之所以能够保证安全，原因在于它采用了公钥加密。

整个过程是这样的：

1) 远程主机收到用户的登录请求，把自己的公钥发给用户。
2) 用户使用这个公钥，将登录密码加密后，发送回来。
3) 远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。

这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像 ``https`` 协议， ``SSH`` 协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。

可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么 ``SSH`` 的安全机制就荡然无存了。这种风险就是著名的"中间人攻击"（Man-in-the-middle attack）。

SSH协议是如何应对的呢？

口令登录
========

如果你是第一次登录对方主机，系统会出现下面的提示：

.. code-block:: shell

	$ ssh user@host

　　  The authenticity of host 'host (12.18.429.21)' can't be established.
　　  RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.
　　  Are you sure you want to continue connecting (yes/no)?

这段话的意思是，无法确认 ``host`` 主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？

所谓"公钥指纹"，是指公钥长度较长（这里采用 ``RSA`` 算法，长达1024位），很难比对，所以对其进行 ``MD5`` 计算，将它变成一个128位的指纹。上例中是 ``98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d`` ，再进行比较，就容易多了。

很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。

假定经过风险衡量以后，用户决定接受这个远程主机的公钥。

.. code-block:: shell

    Are you sure you want to continue connecting (yes/no)? yes

系统会出现一句提示，表示host主机已经得到认可。

.. code-block:: shell

    Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.

然后，会要求输入密码。

.. code-block:: shell

    Password: (enter password)

如果密码正确，就可以登录了。

当远程主机的公钥被接受以后，它就会被保存在文件 ``$HOME/.ssh/known_hosts`` 之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。

每个 ``SSH`` 用户都有自己的 ``known_hosts`` 文件，此外系统也有一个这样的文件，通常是 ``/etc/ssh/ssh_known_hosts`` ，保存一些对所有用户都可信赖的远程主机的公钥。

公钥登录
========

使用密码登录，每次都必须输入密码，非常麻烦。好在 ``SSH`` 还提供了公钥登录，可以省去输入密码的步骤。

所谓"公钥登录"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录 shell ，不再要求密码。

这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用 ``ssh-keygen`` 生成一个：

.. code-block:: shell

    $ ssh-keygen

运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。

运行结束以后，在 ``$HOME/.ssh/`` 目录下，会新生成两个文件： ``id_rsa.pub`` 和 ``id_rsa`` 。前者是你的公钥，后者是你的私钥。

这时再输入下面的命令，将公钥传送到远程主机 ``host`` 上面：

.. code-block:: shell

    $ ssh-copy-id user@host

好了，从此你再登录，就不需要输入密码了。

如果还是不行，就打开远程主机的 ``/etc/ssh/sshd_config`` 这个文件，检查下面几行前面"#"注释是否取掉。

.. code-block:: shell

	RSAAuthentication yes
	PubkeyAuthentication yes
	AuthorizedKeysFile .ssh/authorized_keys

然后，重启远程主机的 ``ssh`` 服务。

.. code-block:: shell

	// ubuntu系统
	service ssh restart

	// debian系统
	/etc/init.d/ssh restart

authorized_keys文件
===================

远程主机将用户的公钥，保存在登录后的用户主目录的 ``$HOME/.ssh/authorized_keys`` 文件中。公钥就是一段字符串，只要把它追加在 ``authorized_keys`` 文件的末尾就行了。

这里不使用上面的 ``ssh-copy-id`` 命令，改用下面的命令，解释公钥的保存过程：

.. code-block:: shell

    $ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub

这条命令由多个语句组成，依次分解开来看：

1) ``$ ssh user@host`` ，表示登录远程主机；
2) 单引号中的 ``mkdir .ssh && cat >> .ssh/authorized_keys`` ，表示登录后在远程 shell 上执行的命令；
3) ``$ mkdir -p .ssh`` 的作用是，如果用户主目录中的 ``.ssh`` 目录不存在，就创建一个；
4) ``'cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub`` 的作用是，将本地的公钥文件 ``~/.ssh/id_rsa.pub`` ，重定向追加到远程文件 ``authorized_keys`` 的末尾。

写入 ``authorized_keys`` 文件后，公钥登录的设置就完成了。

远程操作
========

``SSH`` 不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。

上一节的操作，就是一个例子：

.. code-block:: shell

    $ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub

单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过 ``SSH`` 传向远程主机。这就是说， ``SSH`` 可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过 ``SSH`` 来完成。

下面看几个例子。

【例1】

将本地主机 ``$HOME/src/`` 目录下面的所有文件，复制到远程主机的 ``$HOME/src/`` 目录。

.. code-block:: shell

    $ cd && tar czv src | ssh user@host 'tar xz'

【例2】

将远程主机 ``$HOME/src/`` 目录下面的所有文件，复制到用户的当前目录。

.. code-block:: shell

    $ ssh user@host 'tar cz src' | tar xzv

【例3】

查看远程主机是否运行进程 ``httpd`` 。

.. code-block:: shell

    $ ssh user@host 'ps ax | grep [h]ttpd'

本地端口转发
===========

有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的"端口转发"。为了区别后文的"远程端口转发"，我们把这种情况称为"本地端口转发"（Local forwarding）。

假定 ``host1`` 是本地主机， ``host2`` 是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台 ``host3`` ，可以同时连通前面两台主机。因此，很自然的想法就是，通过 ``host3`` ，将 ``host1`` 连上 ``host2`` 。

我们在 ``host1`` 执行下面的命令：

.. code-block:: shell

    $ ssh -L 2121:host2:21 host3

命令中的 ``L`` 参数一共接受三个值，分别是 ``本地端口:目标主机:目标主机端口`` ，它们之间用冒号分隔。这条命令的意思，就是指定 ``SSH`` 绑定本地端口 ``2121`` ，然后指定 ``host3`` 将所有的数据，转发到目标主机 ``host2`` 的 ``21`` 端口（假定 ``host2`` 运行 ``FTP`` ，默认端口为 ``21`` ）。

这样一来，我们只要连接 ``host1`` 的 ``2121`` 端口，就等于连上了 ``host2`` 的 ``21`` 端口。

.. code-block:: shell

    $ ftp localhost:2121

"本地端口转发"使得 ``host1`` 和 ``host3`` 之间仿佛形成一个数据传输的秘密隧道，因此又被称为"SSH隧道"。

特殊情况下，目标地址也可以是本地主机地址。

.. code-block:: shell

    $ ssh -L 5900:localhost:5900 host3

它表示将本机的 ``5900`` 端口绑定 ``host3`` 的 ``5900`` 端口（这里的 ``localhost`` 指的是 ``host3`` ，因为目标主机是相对 ``host3`` 而言的）。

另一个例子是通过 ``host3`` 的端口转发， ``ssh`` 登录 ``host2`` 。

.. code-block:: shell

    $ ssh -L 9001:host2:22 host3

这时，只要 ``ssh`` 登录本机的 ``9001`` 端口，就相当于登录 ``host2`` 了。

.. code-block:: shell

    $ ssh -p 9001 localhost

上面的 ``-p`` 参数表示指定登录端口。

远程端口转发
===========

既然"本地端口转发"是指绑定本地端口的转发，那么"远程端口转发"（remote forwarding）当然是指绑定远程端口的转发。

还是接着看上面那个例子， ``host1`` 与 ``host2`` 之间无法连通，必须借助 ``host3`` 转发。但是，特殊情况出现了， ``host3`` 是一台内网机器，它可以连接外网的 ``host1`` ，但是反过来就不行，外网的 ``host1`` 连不上内网的 ``host3`` 。这时，"本地端口转发"就不能用了，怎么办？

解决办法是，既然 ``host3`` 可以连 ``host1`` ，那么就从 ``host3`` 上建立与 ``host1`` 的 ``SSH`` 连接，然后在 ``host1`` 上使用这条连接就可以了。

我们在 ``host3`` 执行下面的命令：

.. code-block:: shell

    $ ssh -R 2121:host2:21 host1

``R`` 参数也是接受三个值，分别是"远程主机端口:目标主机:目标主机端口"。这条命令的意思，就是让 ``host1`` 监听它自己的 ``2121`` 端口，然后将所有数据经由 ``host3`` ，转发到 ``host2`` 的 ``21`` 端口。由于对于 ``host3`` 来说， ``host1`` 是远程主机，所以这种情况就被称为"远程端口绑定"。

绑定之后，我们在 ``host1`` 就可以连接 ``host2`` 了：

.. code-block:: shell

    $ ftp localhost:2121

这里必须指出，"远程端口转发"的前提条件是， ``host1`` 和 ``host3`` 两台主机都有 ``sshD`` 和 ``ssh`` 客户端。

**特殊情况下，目标地址也可以是本地主机地址。**


动态端口转发
===========

为啥需要动态端口转发呢？
----------------------

- 由于防火墙限制，本地主机并不能直接访问远程云主机上的服务，因此需要进行端口转发；
- 为每个端口分别创建本地端口转发非常麻烦;

什么是动态端口转发？
------------------

对于本地端口转发和远程端口转发，都存在两个一一对应的端口，分别位于 ``SSH`` 的客户端和服务端，而动态端口转发则只是绑定了一个本地端口，而 ``目标地址:目标端口`` 则是不固定的。 ``目标地址:目标端口`` 是由发起的请求决定的，比如，请求地址为 ``192.168.1.100:3000`` ，则通过 ``SSH`` 转发的请求地址也是 ``192.168.1.100:3000`` 。

.. code-block:: shell

    $ ssh -D 8080 user@host

``SSH`` 会建立一个 ``socket`` ，去监听本地的 ``8080`` 端口。一旦有数据传向那个端口，就自动把它转移到 ``SSH`` 连接上面，发往远程主机。可以想象，如果 ``8080`` 端口原来是一个不加密端口，现在将变成一个加密端口。


链式端口转发
===========
本地端口转发与远程端口转发结合起来使用，可以进行链式转发。假设 ``A`` 主机在公司，``B`` 主机在家， ``C`` 主机为远程云主机。 ``A`` 主机上运行了前文的 ``web`` 服务，需要在 ``B`` 主机上访问该服务。由于 ``A`` 和 ``B`` 不在同一个网络，且 ``A`` 主机没有独立公共 ``IP`` 地址，所以无法直接访问服务。

通过本地端口转发，将发送到 ``B`` 主机 ``3000`` 端口的请求，转发到远程云主机 ``C`` 的 ``2000`` 端口。

.. code-block:: shell

	# 在B主机登陆远程云主机C，并进行本地端口转发
	ssh -L localhost:3000:localhost:2000 root@103.59.22.17

通过远程端口转发，将发送到远程云主机 ``C`` 端口 ``2000`` 的请求，转发到 ``A`` 主机的 ``3000`` 端口。

.. code-block:: shell

	# 在A主机登陆远程云主机C，并进行远程端口转发
	ssh -R localhost:2000:localhost:3000 root@103.59.22.17

这样，在主机 ``B`` 可以通过访问 ``http://localhost:3000`` 来访问主机 ``A`` 上的服务。

.. code-block:: shell

	# 在主机B访问主机A上的服务
	curl http://localhost:3000
	Hello Fundebug

SSH的其他参数
============

``SSH`` 还有一些别的参数，也值得介绍。

- ``N`` 参数，表示只连接远程主机，不打开远程 ``shell`` ；
- ``T`` 参数，表示不为这个连接分配 ``TTY`` 。这个两个参数可以放在一起用，代表这个 ``SSH`` 连接只用来传数据，不执行远程操作。

.. code-block:: shell

    $ ssh -NT -D 8080 host

- ``f`` 参数，表示 ``SSH`` 连接成功后，转入后台运行。这样一来，你就可以在不中断 ``SSH`` 连接的情况下，在本地 ``shell`` 中执行其他操作。

.. code-block:: shell

    $ ssh -f -D 8080 host

要关闭这个后台连接，就只有用 ``kill`` 命令去杀掉进程。

.. _OpenSSH: http://www.openssh.com/
.. _PuTTY: http://www.chiark.greenend.org.uk/~sgtatham/putty