******************
文件上传的渐进式增强
******************

文件上传是最古老的互联网操作之一。

20多年了，它几乎没变，还是原来的样子：操作麻烦、缺乏交互、用户体验不佳。在这个新技术日新月异的时代，显得非常落伍。


``HTML`` 网页的 ``<form>`` 元素能够以四种格式，向服务器发送数据。

1. 使用 ``POST`` 方法，将 ``enctype`` 属性设为 ``application/x-www-form-urlencoded`` ，这是默认方法。

.. code-block:: js

	<form action="register.php" method="post" onsubmit="AJAXSubmit(this); return false;"></form>

2. 使用 ``POST`` 方法，将 ``enctype`` 属性设为 ``text/plain`` 。

.. code-block:: js

    <form action="register.php" method="post" enctype="text/plain" onsubmit="AJAXSubmit(this); return false;"></form>

3. 使用 ``POST`` 方法，将 ``enctype`` 属性设为 ``multipart/form-data`` 。

.. code-block:: js

    <form action="register.php" method="post" enctype="multipart/form-data" onsubmit="AJAXSubmit(this); return false;"></form>

4. 使用 ``GET`` 方法， ``enctype`` 属性将被忽略。

.. code-block:: js

	<form action="register.php" method="get" onsubmit="AJAXSubmit(this); return false;"></form>

某个表单有两个字段，分别是 ``foo`` 和 ``baz`` ，其中 ``foo`` 字段的值等于 ``bar`` ， ``baz`` 字段的值是一个分为两行的字符串。上面四种方法，都可以将这个表单发送到服务器。

第一种方法是默认方法， ``POST`` 发送， ``Encoding type`` 为 ``application/x-www-form-urlencoded`` 。

.. code-block:: shell

	Content-Type: application/x-www-form-urlencoded

	foo=bar&baz=The+first+line.&#37;0D%0AThe+second+line.%0D%0A

第二种方法是 ``POST`` 发送， ``Encoding type`` 为 ``text/plain`` 。

.. code-block:: shell

	Content-Type: text/plain

	foo=bar
	baz=The first line.
	The second line.

第三种方法是 ``POST`` 发送， ``Encoding type`` 为 ``multipart/form-data`` 。

.. code-block:: shell

	Content-Type: multipart/form-data; boundary=---------------------------314911788813839

	-----------------------------314911788813839
	Content-Disposition: form-data; name="foo"

	bar
	-----------------------------314911788813839
	Content-Disposition: form-data; name="baz"

	The first line.
	The second line.

	-----------------------------314911788813839--

第四种方法是 ``GET`` 请求。

.. code-block:: shell

    ?foo=bar&baz=The%20first%20line.%0AThe%20second%20line.

通常，我们使用 ``file`` 控件实现文件上传。

.. code-block:: html

	<form id="file-form" action="handler.php" method="POST">
	  <input type="file" id="file-select" name="photos[]" multiple/>
	  <button type="submit" id="upload-button">上传</button>
	</form>

上面 ``HTML`` 代码中， ``file`` 控件的 ``multiple`` 属性，指定可以一次选择多个文件；如果没有这个属性，则一次只能选择一个文件。

``file`` 控件对象的 ``files`` 属性，返回一个 ``FileList`` 对象，包含了用户选中的文件。

.. code-block:: js

	var fileSelect = document.getElementById('file-select');
	var files = fileSelect.files;

然后，新建一个 ``FormData`` 对象的实例，用来模拟发送到服务器的表单数据，把选中的文件添加到这个对象上面。

.. code-block:: js

	var formData = new FormData();

	for (var i = 0; i < files.length; i++) {
	  var file = files[i];

	  if (!file.type.match('image.*')) {
	    continue;
	  }

	  formData.append('photos[]', file, file.name);
	}

上面代码中的 ``FormData`` 对象的 ``append`` 方法，除了可以添加文件，还可以添加二进制对象（ ``Blob`` ）或者字符串。

.. code-block:: js

	// Files
	formData.append(name, file, filename);

	// Blobs
	formData.append(name, blob, filename);

	// Strings
	formData.append(name, value);

``append`` 方法的第一个参数是表单的控件名，第二个参数是实际的值，第三个参数是可选的，通常是文件名。

最后，使用 ``Ajax`` 方法向服务器上传文件。

.. code-block:: js

	var xhr = new XMLHttpRequest();

	xhr.open('POST', 'handler.php', true);

	xhr.onload = function () {
	  if (xhr.status !== 200) {
	    alert('An error occurred!');
	  }
	};

	xhr.send(formData);

除了使用 ``FormData`` 接口上传，也可以直接使用 ``File API`` 上传。

.. code-block:: js

	var file = document.getElementById('test-input').files[0];
	var xhr = new XMLHttpRequest();

	xhr.open('POST', 'myserver/uploads');
	xhr.setRequestHeader('Content-Type', file.type);
	xhr.send(file);

可以看到，上面这种写法比 ``FormData`` 的写法，要简单很多。


网页开发者们想了很多办法，试图提升文件上传的功能和操作体验，在各种 ``Javascript`` 库的基础上，开发了五花八门的插件。可是，由于不同浏览器之间的差异，缺乏统一接口，这些插件要么用起来很麻烦，要么不能普遍适用。

``HTML5`` 提供了一系列新的浏览器 ``API`` ，使得文件上传有可能出现革命性变化。英国程序员 Remy Sharp 总结了这些新的接口，本文在他的文章基础上，讨论如何采用 ``HTML5`` 的 ``API`` ，对文件上传进行渐进式增强，实现以下功能：

- ``iframe`` 上传
- ``ajax`` 上传
- 进度条
- 文件预览
- 拖放上传

服务器端php演示代码
==================

文件upload1.php

.. code-block:: php

	<?php
	header("Content-type: text/html; charset=utf-8");
	if($_FILES['myfile']['error'] > 0){ // 判断文件是否成功上传到服务器，0表示上传成功
	    switch($_FILES['myfile']['error']){
	        case 1:
	            echo "上传文件大小超过PHP配置文件中的约定值:upload_max_filesize";
	            break;
	        case 2:
	            echo "上传文件大小超过表单中的约定值:MAX_FILE_SIZE";
	            break;
	        case 3:
	            echo "文件只有部分上传";
	            break;
	        case 4:
	            echo "没有上传任何文件";
	            break;
	    }
	    exit;
	}
	// 获取上传文件的MIME类型中的主类型和子类型
	list($maintype,$subtype) = explode('/',$_FILES['myfile']['type']);
	if($maintype == 'text') { // 通过主类型限制不能上传文本文件，例如.txt .html .php等文件
	    echo '问题：不能上传文本文件。';
	    exit; // 如果用户上传文本文件则退出程序
	}
	$filename = $_FILES['myfile']['name'];
	$upfile = __DIR__.'/uploads/'.time().$filename; // 定义上传后的位置和新文件名
	if(is_uploaded_file($_FILES['myfile']['tmp_name'])) { // 判断是否是上传文件
	    if (move_uploaded_file($_FILES['myfile']['tmp_name'], $upfile)) { // 移动文件
	        // window文件名称为gbk编码，这里把utf-8编码转换为window平台的gbk编码
	        rename($upfile, iconv("utf-8","gbk",$upfile));
	        echo "上传成功";
	        echo '文件' . $upfile . '上传成功，大小为' . $_FILES['myfile']['size'] . '!<br>'; // 如果文件上传成功则输出
	    } else {
	        echo "上传文件失败";
	        echo $_FILES['myfile']['name'];
	    }
	}


传统形式
========
让我们从最基本的开始。

文件上传的传统形式，是使用表单元素 ``file`` ：

.. code-block:: html

	<form id="upload-form" action="upload.php" method="post" enctype="multipart/form-data" >
		<input type="file" id="upload" name="myfile" /> <br />
		<input type="submit" value="Upload" />
	</form>

所有浏览器都支持上面的代码。它在 IE 浏览器中，显示如下：

.. image:: ./images/upload.png

用户先选择文件，然后点击"Upload"按钮，文件开始上传。

iframe上传
==========

传统的表单上传，属于"同步上传"。也就是说，点击上传按钮后，网页"锁死"，用户只能等待上传结束，然后浏览器刷新，跳到表单的 ``action`` 属性指定的网址。

有没有办法"异步上传"，在网页不重载的情况下，完成整个上传过程呢？

页面里经常要用到文件上传的功能，而且要求页面不刷新，先说一下原理：页面里放一个 ``file`` 控件和 ``submit`` 按钮，外面用 ``form`` 表单包住，给 ``form`` 表单加上对应的属性值， ``action`` 、 ``method`` 、 ``entype`` 、 ``name`` ，到这一步，能上传文件了，但是这样上传文件会刷新页面，这不是我们想要的。我们要的是文件上传时不刷新页面，那么也简单，在页面里放一个 ``iframe`` ，设置它的宽高为 ``0`` ，这里有两个坑：

1. 需要设置 ``iframe`` 的 ``name`` 值与 ``form`` 的 ``target`` 属性值一样，意思就是把 ``form`` 表单上传文件的返回信息响应到 ``iframe`` 里去了；
2. ``form`` 表单的 ``enctype`` 属性值必须设置成 ``multipart/form-data`` ，将文件转换成文件流供后端接收；

代码如下：

.. code-block:: html

	<iframe name="fileUpload"></iframe>
	<form method="post" action="upload.php" enctype="multipart/form-data" target="fileUpload">
	    <input type="file" name="myfile">
	    <input type="submit" value="提交" />
	</form>

我们可以使用脚本动态生成上面的代码。在 ``HTML5`` 没有出现之前，只能使用 ``iframe`` 做到这一点。用户点击 ``submit`` 时，动态插入一个 ``iframe`` 元素（以下代码使用了 ``jQuery`` 函数库）。

html代码如下：

.. code-block:: html

	<form  id='upload-form' method="post" action="upload.php" enctype="multipart/form-data">
	    <input type="file" name="myfile">
	    <input type="submit" value="提交" />
	</form>

动态生成iframe代码如下：

.. code-block:: js

    var form = $("#upload-form");
    form.on('submit',function() {
        var seed = Math.floor(Math.random() * 1000);
        var id = "uploader-frame-" + seed;
        var callback = "uploader-cb-" + seed;
        var iframe = $('<iframe id="'+id+'" name="'+id+'" style="display:none;">');
        var url = form.attr('action');
        form.attr('target', id).append(iframe).attr('action', url + '?iframe=' + callback);
        // 定义顶层窗口回调函数
        window[callback] = function(data){
            console.log('received callback:', data);
            iframe.remove(); //removing iframe
            form.removeAttr('target');
            form.attr('action', url);
            window[callback] = undefined; //removing callback
        };
    });

服务器端php演示代码需要改变，文件upload2.php：

.. code-block:: php

	<?php
	header("Content-type: text/html; charset=utf-8");
	if($_FILES['myfile']['error'] > 0){ // 判断文件是否成功上传到服务器，0表示上传成功
	    switch($_FILES['myfile']['error']){
	        case 1:
	            echo "上传文件大小超过PHP配置文件中的约定值:upload_max_filesize";
	            break;
	        case 2:
	            echo "上传文件大小超过表单中的约定值:MAX_FILE_SIZE";
	            break;
	        case 3:
	            echo "文件只有部分上传";
	            break;
	        case 4:
	            echo "没有上传任何文件";
	            break;
	    }
	    exit;
	}
	// 获取上传文件的MIME类型中的主类型和子类型
	list($maintype,$subtype) = explode('/',$_FILES['myfile']['type']);
	if($maintype == 'text') { // 通过主类型限制不能上传文本文件，例如.txt .html .php等文件
	    echo '问题：不能上传文本文件。';
	    exit; // 如果用户上传文本文件则退出程序
	}
	$filename = $_FILES['myfile']['name'];
	$upfile = __DIR__.'/uploads/'.time().$filename; // 定义上传后的位置和新文件名

	$callback = $_GET["iframe"]; // 获取回调函数名称
	if(is_uploaded_file($_FILES['myfile']['tmp_name'])) { // 判断是否是上传文件
	    if (move_uploaded_file($_FILES['myfile']['tmp_name'], $upfile)) { // 移动文件
	        // window文件名称为gbk编码，这里把utf-8编码转换为window平台的gbk编码
	        rename($upfile, iconv("utf-8","gbk",$upfile));
	        echo "上传成功";
	        echo '文件' . $upfile . '上传成功，大小为' . $_FILES['myfile']['size'] . '!<br>'; // 如果文件上传成功则输出
	        echo <<<EOF
	<script type="text/javascript">

	　　window.top.window['$callback']('调用成功');

	</script>
	EOF;
	    } else {
	        echo "上传文件失败";
	        echo $_FILES['myfile']['name'];
	    }
	}

上面的方法可以进一步提升：

- 表单是否也可以通过js代码动态生成？
- 服务器端php演示代码是否不用改变？，即还是使用文件upload1.php。

.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	    <title>文件上传</title>
	</head>
	<body>
	<button id="button">上传文件</button>
	<script src="http://code.jquery.com/jquery-1.12.4.min.js"></script>
	<script src="./upload.js"></script>
	<script>
	    var option = {
	        frameName: 'iframe_test',
	        url: 'upload.php',
	        fileName: 'myfile',
	        format: ['jpg','png','gif','bmp'],
	        callBack: function (data) {
	            alert(data);
	        }
	    }
	    $('#button').click(function () {
	        iframeUpload(option);
	    });
	</script>
	</body>
	</html>

.. code-block:: js

	function iframeUpload(opt){
	    /*
	        参数说明:
	        opt.frameName : iframe的name值;
	        opt.url : 文件要提交到的地址;
	        opt.fileName : file控件的name;
	        opt.format : 文件格式，以数组的形式传递，如['jpg','png','gif','bmp'];
	        opt.callBack : 上传成功后回调;
	    */
	    var iName=opt.frameName; //太长了，变短点
	    var iframe,form;
	    //创建iframe和form表单
	    iframe = $('<iframe style="display:none;" name="'+iName+'" />');
	    form = $('<form method="post" style="display:none;" target="'+iName+'" action="'+opt.url+'"  name="form_'+iName+'" enctype="multipart/form-data" />');
	    file = $('<input type="file" name="'+opt.fileName+'" />');
	    file.appendTo(form);
	    //插入body
	    $(document.body).append(iframe).append(form);
	    //触发浏览事件，选择文件
	    file.click();
	    //选中文件后，验证文件格式是否符合要求
	    file.change(function(){
	        //取得所选文件的扩展名
	        var fileFormat=$(this).val().match(/\.[a-zA-Z]+$/)[0].substring(1);
	        if(opt.format.join('-').indexOf(fileFormat)!=-1){
	            form.submit();//格式通过验证后提交表单;
	        }else{
	            iframe.remove();
	            form.remove();
	            alert('文件格式错误，请重新选择！');
	        }
	    });
	    //文件提交完后监听iframe中内容的变化
	    iframe.load(function(){
	        if(data = $(this).contents().find('body').html()) {
	            opt.callBack(data);
	            iframe.remove();
	            form.remove();
	        }
	    })
	}

ajax上传
========
``HTML5`` 提出了 ``XMLHttpRequest`` 对象的 `第二版 <http://www.w3.org/TR/XMLHttpRequest/>`_ ，从此 ``ajax`` 能够上传文件了。这是真正的"异步上传"，是将来的主流。上一节的 ``iframe`` 上传，可以用作老式浏览器的替代方案。

我们主要用的是 ``FormData`` 对象，它能够构建类似表单的键值对。然后通过 ``ajax`` 进行异步上传。

.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	    <title>文件上传</title>
	</head>
	<body>
	<form  id='upload-form' method="post" action="upload.php" enctype="multipart/form-data">
	    <input type="file" name="myfile">
	    <input type="submit" value="提交" />
	</form>
	<script src="http://code.jquery.com/jquery-1.12.4.min.js"></script>
	<script>
	    $('#upload-form').on('submit', function (event) {
	        event.preventDefault();
	        // 检查是否支持FormData
	        if(window.FormData) {
	            var formData = new FormData(this);
	            $.ajax({
	                url: this.action,
	                type: this.method,
	                data: formData,
	                dataType: 'text',
	                cache: false,
	                processData: false,
	                contentType: false
	            }).done(function (result) {
	                alert(result);
	            })
	        }
	    })
	</script>
	</body>
	</html>

进度条
------
``XMLHttpRequest`` 第二版还定义了一个 ``progress`` `事件 <https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Monitoring_progress>`_ ，可以用来制作进度条。

.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	    <title>文件上传</title>
	</head>
	<body>
	<progress id="uploadprogress" min="0" max="100" value="0">0</progress>
	<form  id='upload-form' method="post" action="upload.php" enctype="multipart/form-data">
	    <input type="file" name="myfile">
	    <input type="submit" value="提交" />
	</form>
	<script src="http://code.jquery.com/jquery-1.12.4.min.js"></script>
	<script>
	    $('#upload-form').on('submit', function (event) {
	        event.preventDefault();
	        // 检查是否支持FormData
	        if(window.FormData) {
	            var formData = new FormData(this);
	            $.ajax({
	                url: this.action,
	                type: this.method,
	                data: formData,
	                dataType: 'text',
	                cache: false,
	                processData: false,
	                contentType: false,
	                xhr: function() { //该函数返回一个增强的xhr对象
	                    var xhr = $.ajaxSettings.xhr();
	                    if (xhr.upload) {
	                        xhr.upload.addEventListener("progress", progressBar, false);
	                        return xhr;
	                    }
	                },
	            }).done(function (result) {
	                alert(result);
	            })
	        }
	    })

	    function progressBar(evt) {
	        if (event.lengthComputable) {
	            var loaded = evt.loaded; //已经上传大小情况
	            var tot = evt.total; //附件总大小
	            var complete = (event.loaded / event.total * 100 | 0);
	            $('#uploadprogress').val(complete);
	        }
	    }

	</script>
	</body>
	</html>

.. note:: ``progress`` 事件不是定义在 ``xhr`` ，而是定义在 ``xhr.upload`` ，因为这里需要区分下载和上传，下载也有一个 ``progress`` 事件，它定义在 ``xhr`` 对象上。

上传前图片预览
-------------
如果上传的是图片文件，利用 `File API <http://dev.w3.org/2006/webapi/FileAPI/>`_ ，我们可以做一个图片文件的预览。这里主要用到 `FileReader <http://www.w3.org/TR/FileAPI/#FileReader-interface>`_ 对象。


.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	    <title>文件上传</title>
	</head>
	<body>
	<progress id="uploadprogress" min="0" max="100" value="0">0</progress>
	<form  id='upload-form' method="post" action="upload.php" enctype="multipart/form-data">
	    <input id="upload" type="file" name="myfile">
	    <input type="submit" value="提交" />
	</form>
	<script src="http://code.jquery.com/jquery-1.12.4.min.js"></script>
	<script>
	    $('#upload').change(function () {
	        uploadImgPreview(this);
	    });

	    //选择图片，马上预览
	    function uploadImgPreview(obj) {
	        //判断浏览器是否支持FileReader接口
	        if (typeof FileReader != 'undefined') {
	            var file = obj.files[0];
	            var reader = new FileReader();

	            //读取文件过程方法
	            reader.onloadstart = function (e) {
	                console.log("开始读取....");
	            }
	            reader.onprogress = function (e) {
	                console.log("正在读取中....");
	            }
	            reader.onabort = function (e) {
	                console.log("中断读取....");
	            }
	            reader.onerror = function (e) {
	                console.log("读取异常....");
	            }
	            reader.onload = function (e) {
	                var image = new Image();
	                image.src = e.target.result;
	                // 或者通过image.src = URL.createObjectURL(file);
	                document.body.appendChild(image);
	            }
	            reader.readAsDataURL(file)
	        }
	    }
	</script>
	</body>
	</html>

拖放文件上传
-----------
利用 ``HTML5`` 的 `拖放功能 <http://www.w3.org/TR/html5/dnd.html>`_ ，实现拖放上传。

先在页面中放置一个容器，用来接收拖放的文件。

.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	    <title>文件上传</title>
	    <style>
	        /*2. 对它设置样式*/
	        #holder {
	            border: 10px dashed #ccc;
	            width: 300px;
	            min-height: 300px;
	            margin: 20px auto;
	        }

	        #holder:hover {
	            border: 10px dashed #0c0;
	        }
	    </style>
	</head>
	<body>
	<!--1. 先在页面中放置一个容器，用来接收拖放的文件。-->
	<div id="holder"></div>
	<script src="http://code.jquery.com/jquery-1.12.4.min.js"></script>
	<script>

	    /*3. 拖放文件的代码，主要是定义dragover、dragend和drop这三个事件*/
	    // 检查浏览器是否支持拖放上传。
	    if('draggable' in document.createElement('span')){
	        var holder = document.getElementById('holder');
	        holder.ondragover = function () { this.className = 'hover'; return false; };
	        holder.ondragend = function () { this.className = ''; return false; };
	        holder.ondrop = function (event) {
	            event.preventDefault();
	            this.className = '';
	            var files = event.dataTransfer.files;
	            var file = files[0];

	            // 预览图片
	            var reader = new FileReader();
	            reader.onload = function (event) {
	                var image = new Image();
	                image.src = event.target.result;
	                image.width = 250; // a fake resize
	                holder.appendChild(image);
	            };

	            reader.readAsDataURL(file);

	            // 发送图片
	            var formData = new FormData();
	            formData.append('myfile', file);

	            var xhr = new XMLHttpRequest();
	            xhr.open('POST', 'upload.php');
	            xhr.onload = function () {
	                if (xhr.status === 200) {
	                    alert('上传成功');
	                } else {
	                    alert('出错了');
	                }
	            };
	            xhr.send(formData);
	        };
	    }
	</script>
	</body>
	</html>

拖拽文件自动上传的综合实例
========================

.. code-block:: html

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	    <title>文件上传</title>
	    <style>
	        #holder {
	            border: 10px dashed #ccc;
	            width: 300px;
	            min-height: 300px;
	            margin: 20px auto;
	        }

	        #holder:hover {
	            border: 10px dashed #0c0;
	        }

	        progress { width: 100%; }
	        progress:after { content: '%'; }

	        .fail { background: #c00; padding: 2px; color: #fff; }
	        .hidden { display: none !important;}
	    </style>
	</head>
	<body>
	<div id="holder"></div>
	<p id="upload" class="hidden"><label>浏览器不支持拖拽，则使用 input 字段:<br><input type="file"></label></p>
	<p id="filereader">File API &amp; FileReader API not supported</p>
	<p id="formdata">XHR2's FormData is not supported</p>
	<p id="progress">XHR2's upload progress isn't supported</p>
	<p>Upload progress: <progress id="uploadprogress" max="100" value="0">0</progress></p>
	<script>

	    var holder = document.getElementById('holder'),
	        tests = {
	            filereader: typeof FileReader != 'undefined',
	            dnd: 'draggable' in document.createElement('span'),
	            formdata: !!window.FormData,
	            progress: "upload" in new XMLHttpRequest
	        },
	        support = {
	            filereader: document.getElementById('filereader'),
	            formdata: document.getElementById('formdata'),
	            progress: document.getElementById('progress')
	        },
	        acceptedTypes = {
	            'image/png': true,
	            'image/jpeg': true,
	            'image/gif': true
	        },
	        progress = document.getElementById('uploadprogress'),
	        fileupload = document.getElementById('upload');

	    // 测试浏览器支持功能
	    "filereader formdata progress".split(' ').forEach(function (api) {
	        if (tests[api] === false) {
	            support[api].className = 'fail';
	        } else {
	            // FFS. I could have done el.hidden = true, but IE doesn't support
	            // hidden, so I tried to create a polyfill that would extend the
	            // Element.prototype, but then IE10 doesn't even give me access
	            // to the Element object. Brilliant.
	            support[api].className = 'hidden';
	        }
	    });

	    // 上传前预览图片
	    function previewfile(file) {
	        if (tests.filereader === true && acceptedTypes[file.type] === true) {
	            var reader = new FileReader();
	            reader.onload = function (event) {
	                var image = new Image();
	                image.src = event.target.result;
	                image.width = 250; // a fake resize
	                holder.appendChild(image);
	            };

	            reader.readAsDataURL(file);
	        }  else {
	            holder.innerHTML += '<p>Uploaded ' + file.name + ' ' + (file.size ? (file.size/1024|0) + 'K' : '');
	            console.log(file);
	        }
	    }

	    // 用ajax发送文件
	    function readfiles(files) {
	        debugger;
	        var formData = tests.formdata ? new FormData() : null;
	        for (var i = 0; i < files.length; i++) {
	            if (tests.formdata) formData.append('myfile', files[i]);
	            previewfile(files[i]);
	        }

	        // now post a new XHR request
	        if (tests.formdata) {
	            var xhr = new XMLHttpRequest();
	            xhr.open('POST', 'upload.php');
	            xhr.onload = function() {
	                progress.value = progress.innerHTML = 100;
	            };

	            if (tests.progress) {
	                xhr.upload.onprogress = function (event) {
	                    if (event.lengthComputable) {
	                        var complete = (event.loaded / event.total * 100 | 0);
	                        progress.value = progress.innerHTML = complete;
	                    }
	                }
	            }

	            xhr.send(formData);
	        }
	    }

	    // 拖拽文件
	    if (tests.dnd) {
	        holder.ondragover = function () { this.className = 'hover'; return false; };
	        holder.ondragend = function () { this.className = ''; return false; };
	        holder.ondrop = function (e) {
	            this.className = '';
	            e.preventDefault();
	            readfiles(e.dataTransfer.files); // 读取文件
	        }
	    } else { // 如果不支持拖拽文件，则使用文件控件
	        fileupload.className = 'hidden';
	        fileupload.querySelector('input').onchange = function () {
	            readfiles(this.files);
	        };
	    }

	</script>
	</body>
	</html>


参考链接 ： https://html5demos.com/