******
基本数据类型
******

``JavaScript`` 是弱类型脚本语言，声明变量时无须指定变量的数据类型。 ``JavaScript`` 变量的数据类型是解释时动态决定的。但 ``JavaScript`` 的值保存在内存中时，也是有数据类型的。
``JavaScript`` 的基本数据类型有如下 5 个。

- 数值类型：包含整数或浮点数。
- 布尔类型：只有 ``true`` 或 ``false`` 两个值。
- 字符串类型：字符串变量必须用引号括起来，引号可以是单引号，也可以是双引号。
- ``undefined`` 类型：专门用来确定一个已经创建但是没有初值的变量。
- ``null`` 类型：用于表明某个变量的值为空。

数值类型
========
与强类型语言如 ``C`` 、 ``Java`` 不同， ``JavaScript`` 的数值类型不仅包括所有的整型变量，也包括所有的浮点型变量。 ``JavaScript`` 语言中的数值都以 ``IEEE 754`` 双精度浮点数格式保存， ``JavaScript`` 中的数值形式非常丰富，完全支持用科学计数法表示。科学计数法的语法格式如下：

.. code-block:: shell

    <num1>E<num2>

这种形式的值为： ``num1*10`` 的 ``num2`` 次方。 ``E`` 为间隔符号， ``E`` 不区分大小写。看如下代码。

.. code-block:: js

	// 显式声明变量a , b
    var a, b;
    // 给a , b使用科学记数法赋值，其值应该为500
    a = 5E2;
    b = 1.23e-3;
    // 输出变量a的值
    console.log(a + "\n" + b);

如果数值只有小数部分，则可以省略整数部分的 ``0`` ，但小数点不能省略。看下面的代码。

.. code-block:: js

	// 使用隐式变量定义变量b
    b = 3.12e1;
    // 使用隐式变量定义变量c
    c = 45.0;
    // 使用隐式变量定义变量d
    d = .34e4;
    // 使用隐式变量定义变量e
    e = .24e-2;
    // 使用警告框输出四个变量值
    console.log(b + '---' + c + '---' + d + '---' + e);

**数值直接量不要以 0 开头。因为 JavaScript 不仅支持十进制数，还支持其他进制数。八进制数以 0 开头，十六进制数以 0x 或者 0X 开头。**

``JavaScript`` 除了支持十进制数外，也支持十六进制数和八进制数。十六进制数以 0X 或 0x 开头，9以上的数以 a～f 表示；八进制数以 0 开头，八进制数中只能出现 0～7 的数值。看下面代码。

.. code-block:: js

	// 显式定义变量a
    var a;
    // 使用16进制数给a赋值
    a = 0x13;
    // 显式定义变量b
    var b;
    //使用8进制数给b赋值
    b = 014;
    // 使用警告对话框输出两个变量的值
    console.log(a + "---" + b);

正如所期望的， ``0x13`` 转换成十进制数为 ``19`` ，而 ``014`` 转换成十进制数为 ``12`` 。

由于 ``HTML`` 代码很多地方都需要使用十六进制数，因此，十六进制数是非常有用的。八进制数并不是所有的浏览器都能支持，如需使用八进制数，请先确定代码运行的浏览器支持八进制数。

当数值变量的值超出了其表数范围时，将出现两个特殊值： ``Infinity`` （正无穷大）和 ``-Infnity`` （负无穷大）。前者表示数值大于数值类型的最大值，后者表示数值小于数值类型的最小值。看如下代码。

.. code-block:: js

	// 定义x为最大的数值
    var x = 1.7976931348623157e308;
    // 再次增加x的值
    x = x + 1e292;
    // 使用警告对话框输出x的值
    console.log(x);

类似地，如果变量值小于数值变量的最小值将出现 ``-Infinity`` 值。看如下代码。

.. code-block:: js

	// 定义x为最小的数值
    var x = -1.7976931348623157e308;
    // 再次减少x的值
    x = x -1e292;
    // 使用警告对话框输出x的值
    console.log(x);

代码的执行结果将显示x的值为 ``-lnfinity`` 。

``Infinity`` 、 ``-Infinity`` 与其他数值进行算术运算时，整个算术表达式将变成另一个特殊值： ``NaN`` 。但 ``Infinity`` 和 ``-Infinity`` 都可以执行比较运算：两个 ``Infinity`` 总是相等的，而两个 ``-Infinity`` 也总是相等的。

.. code-block:: js

	// 定义y为最小的数值
    var y = -1.7976931348623157e308;
    // 再次减少y的值
    y = y - 1e292;
    // 输出y的值
    console.log(y);
    // 输出y执行算术运算表达式的值
    console.log(y + 3E3000);
    // 定义a为Infinity
    a = Number.POSITIVE_INFINITY;
    // 定义b为-Infinity
    b = Number.NEGATIVE_INFINITY;
    // 输出a+b的值
    console.log(a + b);

执行的结果是：第一次输出值为 ``-Infinity`` ，后面两次输出的值为 ``NaN`` 。

两个 ``Infinity`` 的值总是相等的，看如下代码。

.. code-block:: js

	// 使用显式定义变量的方式定义变量a
    var a = 3e30000;
    // 使用显式定义变量的方式定义变量b
    var b = 5e20000;
    // 比较a是否等于b
    console.log(a == b);

在上面的变量定义代码中， ``a`` 的值与 ``b`` 的值明显不相等，但因为 ``a`` 和 ``b`` 都超出了数值的表数范围，．因此它们的值都是 ``Infinity`` ，因此执行的结果是 ``a`` 与 ``b`` 的值相等。

.. note:: ``JavaScript`` 中的算术运算允许除数为 ``0`` （除数和被除数也可同时为 ``0`` ，得到结果为 ``NaN`` ），正数除以零的结果就是 ``Infinity`` ，负数除以零的结果就是 ``-Infinity`` 。

``NaN`` 是另一个特殊的数值，它是 ``Not a Number`` 三个单词的首字母，表示非数。 0 除以 0 ，或者以 ``Infinity`` 执行算术运算都将产生 ``NaN`` 的结果。当然．如果算术表达式中有个 ``NaN`` 的数值变量，则整个算术表达式的值为 ``NaN`` 。

.. note:: ``NaN`` 与 ``Infinity`` 和 ``-Infinity`` 不同的是， ``NaN`` 不会与任何数值变量相等，也就是 ``NaN==NaN`` 也返回 ``false`` 。那如何判断某个变量是否为 ``NaN`` 呢？ ``JavaScript`` 专门提供了 ``isNaN()`` 函数来判断某个变量是否为 ``NaN`` 。

.. code-block:: js

	// 定义x的值为NaN
    var x = 0 / 0;
    // 判断两个NaN是否相等
    if (x != x) {
        console.log("NaN不等于NaN");
    }
    // 调用isNaN判断变量
    if (isNaN(x)) {
        console.log("x是一个NaN");
    }

代码执行结束：输出表明两个 ``NaN`` 互不相等。 ``isNaN()`` 是 ``JavaScript`` 的内嵌函数，用于判断某个数值型变量是否为“非数”。

``JavaScript`` 也提供了一些简单的方法访问这些特殊值，特殊值通过 ``JavaScript`` 的内嵌类 ``Number`` 访问，访问方式如下表所示。

+--------------------------+------------------------+
| Number类的常量           | 特殊值                 |
+==========================+========================+
| Number.MAX_VALUE         | 数值型变量允许的最大值 |
+--------------------------+------------------------+
| Number.MIN_VALUE         | 数值型变量允许的最小值 |
+--------------------------+------------------------+
| Number.POSITIVE_INFINITY | Infinity（正无穷大）   |
+--------------------------+------------------------+
| Number.NEGATIVE_INFINITY | -Infinity（负无穷大）  |
+--------------------------+------------------------+
| Number.NaN               | NaN（非数）            |
+--------------------------+------------------------+

关于浮点型数，必须注意其精度丢失的问题。看如下代码。

.. code-block:: js

	// 显式定义变量a
    var a = .3333;
    // 定义变量b，并为其赋值为a * 5
    var b = a * 5;
    // 输出b的值
    console.log(b);

在上面代码中， ``a*5`` 的值理论上为 ``1.6665`` ，实际的结果 ``1.6664999999999999`` 。

.. note:: 这种由于浮点数计算产生的问题，在很多语言中都会出现。对于浮点数值的比较，尽量不要直接比较，例如直接比较 ``b`` 是否等于 ``1.6665`` ，将返回不相等。为了得到 ``1.6665`` 与 ``b`` 相等的结果，推荐使用差值比较法——判断两个浮点型变量是否相等，通过判断两个浮点型变量的差值，只要差值小于一个足够小的数即可认为相等。

字符串类型
==========
``JavaScript`` 的字符串必须用引号括起来，此处的引号既可以是单引号，也可以是双引号。例如，下面两种定义字符串变量的方式都是允许的：

.. code-block:: js

	a = "Hello JavaScript";
	b = 'Hello JavaScript';

这两种方式都是允许的，且 ``a`` 与 ``b`` 两个变量完全相等。

``JavaScript`` 中没有字符类型，或者说字符类型和字符串类型是完全相同的，即使这种代码定义的 ``a`` 依然是字符串类型的变量，没有字符类型变量。

.. note:: ``JavaScript`` 中的字符串与 ``Java`` 中的字符串主要有两点区别：

- JavaScript中的字符串可以用单引号引起来；
- JavaScript中比较两个字符串的字符序列是否相等使用 ``==`` 即可，无须使用 ``equals()`` 方法。

 ``JavaScript`` 以 ``String`` 内建类来表示字符串， ``String`` 类里包含了一系列方法操作字符串， ``String`` 类有如下基本方法和属性操作字符串。

- ``String()`` ：类似于面向对象语言中的构造器，使用该方法可以构建一个字符串。
- ``charAt()`` ：获取字符串特定索引处的字符。
- ``charCodeAt()`` ：返回字符串中特定索引处的字符所对应的 ``Unicode`` 值。
- ``length`` ：属性，直接返回字符串长度。 ``JavaScript`` 中的中文字符算一个字符。
- ``toUpperCase()`` ：将字符串的所有字母转换成大写字母。
- ``toLowerCase()`` ：将字符串的所有字母转换成小写字母。
- ``fromCharCode()`` ：静态方法，直接通过 ``String`` 类调用该方法，将一系列 ``Unicode`` 值转换成字符串。
- ``indexOf()`` ：返回字符串中特定字符串第一次出现的位置。
- ``lastlndexOf()`` ：返回字符串中特定字符串最后一次出现的位置。
- ``substring()`` ：返回字符串的某个子串。
- ``slice()`` ：返回字符串的某个子串，功能比 ``substring`` 更强大，支持负数参数。
- ``match()`` ：使用正则表达式搜索目标子字符串。
- ``search()`` ：使用正则表达式搜索目标子字符串。
- ``concat()`` ：用于将多个字符串拼加成一个字符串。
- ``split()`` ：将某个字符串分隔成多个字符串，可以指定分隔符。
- ``replace()`` ：将字符串中某个子串以特定字符串替代。

下面代码测试了 ``String`` 类的几个简单属性和方法。

.. code-block:: js

	// 定义字符串变量a
    var a = "abc中国";
    // 获取a的长度
    var b = a.length;
    // 将系列的Unicode值转换成字符串
    var c = String.fromCharCode(97,98,99);
    // 输出a的长度，以及字符串a在索引4处的字符和
    // 对应的Unicode值，以及c字符串变量的值
    console.log(b + "---" + a.charAt(4) + "---"+ a.charCodeAt(4) + "---" + c);

``indexOf()`` 和 ``lastIndexOf()`` 用于判断某个子串的位置。其语法格式如下。

- ``indexOf(searchString [, startIndex])`` ：搜索目标字符串 ``searchString`` 出现的位置。其中 ``startIndex`` 指定不搜索左边 ``startlndex`` 个字符。
- ``lastIndexOf(searchString [, startIndex])`` ：搜索目标字符串 ``searchString`` 最后一次出现的位置。如果字符串中没有包含目标字符串，则返回 ``-1`` 。功能更强大的搜索方法是 ``search()`` ，它支持使用正则表达式进行搜索。

看下面代码。

.. code-block:: js

	var a = "hellojavascript";
    // 搜索llo子串最后一次出现的位置
    var b = a.indexOf("llo");
    // 跳过左边3个字符，开始搜索llo子串
    var c = a.indexOf("llo" , 3);
    // 搜索a子串最后一次出现的位置
    var d = a.lastIndexOf("a");
    console.log(b + "\n" + c + "\n" + d);

输出的 ``b`` 值为 ``2`` ，而 ``c`` 值为 ``-l`` ， ``d`` 值为 ``8`` 。 ``-1`` 表示 ``a`` 字符串从索引 ``3`` 处开始搜索，无法找到 ``llo`` 的子串。 ``a`` 字符串中最后一次出现 ``a`` 的位置为 ``8`` 。

与 ``Java`` 字符串里字符索引类似， ``JavaScript`` 字符串里第一个字符的索引是 ``0`` ，而不是 ``1`` 。

``JavaScript`` 中的 ``substring()`` 和 ``slice()`` 语法格式如下。

- ``substring(start [ ,end])`` ：从 ``start`` （包括）索引处，截取到 ``end`` （不包括）索引处，不截取 ``end`` 索引处的字符。如果没有 ``end`` 参数，将从 ``start`` 处一直截取到字符串尾。
- ``slice(start [ ,end])`` ：与 ``substring()`` 的功能基本一致，区别是 ``slice()`` 可以接受负数作为索引，当使用负索引值时，表示从字符串的右边开始计算索引，即最右边的索引为 ``-1`` 。

看如下代码。

.. code-block:: js

	var s = "abcdefg";
    //取得第1个(包括)到第5个(不包括)的子串
    a = s.slice(0, 4);
    //取得第3个(包括)到第5个(不包括)的子串
    b = s.slice(2, 4);
    //取得第5个(包括)到最后的子串
    c = s.slice(4);
    //取得第4个(包括)到倒数第1个(不包括)的子串
    d = s.slice(3, -1);
    //取得第4个(包括)到倒数第2个(不包括)的子串
    e = s.slice(3, -2);
    //取得倒数第3个(包括)到倒数第1个(不包括)的子串
    f = s.slice(-3, -1);
    console.log("a ： " + a + "\nb ： " + b + "\nc ： " + c + "\nd ： " + d + "\ne ： " + e + "\nf ： " + f);

自定义 ``trim()`` 方法：

.. code-block:: js

	String.prototype.trim = function() {
        var start, end;
        start = 0;
        end = this.length - 1;
        while (start <= end && this.charAt(start) == ' ') {
            start++;
        }
        while (start <= end && this.charAt(end) == " ") {
            end--;
        }
        return this.substring(start, end + 1);
    }

``match()`` 和 ``search()`` 方法都支持使用正则表示式作为子串；区别是前者返回匹配的子字符串，后者返回匹配的索引值。 ``match()`` 支持使用全局匹配，通过使用 ``g`` 标志来表示全局匹配， ``match()`` 方法返回所有匹配正则表达式的子串所组成的数组。

``match()`` 方法的返回值为字符串数组或 ``null`` ，如果包含匹配值，将返回字符串数组；否则就返回 ``null`` 。 ``search()`` 返回值为整型变量，如果搜索到匹配子串，则返回子串的索引值；否则返回 ``-1`` 。

下面代码示范了 ``search()`` 和 ``match()`` 方法的用法。

.. code-block:: js

	// 定义字符串s的值
    var s = "abfd--abc@d.comcdefg";
    // 从s中匹配正则表达式
    a = s.search(/[a-z]+@d.[a-zA-Z]{2}m/);
    // 定义字符串变量str
    var str = "1dfd2dfs3df5";
    // 查找字符串中所有单个的数值
    var b = str.match(/\d/g);
    // 输出a和b的值
    console.log(a + "\n" + b);

从上面的执行结果可以看出， ``a`` 的值为 ``6`` ，这表明目标字符串中和正则表达式匹配的第一个子串的位置是 ``6`` ，正则表达式匹配的子串是 ``abc@d.com`` 。

``match()`` 方法在正则表达式后增加了 ``g`` 选项，表明执行全局匹配。匹配的结果返回一个数组，数组元素是目标字符串中的所有数值。

如果需要在字符串中使用单引号、双引号等特殊字符，则必须使用转义字符。 ``JavaScript`` 的转义字符依然是 ``\`` ，下面是常用的转义字符。

- ``\b`` ：代表退格。
- ``\t`` ：表示一个制表符，即一个Tab空格。
- ``\n`` ：换行回车。
- ``\v`` ：垂直的制表符。
- ``\r`` ：回车。
- ``\"`` ：双引号。
- ``\'`` ：单引号。
- ``\\`` ：反斜线，即 ``\`` 。
- ``\OOO``： 使用八进制数表示的拉丁字母。 ``OOO`` 表示一个 3 位的八进制整数，范围是 ``000～377`` 。
- ``\xHH`` ：使用十六进制数表示的拉丁字母， ``HH`` 表示一个 2 位的十六进制整数，范围是 ``00～FF`` 。
- ``\uHHHH`` ：使用十六进制数（该数值指定该字符的 ``Unicode`` 值）表示的字符， ``HHHH`` 表示一个 4 位的十六进制整数。


布尔类型
========
布尔类型的值只有两个： ``true`` 和 ``false`` 。布尔类型的值通常是逻辑运算的结果，或者用于标识对象的某种状态。例如，使用如下代码判断浏览器是否允许使用 ``Cookie`` 。

.. code-block:: js

	// 如果浏览器支持Cookie
    if (navigator.cookieEnabled) {
        alert("浏览器允许使用Cookie");
    }
    // 如果浏览器不支持Cookie
    else {
        alert("浏览器禁用Cookie");
    }



undefined和null
===============

``undefined`` 类型的值只有一个 ``undefined`` ，该值用于表示某个变量不存在，或者没有为其分配值，也用于表示对象的属性不存在。 ``null`` 用于表示变量的值为空。 ``undefined`` 与 ``null`` 之间的差别比较微妙，总体而言， ** undefined 表示没有为变量设置值或属性不存在；而 null 表示变量是有值的，只是其值为 null 。**

在逻辑运算中， ``0`` 、 ``""`` 、 ``false`` 、 ``null`` 、  ``undefined`` 、 ``NaN`` 均表示 ``false`` 。

- ``null`` ，对象不存在。例如：当前页面不存在 ``id`` 对象；
- ``undefined`` 声明的变量没有初始化或者对象属性，方法不存在；

但如果不进行精确比较，很多时候 ``undefined`` 和 ``null`` 本身就相等，即 ``null= = undefined`` 将返回 ``true`` 。如果要精确区分 ``null`` 和 ``undefined`` ，应该考虑使用精确等于符 ``===`` 。

关于 ``undefined`` 和 ``null`` 的区别，看如下代码。

.. code-block:: js

	// 声明变量x , y
    var x, y = null;
    // 判断x的值是否为空
    if (x === undefined) {
        console.log('声明变量后默认值为undefined');
    }
    if (x === null) {
        console.log('声明变量后默认值为null');
    }
    // 判断x（其值为undefined）是否与y（其值为null）相等
    if (x == y) {
        console.log("x（undefined）==y（null）");
    }
    // 测试一个并不存在的属性
    if (String.xyz === undefined) {
        console.log("不存在的属性值默认为undefined");
    }

代码的执行结果是， ``x`` 为 ``undefined`` ，且 ``x==y`` 返回真， ``String`` 的 ``xyz`` 属性值为 ``undefined`` 。

.. note:: 定义一个变量后，如果没有为该变量赋值，该变量值默认为 ``undefined`` ，这个值是系统默认分配的。访问对象并不存在的属性时，该属性值也将返回 ``undefined`` 。

与 ``null`` 不同的是， ``undefined`` 并不是 ``JavaScript`` 的保留字，在 ``ECMAScript 3`` 标准规范中， ``undefined`` 是一个全局变量，其值就是 ``undefined`` 在这种情况下，我们把 ``undefined`` 当成关键字处理即可。某些浏览器可能不支持 ``undefined`` 值，则可以在 ``JavaScript`` 脚本的第一行定义如下变量：

正则表达式
==========
正则表达式的本质是一种特殊字符串，这种特殊字符串允许使用“通配符”，因此一个正则表达式字符串可以匹配一批普通字符串。从这个意义上来看，任意一个普通字符串也可算作正则表达式，只是该正则表达式里不包含“通配符”，因而它只能匹配一个字符串。

``JavaScript`` 的正则表达式必须放在两条斜线之间，如 ``/abc/`` 就是一个正则表达式，只是这个正则表达式只能匹配 ``abc`` 字符串。

正则表达式所支持的合法字符如下表所示。

+-------------------------------------+----------------------------------------------------------------------------------------------+
| 字符                                | 解释                                                                                         |
+=====================================+==============================================================================================+
| ``x`` ( ``x`` 可代表任何合法的字符) | 字符 ``x``                                                                                   |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\0mnn``                           | 八进制数 ``0mnn`` 所表示的字符                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\xhh``                            | 十六进制 ``oxhh`` 所表示的字符                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\uhhhh``                          | 十六进制 ``oxhhhh`` 所表示的 ``Unicode`` 字符                                                |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\t``                              | 制表符（ ``\u0009`` ）                                                                       |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\n``                              | 新行（换行）符（ ``\u000A`` ）                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\r``                              | 回车符（ ``\u000D`` ）                                                                       |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\f``                              | 换页符（ ``\u000C`` ）                                                                       |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\a``                              | 报警（bell）符（ ``\u0007`` ）                                                               |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\e``                              | Excape符（ ``\u001B`` ）                                                                     |
+-------------------------------------+----------------------------------------------------------------------------------------------+
| ``\cx``                             | ``x`` 对应的控制符。例如， ``\cM`` 匹配 ``Ctrl+M`` 。 ``x`` 值必须为 ``A-Z`` 或 ``a-z`` 之一 |
+-------------------------------------+----------------------------------------------------------------------------------------------+

正则表达式所支持的 **通配符** 如下表所示。

+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| 预定义字符 | 说明                                                                                                                                        |
+============+=============================================================================================================================================+
| ``.``      | 可以匹配任何字符                                                                                                                            |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\d``     | 匹配0-9的所有数字                                                                                                                           |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\D``     | 匹配非数字                                                                                                                                  |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\s``     | 匹配所有的空白字符，包括空格、制表符、回车符、换页符、换行符等                                                                              |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\S``     | 匹配所有的非空白字符                                                                                                                        |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\w``     | 匹配所有的单词字符，包括0-9的所有数字，26个英文字母和下划线（_）                                                                            |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``\W``     | 匹配所有的非单词字符                                                                                                                        |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| []表示法   | 这种表示法最为灵活，例如，[a-z]表示a到z，或0到9的任意一个字符，[ ``\u4e00-\u9fff`` ]匹配任意一个汉字（u4e00到u9fff是汉字的Unicode码值范围） |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``$``      | 匹配一行的结尾。要匹配$字符本身，请使用 ``\$``                                                                                              |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ``^``      | 匹配一行的开头。要匹配^字符本身，请使用 ``\^``                                                                                              |
+------------+---------------------------------------------------------------------------------------------------------------------------------------------+

记住了这些“通配符”之后，还需要记住如下表所示的特殊字符（频率修饰词）。

+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 特殊字符  | 说明                                                                                                                                                                                |
+===========+=====================================================================================================================================================================================+
| ``？``    | 指定前面子表达式可以出现零次或一次，要匹配 ``?`` 字符，请使用 ``\?``                                                                                                                |
+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``*``     | 指定前面子表达式可以出现零次或多次，要匹配 ``*`` 字符，请使用 ``\*``                                                                                                                |
+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``+``     | 指定前面子表达式可以出现一次或多次，要匹配 ``+`` 字符，请使用 ``\+``                                                                                                                |
+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``{m,n}`` | 这种表示法最灵活，前面子表达式最少出现 ``m`` 次，最多出现 ``n`` 次。 ``m、n`` 两个数值都可以省略，如果省略 ``m`` ，则表示最少可出现 0 次；如果省略 ``n`` ，则表示最多可出现无限多次 |
+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

除此之外，正则表达式还支持 ``()`` 表示法，用 ``()`` 可以将一个表达式形成一个固定组。还可以在 ``()`` 内使用竖线表示互斥，例如 ``/((abc)|(efg))/`` 可匹配 ``abc`` 或 ``efg`` 。

掌握上表所示的内容之后，就学会了正则表达式的基本用法了。 ``JavaScript`` 的正则表达式提供了一个 ``test()`` 方法，用于判断该正则表达式是否匹配某个字符串。

除此之外， ``JavaScript`` 的字符串 ``replace()`` 方法也可使用正则表达式，考虑 ``JavaScript`` 没有提供截去字符串前后空白（包括空格、制表符等）的方法，下面利用正则表达式和 ``replace()`` 实现一个 ``trim()`` 方法。

.. code-block:: js

	// 用正则表达式来匹配超链接
    console.log(/^<a href=(\'|\")[a-zA-Z0-9\/：\.]*(\'|\")>.*<\/a>$/
            .test("<a href='http：//www.crazyit.org'>疯狂Java联盟</a>"));
    function trim(s) {
        // \s 匹配任何空白字符，包括空格、制表符、换页符等等。
        // 其中^\s*匹配字符串前面的多个空格，\s*$匹配字符串后面的多个空格
        // /g 表示尽可能多地匹配，
        // 最后将所有匹配的内容替换成''（即截取前、后的空格）
        return s.replace(/(^\s*)|(\s*$)/g, "");
    }
    // 示范截去前后的空白
    console.log(trim('   Hello,JavaScript  '));

