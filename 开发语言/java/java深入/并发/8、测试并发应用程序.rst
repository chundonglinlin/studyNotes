********
测试并发应用程序
********

介绍
====
测试一个应用程序是一个关键的任务。在应用程序准备给终端用户前，你必须去保证(demonstrate)它的正确性。你使用一个测试程序证明已经实现了正确性和错误已经修复。测试阶段是一个在任何软件开发和质量保证流程中常见的任务。你可以找到关于测试程序的大量著作(literature)和不同的路径应用到你的开发中。有大量的库，比如 JUnit 和应用程序，比如 Apache JMetter 可以用来自动化地测试你的应用程序。它们在并发应用开发中更加重要。

事实是并发应用程序有2个或者更多的线程共享数据结构并互相交互，增加了测试阶段的困难性。你要面对的最大问题是当你测试并发应用程序，线程的执行是不确定的。你不能保证线程的执行的顺序，所有它很难再次产生错误现象。

在这章,你将学习：

- 如何获得你的并发应用的元素的信息。这些信息可以帮助你测试并发应用程序。
- 如何使用 IDE 和其它的工具比如 FindBugs 去测试你的并发应用程序。
- 如何使用库，比如 MultithreadedTC 去自动化你的测试。


监视一个Lock接口
===============
``Lock`` 接口是由 Java 并发 API 提供的最基本的去获得同步代码块的机制。它允许定义一个临界区域。一个临界区域是一个代码块，用来访问一个共享资源，在同一时刻不能被多个线程执行。这个机制由 ``Lock`` 接口和 ``ReentrantLock`` 类实现。

在这节，你将学习获得一个 ``Lock`` 对象的哪些信息和如何获得这些信息。

.. code-block:: java

	//1.   创建一个类，名为 MyLock ，扩展 ReentrantLock 类
	public class MyLock extends ReentrantLock {

		private static final long serialVersionUID = 1L;

		// 2. 实现 getOwnerName() 方法。此方法使用Lock类的保护方法 getOwner()， 返回控制锁的线程（如果存在）的名字
		public String getOwnerName() {
			if (this.getOwner() == null) {
				return "None";
			}
			return this.getOwner().getName();
		}

		// 3. 实现 getThreads() 方法。此方法使用Lock类的保护方法 getQueuedThreads()，返回在锁里的线程的 queued list
		public Collection<Thread> getThreads() {
			return this.getQueuedThreads();
		}
	}

	// 4. 创建一个类，名为 Task，实现 Runnable 接口
	public class Task implements Runnable {
		// 5. 声明一个私有 Lock 属性，名为 lock
		private Lock lock;
		// 6. 实现类的构造函数，初始化它的属性值
		public Task(Lock lock) {
			this.lock = lock;
		}

		// 7. 实现 run() 方法。创建迭代5次的for循环
		@Override
		public void run() {
			for (int i = 0; i < 5; i++) {
				// 8. 使用lock()方法获取锁，并打印一条信息
				lock.lock();
				System.out.printf("%s: Get the  Lock.\n", Thread.currentThread().getName());
				// 9. 让线程休眠 500 毫秒。使用 unlock() 释放锁并打印一条信息
				try {
					TimeUnit.MILLISECONDS.sleep(500);
					System.out.printf("%s: Free the Lock.\n", Thread.currentThread().getName());
				} catch (InterruptedException e) {
					e.printStackTrace();
				} finally {
					lock.unlock();
				}
			}
		}
	}

	// 10. 创建例子的主类通过创建一个类，名为 Main 并添加 main()方法
	public class Main {
		public static void main(String[] args) throws InterruptedException {
			// 11. 创建 MyLock 对象，名为 lock
			MyLock lock = new MyLock();

			// 12. 创建有5个Thread对象的 array
			Thread[] threads = new Thread[5];
			// 13. 创建并开始5个线程来执行5个Task对象
			for (int i = 0; i < 5; i++) {
				Task task = new Task(lock);
				threads[i] = new Thread(task);
				threads[i].start();
			}
			// 14. 创建迭代15次的for循环
			for (int i = 0; i < 15; i++) {
				// 15. 把锁的拥有者的名字写入操控台
				System.out.printf("Main: Logging the Lock\n");
				System.out.printf("************************\n");
				System.out.printf("Lock: Owner : %s\n", lock.getOwnerName());
				// 16. 显示锁queued的线程的号码和名字
				System.out.printf("Lock: Queued Threads: %s\n", lock.hasQueuedThreads());
				if (lock.hasQueuedThreads()) {
					System.out.printf("Lock: Queue Length: %d\n", lock.getQueueLength());
					System.out.printf("Lock: Queued Threads: ");
					Collection<Thread> lockedThreads = lock.getThreads();
					for (Thread lockedThread : lockedThreads) {
						System.out.printf("%s ", lockedThread.getName());
					}
					System.out.printf("\n");
				}
				// 17. 显示关于Lock对象的公平性和状态的信息
				System.out.printf("Lock: Fairness: %s\n", lock.isFair());
				System.out.printf("Lock: Locked: %s\n", lock.isLocked());
				System.out.printf("************************\n");
				// 18. 让线程休眠1秒，并合上类的循环
				TimeUnit.SECONDS.sleep(1);
			}
		}
	}

在这节，你实现了继承 ``ReentrantLock`` 类的 ``MyLock`` 类去返回信息，否则它不可用-它保护 ``ReentrantLock`` 类的数据。 ``MyLock`` 类实现的方法是：

- ``getOwnerName()`` ：只能有 1 个线程执行由一个 ``Lock`` 对象保护的临界区域。锁存储正在临界区域执行的线程。这个线程由 ``ReentrantLock`` 类的保护的方法 ``getOwner()`` 方法返回。这个方法使用 ``getName()`` (书中写的是 ``getOwner()`` ，应该是错误的)方法返回线程的名称。
- ``getThreads()`` ：当一个线程执行临界区域，其它的线程尝试进入将睡眠直到它们可以继续执行临界区域。 ``ReentrantLock`` 类的保护方法 ``getQueuedThreads()`` 返回等待执行临界区域的线程的列表。这个方法( ``getThread()`` )通过 ``getQueuedThreads()`` 方法返回结果。

我们也使用了 ``ReentrantLock`` 类实现的一些方法：

- ``hasQueuedThreads()`` ：这个方法返回一个 ``Boolean`` 值表明是否有线程等待区获取锁。
- ``getQueueLength()`` ：这个方法返回等待获取锁的线程的数目。
- ``isLocked()`` ：这个方法返回一个 ``Boolean`` 值表明是否这个锁被一个线程拥有。
- ``isFair()`` ：这个方法返回一个 ``Boolean`` 值表明这个锁是否为公平模式。

``ReentrantLock`` 类的其它方法也可以用来获取关于 ``Lock`` 对象的信息：

- ``getHoldCount()`` ：返回当前线程已经获取锁的次数。
- ``isHeldByCurrentThread()`` ：返回一个 ``Boolean`` 值表明锁是否由当前线程拥有。


监控Phaser类
============
Java 并发 API 提供的最为复杂和有用的功能是使用 ``Phaser`` 类执行并发-阶段性任务的执行。这个机制是有用的，当我们有一些并发任务要被分成几个步骤。 ``Phaser`` 类为我们提供了在每个步骤的最后进行同步的机制，这样不会有线程启动第二个步骤直到第一个步骤中所有的线程结束。

在这节，你将学习你可以获得的关于 ``Phaser`` 类的信息和如何获得这些信息。

.. code-block:: java

	//1.   创建一个类，名为 Task ，实现 Runnable 接口
	public class Task implements Runnable {

		//2.   声明一个私有 int 属性，名为 time
		private int time;
		//3.   声明私有 Phaser 属性，名为 phaser
		private Phaser phaser;
		//4.   实现类的构造函数，初始其属性值
		public Task(int time, Phaser phaser) {
			this.time = time;
			this.phaser = phaser;
		}

		//5.   实现 run() 方法。首先，使用 arrive() 方法指示 phaser 属性任务开始执行了
		@Override
		public void run() {
			phaser.arrive();

			//6.   写信息到操控台表明阶段一开始，把线程放入休眠几秒，使用time属性来表明，再写信息到操控台表明阶段一结束，并使用 phaser 属性的 arriveAndAwaitAdvance() 方法来与剩下的任务同步
			System.out.printf("%s: Entering phase 1.\n",Thread.currentThread().getName());
			try {
				TimeUnit.SECONDS.sleep(time);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("%s: Finishing phase 1.\n",Thread.currentThread().getName());
			phaser.arriveAndAwaitAdvance();

			//7.    为第二和第三阶段重复第一阶段的行为。在第三阶段的末端使用 arriveAndDeregister()方法代替 arriveAndAwaitAdvance() 方法
			System.out.printf("%s: Entering phase 2.\n",Thread.currentThread().getName());
			try {
				TimeUnit.SECONDS.sleep(time);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("%s: Finishing phase 2.\n",Thread.currentThread().getName());
			phaser.arriveAndAwaitAdvance();
			System.out.printf("%s: Entering phase 3.\n",Thread.currentThread().getName());
			try {
				TimeUnit.SECONDS.sleep(time);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("%s: Finishing phase 3.\n",Thread.currentThread().getName());
			phaser.arriveAndDeregister();
		}
	}

	//8.   创建例子的主类通过创建一个类，名为 Main 并添加 main()方法
	public class Main {
		public static void main(String[] args) throws InterruptedException {
			//9.   创建新的有3个参与者的 Phaser 对象，名为 phaser
			Phaser phaser = new Phaser(3);
			//10. 创建并运行3个线程来执行3个task对象
			for (int i = 0; i < 3; i++) {
				Task task = new Task(i + 1, phaser);
				Thread thread = new Thread(task);
				thread.start();
			}

			//11.创建迭代10次的for循环，来获取关于phaser对象的信息
			for (int i = 0; i < 10; i++) {
				//12. 写关于 registered parties 的信息，phaser的phase，到达的parties, 和未到达的parties 的信息
				System.out.printf("********************\n");
				System.out.printf("Main: Phaser Log\n");
				System.out.printf("Main: Phaser: Phase: %d\n", phaser.getPhase());
				System.out.printf("Main: Phaser: Registered Parties: %d\n", phaser.getRegisteredParties());
				System.out.printf("Main: Phaser: Arrived Parties: %d\n", phaser.getArrivedParties());
				System.out.printf("Main: Phaser: Unarrived Parties: %d\n", phaser.getUnarrivedParties());
				System.out.printf("********************\n");
				//13. 让线程休眠1秒，并合上类的循环
				TimeUnit.SECONDS.sleep(1);
			}
		}
	}

在这个指南，我们在 ``Task`` 类实现了 ``phased`` 任务。此 ``phased`` 任务有 3 个 ``phases`` ，并使用 ``Phaser`` 接口来与其他 ``Task`` 对象同步。当这些任务正在执行他们的 ``phases`` 时候，主类运行 3 个任务并打印关于 ``phaser`` 对象的状态信息到操控台。 我们使用以下的方法来获取 ``phaser`` 对象的状态：

- ``getPhase()`` :此方法返回 ``phaser`` 任务的 actual phase
- ``getRegisteredParties()`` : 此方法返回使用 ``phaser`` 对象作为同步机制的任务数
- ``getArrivedParties()`` : 此方法返回已经到达 actual phase 末端的任务数
- ``getUnarrivedParties()`` : 此方法返回还没到达 actual phase 末端的任务数


监视一个Executor框架
===================
``Executor`` 框架提供了分离了任务的实现和创建的机制和管理去执行这些任务。如果你使用一个执行者，你只需要去实现 ``Runnable`` 对象然后发送它们到执行者。这是执行者的职责去管理现场。当你发送一个任务到执行者，它尝试去使用线程池去执行这个任务，为了避免创建新的线程。这个机制由 ``Executor`` 接口和它的实现类比如 ``ThreadPoolExecutor`` 类实现。

在这节，你准备去学习你可以从 ``ThreadPoolExecutor`` 执行者获取那些状态的信息和如何获取它。

.. code-block:: java

	public class Task implements Runnable {

		// 线程休眠的毫秒数
		private long milliseconds;

		public Task(long milliseconds) {
			this.milliseconds = milliseconds;
		}

		@Override
		public void run() {
			System.out.printf("%s: Begin\n", Thread.currentThread().getName());
			try {
				TimeUnit.MILLISECONDS.sleep(milliseconds);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("%s: End\n", Thread.currentThread().getName());
		}
	}

	public class Main {
		public static void main(String[] args) throws InterruptedException {
			ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();

			// 创建和提交10个线程
			Random random = new Random();
			for (int i = 0; i < 10; i++) {
				Task task = new Task(random.nextInt(10000));
				executor.submit(task);
			}

			// 输出执行者的信息
			for (int i = 0; i < 5; i++) {
				showLog(executor);
				TimeUnit.SECONDS.sleep(1);
			}

			executor.shutdown();

			for (int i = 0; i < 5; i++) {
				showLog(executor);
				TimeUnit.SECONDS.sleep(1);
			}

			executor.awaitTermination(1, TimeUnit.DAYS);

			System.out.printf("Main: End of the program.\n");
		}

		/**
		 * 执行者的信息
		 */
		private static void showLog(ThreadPoolExecutor executor) {
			System.out.printf("\r\n*********************");
			System.out.printf("Main: Executor Log");
			System.out.printf("Main: Executor: Core Pool Size: %d\n", executor.getCorePoolSize());
			System.out.printf("Main: Executor: Pool Size: %d\n", executor.getPoolSize());
			System.out.printf("Main: Executor: Active Count: %d\n", executor.getActiveCount());
			System.out.printf("Main: Executor: Task Count: %d\n", executor.getTaskCount());
			System.out.printf("Main: Executor: Completed Task Count: %d\n", executor.getCompletedTaskCount());
			System.out.printf("Main: Executor: Shutdown: %s\n", executor.isShutdown());
			System.out.printf("Main: Executor: Terminating: %s\n", executor.isTerminating());
			System.out.printf("Main: Executor: Terminated: %s\n", executor.isTerminated());
			System.out.printf("*********************\n");
		}
	}

在这节，你实现了一个任务，阻塞执行一个随机的毫秒数。然后，你发送 10 个任务到执行者，当你等待它们的结束，你输出了关于执行者状态的信息到屏幕上。你使用了以下的方法去获得 ``Executor`` 对象的状态。

- ``getCorePoolSize()`` ：返回一个 ``int`` 整数。代表线程的核心数目。它是执行者不执行任何任务时内部线程池的线程的最小数目。
- ``getPoolSize()`` ：返回一个 ``int`` 整数，代表当前内部线程池的数目。
- ``getActiveCount()`` ：返回一个 ``int`` 整数，代当前正在执行任务的线程的数目。
- ``getTaskCount()`` ：返回一个 ``long`` 整数，代表了已经计划执行的任务的数目。
- ``getCompletedTaskCount()`` ：返回一个 ``long`` 整数，代表执行者已经执行并完成的线程的数目。
- ``isShutdown()`` ：返回一个 ``Boolean`` 值，当执行者的 ``shutdown()`` 方法被调用，来结束它的执行。
- ``isTerminating()`` ：返回一个 ``Boolean`` 值，当执行者执行了 ``shutdown()`` 操作，但是它还没有结束。
- ``isTerminated()`` ：返回一个 ``Boolean`` 值，当执行者结束了执行。


监控Fork/Join池
===============
``Executor`` 框架提供了线程的创建和管理，来实现任务的执行机制。Java 7 包括了一个 ``Executor`` 框架的延伸为了一种特别的问题而使用的，将比其他解决方案的表现有所提升(可以直接使用 ``Thread`` 对象或者 ``Executor`` 框架)。它是 ``Fork/Join`` 框架。

此框架是为了解决问题可以使用 ``divide`` 和 ``conquer`` 技术，使用 ``fork()`` 和 ``join()`` 操作把任务分成小块的问题而设计的。主要的类实现这个行为的是 ``ForkJoinPool`` 类。

在这个指南，你将学习从 ``ForkJoinPool`` 类可以获取的信息和如何获取这些信息。

.. code-block:: java

	/**
	 * 1.   创建一个类，名为 Task， 扩展 RecursiveAction 类
	 * This class implements a task used to show how to monitor the behavior of a
	 * Fork/Join pool. The main objective of the task is increment all the elements
	 * of an array. Every task has to process a set of elements of this array. If
	 * the task has to process more than 100 elements, it divides the set it has two
	 * process in two subsets and create two tasks to execute them. Otherwise, it
	 * process the elements of the subset it has to process
	 */
	public class Task extends RecursiveAction {

		private static final long serialVersionUID = 1L;

		// 2. 声明一个私有 int array 属性，名为 array，用来储存你要增加的 array 的元素
		private int array[];

		// 3. 声明2个私有 int 属性，名为 start 和 end，用来储存 此任务已经处理的元素块的头和尾的位置
		private int start;
		private int end;

		/**
		 * Constructor of the class. Initializes its attributes
		 *  4. 实现类的构造函数，初始化属性值
		 * @param array
		 *            Array of elements this task has to process
		 * @param start
		 *            Start position of the set of elements this task has to process
		 * @param end
		 *            End position of the set of elements this task has to process
		 */
		public Task(int array[], int start, int end) {
			this.array = array;
			this.start = start;
			this.end = end;
		}

		// 5. 用任务的中心逻辑来实现 compute()方法。如果此任务已经处理了超过100任务，那么把元素集分成2部分，再创建2个任务分别来执行这些部分，使用 fork() 方法开始执行，并使用join() 方法等待它的终结。
		@Override
		protected void compute() {
			if (end - start > 100) {
				int mid = (start + end) / 2;
				Task task1 = new Task(array, start, mid);
				Task task2 = new Task(array, mid, end);

				/*
				 * Start the sub-tasks
				 */
				task1.fork();
				task2.fork();

				/*
				 * Wait for the finalization of the sub-tasks
				 */
				task1.join();
				task2.join();
				// 6. 如果任务已经处理了100个元素或者更少，那么在每次操作之后让线程进入休眠5毫秒来增加元素
			} else {
				for (int i = start; i < end; i++) {
					array[i]++;

					try {
						TimeUnit.MILLISECONDS.sleep(5);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}

	//7. 创建例子的主类通过创建一个类，名为 Main 并添加 main()方法
	public class Main {

		public static void main(String[] args) throws Exception {

			// 8. 创建 ForkJoinPool 对象，名为 pool
			ForkJoinPool pool=new ForkJoinPool();

			// 9. 创建 10，000个元素的整数 array ，名为 array
			int array[]=new int[10000];

			// 10. 创建新的 Task 对象来处理整个array
			Task task1=new Task(array,0,array.length);

			// 11. 使用 execute() 方法 把任务发送到pool里执行
			pool.execute(task1);

			// 12. 当任务还未结束执行，调用 showLog() 方法来把 ForkJoinPool 类的状态信息写入，然后让线程休眠一秒
			while (!task1.isDone()) {
				showLog(pool);
				TimeUnit.SECONDS.sleep(1);
			}

			// 13. 使用 shutdown() 方法关闭pool
			pool.shutdown();

			// 14. 使用 awaitTermination() 方法 等待pool的终结
			pool.awaitTermination(1, TimeUnit.DAYS);

			// 15. 调用 showLog() 方法写关于 ForkJoinPool 类状态的信息并写一条信息到操控台表明结束程序
			showLog(pool);
			System.out.printf("Main: End of the program.\n");
		}

		// 16. 实现 showLog() 方法。它接收 ForkJoinPool 对象作为参数和写关于线程和任务的执行的状态的信息
		private static void showLog(ForkJoinPool pool) {
			System.out.printf("**********************\n");
			System.out.printf("Main: Fork/Join Pool log\n");
			System.out.printf("Main: Fork/Join Pool: Parallelism: %d\n",pool.getParallelism());
			System.out.printf("Main: Fork/Join Pool: Pool Size: %d\n",pool.getPoolSize());
			System.out.printf("Main: Fork/Join Pool: Active Thread Count: %d\n",pool.getActiveThreadCount());
			System.out.printf("Main: Fork/Join Pool: Running Thread Count: %d\n",pool.getRunningThreadCount());
			System.out.printf("Main: Fork/Join Pool: Queued Submission: %d\n",pool.getQueuedSubmissionCount());
			System.out.printf("Main: Fork/Join Pool: Queued Tasks: %d\n",pool.getQueuedTaskCount());
			System.out.printf("Main: Fork/Join Pool: Queued Submissions: %s\n",pool.hasQueuedSubmissions());
			System.out.printf("Main: Fork/Join Pool: Steal Count: %d\n",pool.getStealCount());
			System.out.printf("Main: Fork/Join Pool: Terminated : %s\n",pool.isTerminated());
			System.out.printf("**********************\n");
		}
	}

在这个指南，你实现了任务使用 ``ForkJoinPool`` 类和一个扩展 ``RecursiveAction`` 类的 ``Task`` 类来增加 ``array`` 的元素；它是 ``ForkJoinPool`` 类执行的任务种类之一。当任务还在处理 ``array`` 时，你就把关于 ``ForkJoinPool`` 类的状态信息打印到操控台。
你使用了 ``ForkJoinPool`` 类中的以下方法：

- ``getPoolSize()`` : 此方法返回 ``int`` 值，它是 ``ForkJoinPool`` 内部线程池的 ``worker`` 线程们的数量。
- ``getParallelism()`` : 此方法返回池的并行的级别。
- ``getActiveThreadCount()`` : 此方法返回当前执行任务的线程的数量。
- ``getRunningThreadCount()`` :此方法返回没有被任何同步机制阻塞的正在工作的线程。
- ``getQueuedSubmissionCount()`` : 此方法返回已经提交给池还没有开始他们的执行的任务数。
- ``getQueuedTaskCount()`` : 此方法返回已经提交给池已经开始他们的执行的任务数。
- ``hasQueuedSubmissions()`` : 此方法返回 ``Boolean`` 值，表明这个池是否有 ``queued`` 任务还没有开始他们的执行。
- ``getStealCount()`` : 此方法返回 ``long`` 值， ``worker`` 线程已经从另一个线程偷取到的时间数。
- ``isTerminated()`` : 此方法返回 ``Boolean`` 值，表明 ``fork/join`` 池是否已经完成执行。


输出有效的日志信息
=================
一个日志系统是一种允许你为了一个或者更多目的而输出信息的机制。

一个 ``Logger`` 有以下组件：

- 一个或者多个 ``handlers`` ：一个 ``handler`` 将决定目的地和日志信息的格式。你可以将日志信息写入到屏幕上，文件中或者数据库中。
- 名称：通常，一个 ``Logger`` 的名称用来一个类中基于类的名称和它的包名称。
- 级别：日志信息有一个关联的级别表明它的重要性。一个 ``Logger`` 也有一个级别用来去决定什么样的信息将写入。它只写入重要的，或者更重要的信息。

你应该遵循以下的两个目的去使用日志系统：

- 当你捕获到一个异常，写入尽可能多的信息。这将帮助你去定位错误和解决它。
- 输出关于正在执行的程序的类和方法的信息。

在这节，你将学习如何使用 ``java.util.logging`` 包提供的类去增加一个日志系统到你的并发应用程序.

.. code-block:: java

	//1.    创建一个类，名为MyFormatter ，扩展 java.util.logging.Formatter 类。实现抽象方法 format()。它接收一个 LogRecord 对象作为参数，并返回一个有着日志信息 String 对象
	public class MyFormatter extends Formatter {

		@Override
		public String format(LogRecord record) {
			StringBuilder sb = new StringBuilder();

			sb.append("[" + record.getLevel() + "] - ");
			sb.append(new Date(record.getMillis()) + " : ");
			sb.append(record.getSourceClassName() + "." + record.getSourceMethodName() + " : ");
			sb.append(record.getMessage() + "\n");

			return sb.toString();
		}
	}

	//2.   创建一个类，名为 MyLogger
	public class MyLogger {
		//3.   声明一个私有 static Handler 属性，名为 handler
		private static Handler handler;
		//4.   实现公共 static 方法 getLogger() 来创建 Logger 对象，你将要使用它来写日志信息。它接收一个String 参数，名为 name
		public static Logger getLogger(String name) {
			//5.   使用 Logger 类的getLogger() 方法,获取与 java.util.logging.Logger 相关联的 name 作为参数
			Logger logger = Logger.getLogger(name);

			//6.   使用 setLevel() 方法，确立用来写入全部信息的log级别
			logger.setLevel(Level.ALL);
			//7.    如果处理者属性为null值，创建一个新的 FileHandler 对象在 recipe8.log 文件内写日志信息。使用 setFormatter()对象给处理者分配一个 MyFormatter  对象作为格式
			try {
				if (handler == null) {
					handler = new FileHandler("chapter08.test_concurrent_apps/demo05/log/jdklog.log");

					Formatter format = new MyFormatter();
					handler.setFormatter(format);
				}
				//8.   If the 如果 Logger 对象还有一个与之相关联的处理者，使用 addHandler() 方法分配一个处理者
				if (logger.getHandlers().length == 0) {
					logger.addHandler(handler);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//9.   返回创建的 Logger 对象
			return logger;
		}
	}

	//10. 创建一个类，名为Task，它实现Runnable 接口。它将是用来测试你的Logger对象的任务
	public class Task implements Runnable {

		//11. 实现 run() 方法
		@Override
		public void run() {
			//12. 首先，声明一个 Logger 对象，名为 logger。使用 MyLogger 类的 getLogger() 方法传递这个类的名字为参数来初始它
			Logger logger = MyLogger.getLogger(this.getClass().getName());

			//13. 使用 entering() 方法写日志信息表明执行开始
			logger.entering(Thread.currentThread().getName(), "run()");

			//休眠2秒
			try {
				TimeUnit.SECONDS.sleep(2);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			//14.使用 exiting() 方法写日志信息表明执行结束
			logger.exiting(Thread.currentThread().getName(), "run()", Thread.currentThread());
		}
	}

	//15. 创建例子的主类通过创建一个类，名为 Main 并添加 main()方法
	public class Main {
		public static void main(String[] args) {
			//16. 声明一个 Logger 对象，名为 logger。使用 MyLogger 类的 getLogger() 方法传递字符串 Core 作为参数来初始它
			Logger logger = MyLogger.getLogger("Core");
			//17. 使用 entering() 方法写日志信息表明主程序开始执行
			logger.entering("Core", "main()", args);
			//18. 创建 Thread array 来保存5个线程
			Thread threads[] = new Thread[5];
			//19. 创建5个Task对象和5个执行他们的线程。写日志信息表明，你将运行一个新的线程和表明你已经创建了线程
			for (int i = 0; i < threads.length; i++) {
				logger.log(Level.INFO, "Launching thread: " + i);
				Task task = new Task();
				threads[i] = new Thread(task);
				logger.log(Level.INFO, "Thread created: " + threads[i].getName());
				threads[i].start();
			}
			//20. 写日志信息表明你已经创建了线程
			logger.log(Level.INFO, "Ten Threads created. Waiting for its finalization");
			//21. 使用 join() 方法等待5个线程的终结。在每个线程终结之后，写日志信息表明线程已经结束
			for (int i = 0; i < threads.length; i++) {
				try {
					threads[i].join();
					logger.log(Level.INFO, "Thread has finished its execution", threads[i]);
				} catch (InterruptedException e) {
					logger.log(Level.SEVERE, "Exception", e);
				}
			}
			//22. 使用 exiting() 方法写一个日志信息表明主程序运行结束
			logger.exiting("Main", "main()");
		}
	}


在这个指南里，你已经使用 Java logging API 提供的 ``Logger`` 类 在并发应用中写日志信息。首先，你实现了 ``MyFormatter`` 类来给日志信息一个格式。这个类扩展 ``Formatter`` 类，声明了抽象方法 ``format()`` 。此方法接收 ``LogRecord`` 对象的全部日志消息信息，并返回一条格式化的日志信息。在你的类里使用了 ``LogRecord`` 类的以下这些方法来获取日志信息：

- ``getLevel()`` : 返回的信息的级别。
- ``getMillis()`` :返回日期，当一条信息被发送给 ``Logger`` 对象。
- ``getSourceClassName()`` : 返回发送信息给 ``Logger`` 的类的名字。
- ``getSourceMessageName()`` :返回发送信息给 ``Logger`` 的方法的名字
- ``getMessage()`` ：返回日志信息。 ``MyLogger`` 类实现了静态方法 ``getLogger()`` ， 创建 ``Logger`` 对象并分配 ``Handler`` 对象使用 ``MyFormatter`` 的格式在 ``recipe8.log`` 文件中写入日志信息。你可以使用这个类的静态方法 ``getLogger()`` 创建对象。此方法返回每个不同的对象作为参数传递的名字。 你只要创建一个 ``Handler`` 对象，全部的 ``Logger`` 对象都会使用它在同一个文件中写日志信息。你还配置了 ``logger`` 写全部的日志信息，无论信息级别。

最后，你实现了 ``Task`` 对象和一个主程序在 ``logfile`` 写入不同的日志信息。你使用了以下的方法：

- ``entering()`` :写 ``FINER`` 等级的信息，表明方法开始运行
- ``exiting()`` : 写 ``FINER`` 等级的信息，表明方法结束运行
- ``log()`` : 写特定级别的信息

当你使用 ``log`` 类时，你必须考虑2个重要点：

- 写必需的信息：如果你写过少的信息，那么 ``logger`` 就没有满足它的目的变的不是特别有作用。如果你写过多的信息，那么就会产生很大的日志文件，就不好管理且很难获取必要信息。
- 对信息使用适当的级别：如果你用高级别写入消息信息（information messages)，或者使用低级别来写入报错信息，那么你就会让看 ``logfiles`` 的人很困惑。就会变得很难了解到底发生了什么错误，或者有过多的信息来分析错误的主要原因。

还有很多其他库比 ``java.util.logging`` 包提供了更完整的 ``log`` 系统，例如 ``Log4j`` 或者 ``slf4j`` 库。但是 ``java.util.logging`` 是 Java API 的一部分，而且它的全部方法都是 multi-thread safe ，所以在并发应用中使用它将不会遇到任何问题。

FindBugs分析并发代码
====================
静态代码分析工具是一个工具的集合，用来分析一个应用程序的代码查找潜在的错误。这些工具，比如 ``Checkstyle`` ， ``PMD`` 或者 ``Findbugs`` 有一系列预定良好的实践的规则，分析源代码查找违反了这些规则的。目的是提早找到错误或者替换引起糟糕性能的代码，在生产环境中执行之前。程序语言通常提供这样的工具， Java 也不例外。这些工具中的其中之一去分析 Java 代码的就是 ``FingBugs`` 。它是一个开源的工具，包含了一系列规则去分析 Java 并发代码。

在这节，你将学习如何使用这个工具去分析你的 Java 并发应用程序。




配置Eclipse来调试并发代码
========================


配置NetBeans来调试并发代码
=========================


MultithreadedTC测试并发代码
==========================
http://ifeve.com/testing-concurrent-applications-10/