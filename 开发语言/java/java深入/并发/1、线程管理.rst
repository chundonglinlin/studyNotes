****
线程管理
****

介绍
====
在计算机世界，当人们谈到并发时，它的意思是一系列的任务在计算机中同时执行。如果计算机有多个处理器或者多核处理器，那么这个同时性是真实发生的；如果计算机只有一个核心处理器那么就只是表面现象。

现代所有的操作系统都允许并发地执行任务。你可以在听音乐和浏览网页新闻的同时阅读邮件。我们说这种并发是进程级别的并发。而且在同一进程内，也会同时有多种任务。这些在同一进程内运行的并发任务称之为线程。

另一个与并发性有关的内容是并行性。并行性与并发性有着不同的定义但有一定相关的联系。有些人是这样认为：当在一个单核处理器上使用多个线程执行应用程序时，很明显的，在程序执行的同时你就会明白这是并发性。当你使用多个线程在多核处理器或者多处理器的计算机上执行应用时，便是并行性。还有人这样认为：当使用没有预定顺序的多线程执行应用程序时，它是并发性。而当使用多种按照顺序来执行的线程来简化一个问题的解决方案时，它是并行性。

这个章节会展示一些关于如何使用 Java 7 API 来实现最基本的线程操作方法。你将会知道如何在 Java 程序中创建和运行线程，如何控制它们的执行，以及如何通过把线程分组然后把它们作为一个整体来操控。


线程的创建和运行
===============
在这个指南中，我们将学习如何在 Java 程序中创建和运行线程。与每个 Java 语言中的元素一样，线程是对象。在 Java 中，我们有 2 个方式创建线程：

- 通过直接继承 thread 类，然后覆盖 run() 方法；
- 构建一个实现 Runnable 接口的类, 然后创建一个 thread 类对象并传递 Runnable 对象作为构造参数；

在这个指南中，我们将使用第二种方法来制作一个简单的程序，它能创建和运行10个线程。每一个线程能计算和输出1-10以内的乘法表。

.. code-block:: java

	// 1、创建一个名为Calculator的类，这个类要实现Runnable接口
	public class Calculator implements Runnable {

	    // 2、声明一个名为number 的private int为属性，然后实现构造函数并初始化其值
	    private int number;

	    public Calculator(int number) {
	        this.number = number;
	    }

	    // 3、实现run()方法. 这方法是给我们创建的线程执行指令，所以这个方法将计算数字乘法表
	    @Override
	    public void run() {
	        for (int i=1; i<=10; i++) {
	            System.out.printf("%s: %d * %d = %d\n", Thread.currentThread().getName(), number, i, i*number);
	        }
	    }
	}

	// 4、实现程序的Main类。创建一个名为 Main的类并包含 main() 方法
	public class Main {
	    // 5、在 main() 方法内，创建一个迭代10次的for循环。在每次循环中，创建一个 Calculator 类的对象,  一个Thread类的对象, 然后传递 Calculator 对象作为thread类构造函数的参数，最后调用线程对象的start() 方法
	    public static void main(String[] args) {
	        for (int i=1; i<=10; i++) {
	            Calculator calculator = new Calculator(i);
	            Thread thread = new Thread(calculator);
	            thread.start();
	        }
	    }
	}

每个 Java 程序最少有一个执行线程。当你运行程序的时候， JVM 运行负责调用 main() 方法的执行线程。

当调用 Thread 对象的 start() 方法时，我们创建了另一个执行线程。在这些 start() 方法调出后，我们的程序就有了多个执行线程。

当全部的线程执行结束时（更具体点，所有非守护线程结束时）， Java 程序就结束了。如果初始线程（执行 main() 方法的主线程）运行结束，其他的线程还是会继续执行直到执行完成。但是如果某个线程调用 ``System.exit()(终止当前运行的Java虚拟机)`` 指示终结程序，那么全部的线程都会结束执行。

创建一个 ``Thread`` 类的对象不会创建新的执行线程。同样，调用实现 ``Runnable`` 接口的 ``run()`` 方法也不会创建一个新的执行线程。只有调用 ``start()`` 方法才能创建一个新的执行线程。

还有另一种方法可以创建新的执行线程。你可以实现一个类，这个类扩展 Thread 类并覆盖它的 run() 方法。接着，你就可以从这个类创建一个对象并调用 start() 方法来创建一个新的执行线程。

获取和设置线程信息
=================
``Thread`` 类的对象中保存了一些属性信息能够帮助我们来辨别每一个线程，知道它的状态，调整控制其优先级。 这些属性是：

- ``ID`` ：每个线程的独特标识。
- ``Name`` ：线程的名称。
- ``Priority`` ：线程对象的优先级。优先级别在 ``1-10`` 之间， ``1`` 是最低级， ``10`` 是最高级。不建议改变它们的优先级，但是你想的话也是可以的。
- ``Status`` ：线程的状态。在 ``Java`` 中，线程只能有这 6 种中的一种状态： ``new`` ， ``runnable`` ， ``blocked`` ， ``waiting`` ， ``time waiting`` 或 ``terminated`` 。

在这个指南里，我们将开发一个为 10 个线程设置名字和优先级的程序，然后展示它们的状态信息直到线程结束。这些线程会计算数字乘法表。

.. code-block:: java

	import java.io.FileWriter;
	import java.io.IOException;
	import java.io.PrintWriter;

	// 4、实现程序的Main类。创建一个名为 Main的类并包含 main() 方法
	public class Main {

	    public static void main(String[] args) throws IOException {
	        // 5、创建一个大小为10的Thread类的数组和一个大小为10的Thread.State数组来保存将要执行的线程和它们的状态。
	        Thread threads[] = new Thread[10];
	        Thread.State status[] = new Thread.State[10];

	        // 6、创建10个Calculator类的对象，每个初始为不同的数字，然后分别用10个线程来运行它们。把其中5个的优先值设为最高，把另外5个的优先值为最低
	        for (int i=0; i<10; i++) {
	            threads[i] = new Thread(new Calculator(i));
	            if((i%2) == 0) {
	                threads[i].setPriority(Thread.MAX_PRIORITY);
	            }else {
	                threads[i].setPriority(Thread.MIN_PRIORITY);
	            }
	            threads[i].setName("Thread" + i);
	        }

	        //7、创建一个 PrintWriter对象用于把线程状态的改变写入文档
	        try (FileWriter file = new FileWriter("log.txt");
	             PrintWriter pw = new PrintWriter(file);) {
	            // 8、把10个线程的状态写入文档
	            for(int i=0; i<10; i++) {
	                pw.println("Main:Status of Thread" + i + ":" + threads[i].getState());
	                status[i] = threads[i].getState();
	            }
	            // 9、开始执行这10个线程
	            for(int i=0; i<10; i++) {
	                threads[i].start();
	            }
	            // 10、直到这10个线程执行结束，我们会一直检查它们的状态。如果发现它的状态改变，就把状态记入文本
	            boolean finish = false;
	            while (!finish) {
	                for(int i=0; i<10; i++) {
	                    if(threads[i].getState() != status[i]) {
	                        writeThreadInfo(pw, threads[i], status[i]);
	                        status[i] = threads[i].getState();
	                    }
	                }
	                finish = true;
	                for (int i=0; i<10; i++) {
	                    finish = finish && (threads[i].getState() == Thread.State.TERMINATED);
	                }
	            }
	        }
	    }

	    // 实现一个方法 writeThreadInfo()，这个方法写线程的 ID, name, priority, old status, 和 new status。
	    private static void writeThreadInfo(PrintWriter pw, Thread thread, Thread.State state) {
	        pw.printf("Main : Id %d - %s\n",thread.getId(),thread.getName());
	        pw.printf("Main : Priority: %d\n",thread.getPriority());
	        pw.printf("Main : Old State: %s\n",state);
	        pw.printf("Main : New State: %s\n",thread.getState());
	        pw.printf("Main : ************************************\n");
	    }

	}

``Thread`` 类有能保存使用线程信息的属性。 ``JVM`` 根据线程的优先级来选择将使用 CPU 的线程，然后再根据每个线程的情况来实现它们的状态。

如果你没有声明一个线程的名字，那么 ``JVM`` 会自动命名它为： ``Thread-XX`` ， ``XX`` 是一个数字。线程的 ID 或者状态是不可修改的。 ``Thread`` 类没有实现 ``setId()`` 和 ``setStatus()`` 方法来允许修改它们。

你学习了如何使用 ``Thread`` 对象来访问线程的属性信息。你也可以实现 ``Runnable`` 接口来访问这些信息。你可以用 ``Thread`` 类的静态方法 ``currentThread()`` 来访问正在运行的 ``Runnable`` 对象的 ``Thread`` 对象。

线程的中断
==========
一个多个线程在执行的 ``Java`` 程序，只有当其全部的线程执行结束时（更具体的说，是所有非守护线程结束或者某个线程调用 ``System.exit()`` 方法的时候），它才会结束运行。有时，你需要为了终止程序而结束一个线程，或者当程序的用户想要取消某个 ``Thread`` 对象正在做的任务。

``Java`` 提供中断机制来通知线程表明我们想要结束它。中断机制的特性是线程需要检查是否被中断，而且还可以决定是否响应结束的请求。所以，线程可以忽略中断请求并且继续运行。

在这个指南中, 我们将开发一个程序，它创建线程，然后在5秒之后，它会使用中断机制来强制结束线程。

.. code-block:: java

	// 1、创建一个名为PrimeGenerator的类，扩展Thread类
	public class PrimeGenerator extends Thread {

	    //  2、覆盖 run()方法，写一个无限循环的while循环。在循环里，我们将从1开始处理连续的数字。对于每个数字，如果它是质数，那么，我们就把它写入到操控台。
	    @Override
	    public void run() {
	        long number = 1L;
	        while (true) {
	            if(isPrime(number)) {
	                System.out.printf("Number %d is Prime\n", number);
	            }

	            // 3、处理完一个数字, 调用isInterrupted()方法来检查线程是否被中断了。如果它返回值为真，就写一个信息并结束线程的运行
	            if(isInterrupted()) {
	                System.out.printf("The Prime Generator has been Interrupted");
	                return;
	            }
	            number++;
	        }
	    }

	    // 4、实现isPrime()方法. 它返回 boolean 值表明接收到的数字是否是质数
	    private boolean isPrime(long number) {
	        if(number <= 2) {
	            return true;
	        }
	        for (long i=2; i<number; i++) {
	            if((number % i ) ==0 ) {
	                return false;
	            }
	        }
	        return true;
	    }
	}

	// 5、实现一个名为Main的类，包括实现main()方法来实现例子的Mian类
	public class Main {
	    public static void main(String[] args) {
	        // 6、创建并开始一个PrimeGenerator类的对象
	        Thread task = new PrimeGenerator();
	        task.start();

	        // 7、等待5秒，然后中断 PrimeGenerator 方法
	        try {
	            Thread.sleep(5000);
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
	        task.interrupt();
	    }
	}

``Thread`` 类还有一个 ``boolean`` 类型的属性来表明线程是否被中断。当你调用线程的 ``interrupt()``  方法，就代表你把这个属性设置为 ``true`` 。 而 ``isInterrupted()`` 方法仅返回属性值。

``Thread`` 类还有其他可以检查线程是否被中断的方法。例如，这个静态方法 ``interrupted()`` 能检查正在运行的线程是否被中断。

``isInterrupted()`` 和 ``interrupted()`` 方法有着很重要的区别：

- 第一个不会改变 ``interrupted`` 属性值，但是第二个会设置成 ``false`` 。
- ``interrupted()`` 方法是一个静态方法，建议使用 ``isInterrupted()`` 方法。

在之前提到的，线程是可以忽略中断指令的，但是并这不是我们所期望的行为。


操作线程的中断机制
=================
在之前的指南里，你学习了如何中断执行线程和如何对 ``Thread`` 对象的中断控制。之前例子中的机制可以很容易中断的线程中使用。但是如果线程实现的是由复杂的算法分成的一些方法，或者它的方法有递归调用，那么我们可以用更好的机制来控制线程中断。为了这个 ``Java`` 提供了 ``InterruptedException`` 异常。当你检测到程序的中断并在 ``run()`` 方法内捕获，你可以抛这个异常。

在这个指南中, 我们将实现的线程会根据给定的名称在文件和子文件夹里查找文件，这个将展示如何使用 ``InterruptedException`` 异常来控制线程的中断。

.. code-block:: java


	// 1、创建一个名为FileSearch的类，并一定要实现Runnable接口
	public class FileSearch implements Runnable {

	    // 2、声明2个为private的属性，一个是为了我们要查找的文件名和另一个是为了初始文件夹。为这个类实现一个构造函数，并初始化这些属性
	    private String initPath;
	    private String fileName;

	    public FileSearch(String initPath, String fileName) {
	        this.initPath = initPath;
	        this.fileName = fileName;
	    }

	    // 3、为FileSearch类实现run()方法。 它会检测fileName属性是不是路径，如果它是，就调用processDirectory()方法。这个方法会抛出一个InterruptedException异常，所以我们应该要捕获它
	    @Override
	    public void run() {
	        File file = new File(initPath);
	        if( file.isDirectory()) {
	            try {
	                directoryProcess(file);
	            } catch (InterruptedException e) {
	                System.out.printf("%s：The search has been interrupted", Thread.currentThread().getName());
	            }
	        }
	    }

	    // 4、实现 directoryProcess()方法。这个方法会获取文件夹的文件和子文件夹并处理他们。对于每个路径，这个方法会传递路径作为参数来循环调用。对于每个文件，它会调用fileProcess()方法。处理完全部的文件和文件夹后，它会检查线程有没有被中断，在这个例子，会抛出一个InterruptedException异常
	    private void directoryProcess(File file) throws InterruptedException {
	        File list[] = file.listFiles();
	        if( list != null) {
	            for (int i=0; i< list.length; i++) {
	                if(list[i].isDirectory()) {
	                    directoryProcess(list[i]);
	                } else {
	                    fileProcess(list[i]);
	                }
	            }
	        }
	        if(Thread.interrupted()) {
	            throw new InterruptedException();
	        }
	    }

	    // 5、实现 processFile()方法。这方法会比较文件的名字与我们要搜索的文件名。如果他们一样，就写一条信息到控制台。比较完后，线程会检查有没有被中断，在这里，它会抛出一个InterruptedException异常
	    private void fileProcess(File file) throws InterruptedException {
	        if(file.getName().equals(this.fileName)) {
	            System.out.printf("%s : %s\n", Thread.currentThread().getName(), file.getAbsolutePath());
	        }
	        if(Thread.interrupted()) {
	            throw new InterruptedException();
	        }
	    }
	}

	// 6、现在, 让我们来实现例子的主类吧。实现一个Main类并包含main()方法
	public class Main {
	    public static void main(String[] args) {
	        // 7、创建并初始一个FileSearch类的对象和一个执行它的任务的线程。然后，开始执行线程
	        FileSearch searcher = new FileSearch("c:\\", "autoexec.bat");
	        Thread thread = new Thread(searcher);
	        thread.start();

	        // 8、等10秒然后中断线程
	        try {
	            TimeUnit.SECONDS.sleep(10);
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
	        thread.interrupt();
	    }
	}

``InterruptedException`` 异常是由一些与并发 ``API`` 有关的 ``Java`` 方法，如 ``sleep()`` 抛出的。


线程的睡眠和恢复
===============
有时, 你会感兴趣在一段确定的时间内中断执行线程。例如, 程序的一个线程每分钟检查反应器状态。其余时间，线程什么也不做。在这段时间，线程不使用任何计算机资源。过了这段时间，当 ``JVM`` 选择它时，线程会准备好继续执行。为达此目的，你可以使用 ``Thread`` 类的 ``sleep()`` 方法。此方法接收一个整数作为参数，表示线程暂停运行的毫秒数。 在调用 ``sleep()`` 方法后，当时间结束时，当 ``JVM`` 安排他们 ``CPU`` 时间，线程会继续按指令执行。

另一种可能是使用一个有 ``TimeUnit`` 列举元素的 ``sleep()`` 方法，使用线程类的 ``sleep()`` 方法让当前线程睡眠，但是它接收的参数单位是表示并转换成毫秒的。

在这个指南中, 我们将开发一个程序使用 ``sleep()`` 方法来每秒写入真实的日期。

.. code-block:: java

	// 1、创建一个类名为 FileClock，并一定实现Runnable接口
	public class FileClock implements Runnable {
	    //2、实现  run() 方法
	    @Override
	    public void run() {
	        //3、写一个10次循环的环。在每次循环，创建一个Date对象，写入文本并调用TimeUnit 类有SECONDS属性的sleep()方法来暂停线程1秒的运行。根据这个值，线程会停止将近一秒。当然 sleep() 方法 可以抛出一个 InterruptedException 异常，我们要加入捕捉代码。被中断时，解放或关闭正在使用的线程资源是好习惯
	        for (int i=0; i<10; i++) {
	            System.out.printf("%s\n", new Date());
	            try {
	                TimeUnit.SECONDS.sleep(1);
	            } catch (InterruptedException e) {
	                // 这里捕获中断异常但没有关闭线程
	                System.out.printf("The FileClock has been interrupted\n");
	            }
	        }
	    }
	}

	//4、我们已经实现了线程。 现在，让我们来实现例子的主类吧。创建一个类名为 FileMain ，包含 main() 方法
	public class FileMain {
	    public static void main(String[] args) {
	        //5、创建FileClock类的对象并让一个线程执行它。然后，开始执行线程
	        FileClock clock = new FileClock();
	        Thread thread = new Thread(clock);
	        thread.start();

	        //6、在主线程调用TimeUnit类有SECONDS属性的 sleep() 方法来等待5秒
	        try {
	            TimeUnit.SECONDS.sleep(5);
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }

	        //7、中断 FileClock 线程
	        thread.interrupt();
	    }
	}

当你运行这个例子，你可以发现程序是如何每秒写入一个 ``Date`` 对象的，然后，有信息显示 ``FileClock`` 线程被中断。

当你调用 ``sleep()`` 方法， ``Thread`` 离开 ``CPU`` 并在一段时间内停止运行。在这段时间内，它是不消耗 ``CPU`` 时间的，使用可以执行其他任务。

当 ``Thread`` 处于睡眠状态时，中断发生，那方法会立刻抛出 ``InterruptedException`` 异常并不会一直等到睡眠时间过去。

``Java`` 并发 ``API`` 有另一种方法能让线程对象离开 CPU 。它是 ``yield()`` 方法，它向 ``JVM`` 表示线程对象可以让 ``CPU`` 执行其他任务。 ``JVM`` 不保证它会遵守请求。通常，它只是用来试调的。这有点类似于协程。？？

等待其它线程的终结
=================
在某些情况下，我们需要等待其它线程的终结。例如，我们可能会遇到程序在执行前需要初始化资源。在执行剩下的代码之前，我们需要等待其它线程完成初始化任务。

为达此目的, 我们使用 ``Thread`` 类的 ``join()`` 方法。当前线程调用某个线程的这个方法时，它会暂停当前线程，直到被调用线程执行完成。

在这个指南中, 我们将学习用初始化例子来使用这个方法。

.. code-block:: java

	//1、创建一个类名为 DataSourcesLoader 并一定实现Runnable接口
	public class DataSourcesLoader implements Runnable {
	    //2、实现run()方法。 它写信息来表明它开始运行，然后睡眠4秒，最后再写信息表明它结束运行
	    @Override
	    public void run() {
	        System.out.printf("Beginning data sources loading：%s\n", new Date());
	        try {
	            TimeUnit.SECONDS.sleep(4);
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
	        System.out.printf("Data sources loading has finished：%s\n", new Date());
	    }
	}

	//3、创建一个类名为 NetworkConnectionsLoader 并一定要Runnable接口。实现run()方法。它将与DataSourcesLoader类的run()方法一样，但是它会睡眠6秒
	public class NetworkConnectionsLoader implements Runnable {
	    @Override
	    public void run() {
	        System.out.printf("Beginning network connection loading：%s\n", new Date());
	        try {
	            TimeUnit.SECONDS.sleep(4);
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
	        System.out.printf("Data network connection has finished：%s\n", new Date());
	    }
	}

	//4、现在， 创建一个类名为 Main，包含 main()方法
	public class WaitingThreadMain {
	    public static void main(String[] args) {
	        //5、创建一个 DataSourcesLoader 类对象并让线程运行它
	        DataSourcesLoader dsLoader = new DataSourcesLoader();
	        Thread thread1 = new Thread(dsLoader,"DataSourceThread");
	        //6、创建一个 NetworkConnectionsLoader 类的对象并让线程运行它
	        NetworkConnectionsLoader ncLoader = new NetworkConnectionsLoader();
	        Thread thread2 = new Thread(ncLoader,"NetworkConnectionLoader");
	        //7、让2个线程对象都调用 start() 方法
	        thread1.start();
	        thread2.start();
	        //8、2个线程都使用 join() 方法等待终结。 此方法可以抛出InterruptedException 异常, 所以要包含捕捉代码
	        try {
	            thread1.join();
	            thread2.join();
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
	        //9、写一条信息表明主程序结束
	        System.out.printf("Main: Configuration has been loaded: %s\n",new Date());
	    }
	}

当你运行这个程序时，你可以发现 2 个线程对象都开始他们的执行。首先， ``DataSourcesLoader`` 结束它的运行。然后， ``NetworkConnectionsLoader`` 类结束它的运行，同时，主线程对象继续运行并写下了最后的信息。

Java 提供2种形式的 ``join()`` 方法:

- join (long milliseconds)
- join (long milliseconds, long nanos)

第一种 ``join()`` 方法，这方法让调用线程等待特定的毫秒数。例如，如果 ``thread1`` 对象使用代码 ``thread2.join(1000)`` ，那么线程 ``thread1`` 暂停运行，直到以下其中一个条件发生：

- thread2 结束运行
- 1000 毫秒过去了

当其中一个条件为真时， ``join()`` 方法返回。

第二个版本的 ``join()`` 方法和第一个很像，只不过它接收一个毫秒数和一个纳秒数作为参数。

守护线程的创建和运行
===================
``Java`` 有一种特别的线程叫做守护线程。这种线程的优先级非常低，通常在程序里没有其他线程运行时(可能休眠)才会执行它。当守护线程是程序里唯一在运行的线程时， ``JVM`` 会结束守护线程并终止程序。

根据这些特点，守护线程通常用于在同一程序里给普通线程（也叫使用者线程）提供服务。它们通常无限循环的等待服务请求或执行线程任务。它们不能做重要的任务，因为我们不知道什么时候会被分配到 CPU 时间片，并且只要没有其他线程在运行，它们可能随时被终止。 JAVA 中最典型的这种类型代表就是垃圾回收器。

在这个指南中, 我们将学习如何创建一个守护线程，开发一个用2个线程的例子；我们的使用线程会写事件到 queue , 守护线程会清除 queue 里 10 秒前创建的事件。

.. code-block:: java

	// 1、创建 Event 类. 这个类只是用来储存我们程序里的工作的事件信息。声明2个属性，一个是java. util.Date 类型的 date 和另一个是String 类型的event 。并生成它们的读值和写值方法
	public class Event {
	    // 事件的时间
	    private Date date;

	    // 事件的信息
	    private String event;

	    public Date getDate() {
	        return date;
	    }

	    public void setDate(Date date) {
	        this.date = date;
	    }

	    public String getEvent() {
	        return event;
	    }

	    public void setEvent(String event) {
	        this.event = event;
	    }
	}

	//2、创建 WriterTask 类并实现Runnable接口
	public class WriterTask implements Runnable {
	    // 3、声明queue，储存事件并实现类的构造函数，初始化queue
	    Deque<Event> deque;
	    public WriterTask(Deque<Event> deque) {
	        this.deque = deque;
	    }

	    //4、实现这个任务的 run() 方法 。 此方法有100个循环。在每个循环中我们会创建 一个Event对象，并保存到 queue里， 然后休眠1秒
	    @Override
	    public void run() {
	        for(int i = 0; i < 100; i++) {
	            Event event = new Event();
	            event.setDate(new Date());
	            event.setEvent(String.format("The thread %s has generated an event	=> %s",Thread.currentThread().getName(), String.valueOf(event.getDate())));
	            // 书中的例子为：
	            // event.setEvent(String.format("The thread %s has generated an event",Thread.currentThread().getId()));

	            // 加入到deque
	            deque.addFirst(event);
	            try {
	                // 睡眠1秒
	                TimeUnit.SECONDS.sleep(1);
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        }
	    }
	}

	// 5、后台线程，创建 CleanerTask 类并一定扩展Thread类
	public class CleanerTask extends Thread {
	    //6、声明 queue，储存事件并实现类的构造函数，初始化queue，在这个构造函数，用setDaemon() 方法让此线程成为守护线程
	    private Deque<Event> deque;
	    public CleanerTask(Deque<Event> deque) {
	        this.deque = deque;
	        // 设置为后台线程
	        setDaemon(true);
	    }

	    //7、实现run()方法。它是无限循环来获取当前日期并调用 clean() 方法
	    @Override
	    public void run() {
	        while (true) {
	            Date date = new Date();
	            clean(date);
	        }
	    }

	    //8、实现 clean() 方法. 它获取最后的事件，如果它在10秒前被创建，就删除它并查看下一个事件。如果一个事件被删除，它会写一个事件信息和queue的新的大小，为了让你看到变化过程
	    private void clean(Date date) {
	        long difference;
	        boolean delete;

	        if (deque.size() == 0) {
	            return;
	        }

	        delete = false;
	        do {
	            Event e = deque.getLast(); // 只获取，不移除
	            difference = date.getTime() - e.getDate().getTime();
	            if (difference > 10000) {
	                System.out.printf("%s Cleaner: %s\n", String.valueOf(new Date()), e.getEvent());
	                // 书中的例子为：
	                // System.out.printf("Cleaner: %s\n",e.getEvent());
	                deque.removeLast();
	                delete = true;
	            }
	        } while (difference > 10000);

	        if (delete) {
	            System.out.printf("Cleaner: Size of the queue: %d\n", deque.size());
	        }
	    }
	}

	//9、现在实现主类。 创建一个类名为 Main 和 main() 方法
	public class Main {
	    public static void main(String[] args) {
	        // 10、创建使用 Deque 类的queue 来保存事件
	        Deque<Event> deque = new ArrayDeque<Event>();

	        // 11、创建 和开始3个 WriterTask 线程和一个 CleanerTask.
	        WriterTask writer = new WriterTask(deque);
	        for (int i = 0; i < 3; i++) {
	            Thread thread = new Thread(writer);
	            thread.start();
	            System.out.printf("启动写任务线程：%s\n", thread.getName());
	        }

	        // CleanerTask
	        CleanerTask cleaner = new CleanerTask(deque);
	        cleaner.start();
	        System.out.printf("启动清理任务线程：%s\n", cleaner.getName());
	    }
	}

如果分析这个程序的输出，你可以发现 ``queue`` 可以一直增加直到它有30个事件，然后它的大小会在27-30之间直到运行结束。

程序开始时有3个 ``WriterTask`` 线程。每个线程写一个事件然后休眠1秒。10秒之后，我们有30个事件在 ``queue`` 里。在这10秒内，当3个 ``WriterTask`` 线程休眠时， ``CleanerTasks`` 已经开始运行，但是它没有删除任何事件，因为所有事件都才生成不到10秒。在剩下的运行里， ``CleanerTask`` 每秒删除3个事件, 然而3个 ``WriterTask`` 线程会另写3个，所以 ``queue`` 的大小在27-30之间。

你可以修改 ``WriterTask`` 线程的休眠时间。如果你使用一个较小的值，你会发现 ``CleanerTask`` 被分配到 ``CPU`` 时间片会更少，由于 ``CleanerTask`` 没有删除任何事件，所以 ``queue`` 大小会一直增加。

只能在 ``start()`` 方法之前可以调用 ``setDaemon()`` 方法。一旦线程运行了，就不能修改守护状态。

可以使用 ``isDaemon()`` 方法来检查线程是否是守护线程（方法返回 ``true`` ) 或者是使用者线程 (方法返回 ``false`` )。

处理线程的不受控制异常
====================
.. image:: ../images/exception.png

总体上我们根据 ``Javac`` 对异常的处理要求，将异常类分为2类。

- 非检查异常（unckecked exception）： ``Error`` 和 ``RuntimeException`` 以及他们的子类。 ``javac`` 在编译时，不会提示和发现这样的异常，不要求在程序处理这些异常。所以如果愿意，我们可以编写代码处理（使用try…catch…finally）这样的异常，也可以不处理。对于这些异常，我们应该修正代码，而不是去通过异常处理器处理 。这样的异常发生的原因多半是代码写的有问题。如除0错误ArithmeticException，错误的强制类型转换错误ClassCastException，数组索引越界ArrayIndexOutOfBoundsException，使用了空对象NullPointerException等等。
- 检查异常（checked exception）：除了 ``Error`` 和 ``RuntimeException`` 的其它异常。 ``javac`` 强制要求程序员为这样的异常做预备处理工作（使用try…catch…finally或者throws）。在方法中要么用try-catch语句捕获它并处理，要么用throws子句声明抛出它，否则编译不会通过。这样的异常一般是由程序的运行环境导致的。因为程序可能被运行在各种未知的环境下，而程序员无法干预用户如何使用他编写的程序，于是程序员就应该为这样的异常时刻准备着。如SQLException , IOException,ClassNotFoundException 等。

需要明确的是：检查和非检查是对于 ``javac`` 来说的，这样就很好理解和区分了。

在一个线程对象的 ``run()`` 方法里抛出一个检查异常，我们必须捕获并处理他们。因为 ``run()`` 方法不接受 ``throws`` 子句。 **当一个非检查异常被抛出，默认的行为是在控制台写下 stack trace 并退出程序。**

幸运的是, Java 提供我们一种机制可以捕获和处理线程对象抛出的未检测异常来避免程序终结。

在这个指南中, 我们将用实例来学习这个机制。

.. code-block:: java

	//1、首先, 我们必须实现一个类来处理非检查异常。这个类必须实现 UncaughtExceptionHandler 接口并实现在接口内已声明的uncaughtException() 方法。在这里，命名此类为 ExceptionHandler  ，并让此方法里写有关于抛出异常的线程信息和异常信息，按照下面的代码
	public class ExceptionHandler implements UncaughtExceptionHandler {

		@Override
		public void uncaughtException(Thread t, Throwable e) {
			System.out.printf("An exception has been captured\n");
			System.out.printf("Thread: %s\n", t.getId());
			System.out.printf("Exception: %s: %s\n", e.getClass().getName(), e.getMessage());
			System.out.printf("Stack Trace: \n");
			e.printStackTrace(System.out);
			System.out.printf("Thread status: %s\n", t.getState());
		}
	}

	//2、现在，实现一个类抛出非检查异常。 命名此类为Task一定要实现 Runnable 接口，实现 run() 方法并刻意出异常， 例如，尝试将 string 值转化成  int 值
	public class Task implements Runnable {

		@Override
		public void run() {
			Integer.parseInt("TTT");
			System.out.println("=====run end=====");
		}
	}

	//3、现在，实现例子主类。实现 Main类和 main() 方法
	public class Main {
		public static void main(String[] args) {
			Task task = new Task();
			Thread thread = new Thread(task);
			thread.setUncaughtExceptionHandler(new ExceptionHandler());
			thread.start();

			System.out.printf("Thread has finished\n");
		}
	}

当在一个线程里抛出一个异常，但是这个异常没有被捕获（这肯定是非检查异常）， ``JVM`` 检查线程的相关方法是否有设置一个未捕捉异常的处理者 。如果有， ``JVM`` 使用 ``Thread`` 对象和 ``Exception`` 作为参数调用此方法。

如果线程没有捕捉未捕获异常的处理者， 那么 ``JVM`` 会把异常的 stack trace 写入操控台并结束任务。

``Thread`` 类有其他相关方法可以处理未捕获的异常。静态方法 ``setDefaultUncaughtExceptionHandler()`` 为应用里的所有线程对象建立异常 ``handler`` 。

当一个未捕捉的异常在线程里被抛出， ``JVM`` 会寻找此异常的3种可能潜在的处理者（handler）。

首先, 它寻找这个未捕捉的线程对象的异常 ``handle`` ，如我们在在这个指南中学习的。如果这个 ``handle`` 不存在，那么 ``JVM`` 会在线程对象的 ``ThreadGroup`` 里寻找非捕捉异常的 ``handler`` ，如在处理线程组内的不受控制异常里介绍的那样。如果此方法不存在，正如我们在这个指南中学习的，那么 ``JVM`` 会寻找默认非捕捉异常 ``handle`` 。

如果没有一个 ``handler`` 存在, 那么 ``JVM`` 会把异常的 stack trace 写入操控台并结束任务。

使用本地线程变量
===============
并发应用的一个关键地方就是共享数据。这个对那些扩展 ``Thread`` 类或者实现 ``Runnable`` 接口的对象特别重要。

如果你创建一个类对象，实现 ``Runnable`` 接口，然后多个 ``Thread`` 对象使用同样的 ``Runnable`` 对象，全部的线程都共享同样的属性。这意味着，如果你在一个线程里改变一个属性，全部的线程都会受到这个改变的影响。

有时，你希望程序里的各个线程的属性不会被共享。 ``Java`` 并发 API提供了一个很清楚的机制叫本地线程变量。

在这个指南中, 我们将开发一个程序，这个程序用来描述在第一段话里的问题，和另一个程序使用本地线程变量机制解决这个问题。

不安全的使用
-----------

.. code-block:: java

	// 1、创建一个类名为 UnsafeTask 并实现 Runnable 接口。 声明一个 private java.util.Date 属性
	public class UnsafeTask implements Runnable {
		private Date startDate;

		//2、实现UnsafeTask 对象的run() 方法，此方法会初始 startDate 属性, 把值写入控制台，随机休眠一段时间，最后在写入startDate 属性
		@Override
		public void run() {
			startDate = new Date();
			System.out.printf("Starting Thread: %s : %s\n", Thread.currentThread().getId(), startDate);
			try {
				TimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 10));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("Thread Finished: %s : %s\n", Thread.currentThread().getId(), startDate);
		}
	}

	//3、现在，来实现这个有问题例子的主类。创建一个 Main  类和 main() 方法. 此方法会创建一个 UnsafeTask 类的对象，并开始3个线程使用这个对象，每个线程间休眠2秒。
	public class UnsafeMain {
		public static void main(String[] args) {
			UnsafeTask task = new UnsafeTask();

			for (int i = 0; i < 3; i++) {
				Thread thread = new Thread(task);
				thread.start();
				try {
					TimeUnit.SECONDS.sleep(2);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

你可以发现这个程序的执行结果。每个线程有着不同的开始时间，但是全部都有相同的结束时间。

安全使用
--------

.. code-block:: java

	//1、创建一个类名为 SafeTask a一定实现 Runnable 接口
	public class SafeTask implements Runnable {
		//2、声明 ThreadLocal<Date> 类对象。此对象有隐含实现了 initialValue()方法. 此方法会返回真实日期
		private static ThreadLocal<Date> startDate = new ThreadLocal<Date>() {
			@Override
			protected Date initialValue() {
				return new Date();
			}
		};

		//3、实现run()方法。它和 UnsafeClass的run() 方法功能一样，只是改变了属性的访问方式
		@Override
		public void run() {
			System.out.printf("Starting Thread: %s : %s\n", Thread.currentThread().getId(), startDate.get());
			try {
				TimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 10));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.printf("Thread Finished: %s : %s\n", Thread.currentThread().getId(), startDate.get());
		}
	}

	public class SafeMain {

		public static void main(String[] args) {
			SafeTask task = new SafeTask();

			for (int i = 0; i < 3; i++) {
				Thread thread = new Thread(task);
				try {
					TimeUnit.SECONDS.sleep(2);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				thread.start();
			}
		}
	}

本地线程变量为每个使用这些变量的线程储存属性值。可以用 ``get()`` 方法读取值和使用 ``set()`` 方法改变值。 如果第一次你访问本地线程变量的值，如果没有值给当前的线程对象，那么本地线程变量会调用 ``initialValue()`` 方法来设置值给线程并返回初始值。

本地线程类还提供 ``remove()`` 方法，删除存储在线程本地变量里的值。

``Java`` 并发 ``API`` 包括 ``InheritableThreadLocal`` 类提供线程创建线程的值的遗传性 。如果线程 ``A`` 有一个本地线程变量，然后它创建了另一个线程 ``B`` ，那么线程 ``B`` 将有与 ``A`` 相同的本地线程变量值。 你可以覆盖 ``childValue()`` 方法来初始子线程的本地线程变量的值。 它接收父线程的本地线程变量作为参数。

.. code-block:: java

	// 可以在子线程和父线程之间共享实例，也同样是为了减少参数的传递
	public class InheritableThreadLocalTest {
		private static InheritableThreadLocal<StringBuffer> ITL = new InheritableThreadLocal<StringBuffer>() {
			@Override
			protected StringBuffer initialValue() {
				return new StringBuffer("hello");
			}
		};

		public static void main(String[] args) {
			Thread.currentThread().setName("A");
			System.out.println(Thread.currentThread().getName() + " : " + ITL.get());					// hello
			// 启动一个线程
			new Thread(new Runnable() {
				@Override
				public void run() {
					System.out.println(Thread.currentThread().getName() + " : " + ITL.get());			// hello
					// 线程内部启动了另外一线程
					new Thread(new Runnable() {
						@Override
						public void run() {
							System.out.println(Thread.currentThread().getName() + " : " + ITL.get());	// hello
							((StringBuffer) ITL.get()).append(", wqf");
							System.out.println(Thread.currentThread().getName() + " : " + ITL.get());	// hello, wqf
						}
					}, "A->B->C").start();
					try {
						Thread.sleep(1000);
					} catch (InterruptedException ex) {
						ex.printStackTrace();
					}
					System.out.println(Thread.currentThread().getName() + " : " + ITL.get());			// hello, wqf
				}
			}, "A->B").start();
			try {
				Thread.sleep(2000);
			} catch (InterruptedException ex) {
				ex.printStackTrace();
			}

			System.out.println(Thread.currentThread().getName() + " : " + ITL.get());					// hello, wqf
		}
	}

线程组
======
``Java`` 并发 API 里有个有趣的方法是把线程分组。这个方法允许我们按线程组作为一个单位来处理。例如，你有一些线程做着同样的任务，你想控制他们，无论多少线程还在运行，他们的状态会被一个 ``call`` 中断。

``Java`` 提供 ``ThreadGroup`` 类来组织线程。 ``ThreadGroup`` 对象可以由 ``Thread`` 对象组成和由另外的 ``ThreadGroup`` 对象组成，生成线程树结构。

在这个指南中, 我们将开发一个简单的例子来学习 ``ThreadGroup`` 对象。我们有 10 个随机时间休眠的线程 (例如，模拟搜索)，然后当其中一个完成，就中断其余的。

.. code-block:: java

	//1、首先，创建一个类名为 Result。它会保存最先结束的线程的名字。声明一个 private String 属性名为 name 并提供相应的读值和设置值的方法
	public class Result {
		private String name;

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

	}

	//2、创建一个类名为 SearchTask 并一定实现 Runnable 接口
	public class SearchTask implements Runnable {
		//3、声明一个Result类的 private 属性变量并实现和初始化这类属性的构造函数
		private Result result;
		public SearchTask(Result result) {
			this.result = result;
		}

		//4、实现run()方法。 它会调用doTask() 方法和等待它结束或者接收一个 InterruptedException 异常。 这方法会写信息表明开始，结束，或者线程中断
		@Override
		public void run() {
			String name = Thread.currentThread().getName();
			System.out.printf("Thread %s: Start\n", name);
			try {
				doTask();
				result.setName(name);
			} catch (InterruptedException e) {
				System.out.printf("Thread %s: Interrupted\n", name);
				return;
			}
			System.out.printf("Thread %s: End\n", name);
		}

		//5、实现 doTask() 方法。它会创建一个 Random 对象生一个随机数字并用这个数字调用 sleep() 方法
		private void doTask() throws InterruptedException {
			Random random = new Random(new Date().getTime());
			int value = (int) (random.nextDouble() * 100);
			System.out.printf("Thread %s: %d\n", Thread.currentThread().getName(), value);
			TimeUnit.SECONDS.sleep(value);	// �������ʱ��
		}
	}

	//6、现在， 创建例子主类通过创建 Main 类和实现 main() 方法
	public class Main {
		public static void main(String[] args) {
			//7、首先, 创建一个 ThreadGroup 对象命名 Searcher
			ThreadGroup threadGroup = new ThreadGroup("Searcher");
			//8、然后, 创建 一个 SearchTask 对象和 一个 Result 对象
			Result result = new Result();
			SearchTask searchTask = new SearchTask(result);
			//9、现在， 使用SearchTask对象创建 5个 Thread 对象。当你调用Thread 类的构造函数时，传递它作为ThreadGroup对象的第一个参数
			for (int i = 0; i < 5; i++) {
				Thread thread = new Thread(threadGroup, searchTask);
				thread.start();

				try {
					TimeUnit.SECONDS.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			//10、使用list() 方法写关于 ThreadGroup ob对象信息
			System.out.printf("Number of Threads: %d\n", threadGroup.activeCount());
			System.out.printf("Information about the Thread Group\n");
			threadGroup.list();

			//11、使用 activeCount() 和 enumerate() 方法来获取线程个数和与ThreadGroup对象关联的线程的列表。我们可以用这个方法来获取信息， 例如，每个线程状态
			Thread[] threads = new Thread[threadGroup.activeCount()];
			threadGroup.enumerate(threads);
			for (int i = 0; i < threadGroup.activeCount(); i++) {
				System.out.printf("Thread %s: %s\n", threads[i].getName(), threads[i].getState());
			}

			// 12、调用 waitFinish()方法. 我们等下来实现这方法。它会等待ThreadGroup对象中的其中一个线程结束
			waitFinish(threadGroup);

			// 13、用interrupt() 方法中断组里的其他线程
			threadGroup.interrupt();
		}

		//14、实现 waitFinish() 方法. 它会使用 activeCount() 方法来控制到最后一个线程
		private static void waitFinish(ThreadGroup threadGroup) {
			while (threadGroup.activeCount() > 4) {
				try {
					TimeUnit.SECONDS.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

``ThreadGroup`` 类储存线程对象和其他有关联的 ``ThreadGroup`` 对象，所以它可以访问他们的所有信息 (例如，状态) 和全部成员的操作表现 (例如，中断)。

处理线程组内的不受控制异常
========================
对于编程语言来说，一个非常重要的事情是提供管理应用出错情况的机制。 Java 语言, 作为最现代的编程语言，实现 ``except`` 基于异常的机制来管理出错情况，它提供很多种类来表示不同的错误。当检测到一个异常状况时，这些异常会被 Java 类们抛出。你也可以使用这些异常, 或者实现你自己的异常, 来管理你的类产生的错误。

Java 也提供机制来捕捉和处理这些异常 。有些一定要被捕捉或者使用方法的 ``throws`` 句组再抛出，这些异常称为检查异常（ ``checked exceptions`` ）。有些异常不需要被捕捉，这些称为未检查异常（ ``unchecked exceptions`` )。

在这个指南中，你将学习了如何使用通用方法来处理线程对象抛出的所有未捕获的异常。

另一种可能是创建一个方法，捕获所有被 ``ThreadGroup`` 类的任何线程抛出的非捕捉异常。

在这个指南中， 我们将用例子来学习如何设置处理程序。

.. code-block:: java

	//1、首先, 创建一个类叫MyThreadGroup来扩展 ThreadGroup 类 。我们必须声明一个拥有一个参数的构造方法，因为ThreadGroup类还有一个没有参数的构造方法。
	public class MyThreadGroup extends ThreadGroup {

		public MyThreadGroup(String name) {
			super(name);
		}

		//2、覆盖 uncaughtException() 方法。ThreadGroup 类的其中一个线程抛出异常时，就会调用此方法 。在这里，这个方法会把异常和抛出它的线程的信息写入操控台并中断ThreadGroup类的其余线程
		@Override
		public void uncaughtException(Thread t, Throwable e) {
			System.out.printf("The thread %s has thrown an Exception\n", t.getId());
			e.printStackTrace(System.out);
			System.out.printf("Terminating the rest of the Threads\n");
			interrupt();
		}
	}

	//3、创建一个类，名为 Task， 并一定要实现Runnable 接口
	public class Task implements Runnable {

		//4、实现run()方法。在这里，我们将会抛出一个 AritmethicException 异常。这样，我们要用1000除以一个随机数字，直到随机生成的数为0的时候，异常就会被抛出
		@Override
		public void run() {
			int result;
			Random random = new Random(Thread.currentThread().getId());
			while (true) {
				result = 1000 / ((int) (random.nextDouble() * 1000));
				System.out.printf("%s : %d\n", Thread.currentThread().getId(), result);

				if (Thread.currentThread().isInterrupted()) {
					System.out.printf("%d : Interrupted\n", Thread.currentThread().getId());
					return;
				}
			}
		}
	}

	//5、现在，我们来实现例子的主类通过实现一个Main类和实现一个main() 方法
	public class Main {

		public static void main(String[] args) {
			//6、创建一个 MyThreadGroup 类对象
			MyThreadGroup threadGroup = new MyThreadGroup("MyThreadGroup");
			//7、创建一个 Task 类对象
			Task task = new Task();
			//8、创建 2个 Thread 对象与这个 Task 并开始他们
			for (int i = 0; i < 5; i++) {
				Thread t = new Thread(threadGroup, task);
				t.start();
			}
		}
	}

当运行这个例子，你会发现线程对象是如何抛出异常和其他被中断的。当一个非捕捉异常在线程内抛出， ``JVM`` 会为这个异常寻找 3 种可能 ``handlers`` 。

首先, 它寻找这个未捕捉的线程对象的异常 ``handle`` ，如在线程中处理不受控制异常中介绍的，如果这个 ``handle`` 不存在，那么JVM会在线程对象的 ``ThreadGroup`` 里寻找非捕捉异常的 ``handler`` ，如我们在这个指南中学习的。如果此方法不存在，那么 ``JVM`` 会寻找默认非捕捉异常 ``handle`` 。如果没有 ``handlers`` 存在, 那么 ``JVM`` 会把异常的 ``stack trace`` 写入控制台并结束任务。

用线程工厂创建线程
=================
在面向对象编程的世界中，工厂模式是最有用的设计模式。它是一种创造性的模式，其目标是开发一个对象，其任务是创建一个或多个类的其他对象。然后，当我们想创建这些类的对象时，我们使用工厂来代替new操作。

有了这个工厂，我们有这些优势来集中创建对象们：

- 更简单的改变了类的对象创建或者说创建这些对象的方式。
- 更简单的为了限制的资源限制了对象的创建。 例如， 我们只 ``new`` 一个此类型的对象。
- 更简单的生成创建对象的统计数据。

``Java`` 提供一个接口， ``ThreadFactory`` 接口实现一个线程对象工厂。 并发 ``API`` 使用线程工厂来创建线程的一些基本优势。

在这个指南中，我们将学习如何实现 ``ThreadFactory`` 接口来创建 ``Thread`` 对象，当我们储存创建的线程对象时，可以取个性化的名字。

.. code-block:: java

	//1、创建一个类名为 MyThreadFactory 一定实现 ThreadFactory 接口
	public class MyThreadFactory implements ThreadFactory {

		//2、声明属性们：counter，整数，用来储存线程对象的数量；name，字符串，每个创建线程的名字；stats, 字符串list, 储存创建的线程对象的统计数据。我们也要实现类的构造函数并初始化
		private int counter;
		private String name;
		private List<String> stats;

		public MyThreadFactory(String name) {
			counter = 0;
			this.name = name;
			stats = new ArrayList<String>();
		}

		//3、实现 newThread() 方法. 此方法 会接收Runnable接口并返回一个 Thread 对象给这个 Runnable 接口。 在这里, 我们生成线程对象的名字，然后创建新的线程对象，最后保存统计数据
		@Override
		public Thread newThread(Runnable r) {
			Thread t = new Thread(r, name + "-Thread_" + counter);
			counter++;

			stats.add(String.format("Created thread %d with name %s on %s\n", t.getId(), t.getName(), new Date()));
			return t;
		}

		//4、实现 getStatistics()方法 ，返回 String 对象， 全部的创建的 Thread 对象的统计数据
		public String getStats() {
			StringBuffer buffer = new StringBuffer();
			Iterator<String> it = stats.iterator();

			while(it.hasNext()) {
				buffer.append(it.next());
				buffer.append("\n");
			}

			return buffer.toString();
		}
	}

	//5、创建一个类名为 Task 一定实现 Runnable接口. 对于这个例子，这些任务什么都不做只是休眠一秒
	public class Task implements Runnable {

		@Override
		public void run() {
			try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	//6、创建主类. 创建一个类名为 Main 并实现main() 方法
	public class Main {

		public static void main(String[] args) {
			//7、创建 MyThreadFactory 对象和 Task 对象
			MyThreadFactory factory = new MyThreadFactory("MyThreadFactory");
			Task task = new Task();
			//8、使用 MyThreadFactory 对象创建 5Thread 对象并开始它们
			Thread thread;
			System.out.printf("Starting the Threads\n");
			for (int i = 0; i < 5; i++) {
				thread = factory.newThread(task);
				thread.start();
			}
			//9、把线程厂的数据写入控制台
			System.out.printf("Factory stats:\n");
			System.out.printf("%s\n", factory.getStats());

		}
	}

``ThreadFactory`` 接口只有一个方法是 ``newThread`` 。它接收 ``Runnable`` 对象作为参数并返回一个 ``Thread`` 对象。当你实现一个 ``ThreadFactory`` 接口，你必须实现此接口并覆盖这个方法。最基本的 ``ThreadFactory`` 只有一行。

.. code-block:: java

    return new Thread(r);

你可以加一些变量来提升这个实现：

- 在这个例子中创建自定义线程，名字使用特别形式或者继承Java Thread类来创建自己的 ``Thread`` 类。
- 保存线程创建数据，如之前的例子。
- 限制线程创建个数。
- 验证线程的创建。
- 和你能想到的任何东西。

使用工厂设计模式是很好的练习，但是，如果你实现一个 ``ThreadFactory`` 接口来集中创建线程，那么你必须再检查代码确保使用的线程都是用这个工厂创建的。


