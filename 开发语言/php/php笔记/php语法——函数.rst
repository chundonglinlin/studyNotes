*****
PHP函数
*****

PHP函数
=====
函数就是有一定功能的一些语句组织在一起的一种形式，定义函数的目的则是将程序按照功能分块，方便程序使用，管理，阅读和调试。

函数有两种：

- 一种是别人写好的或者系统内部提供的函数；
- 另一种是自己定义的函数，用来实现自己独特的需求。

PHP的模块化程序结构是通过函数或对象来实现的，函数则是将复杂的PHP程序分为若干的功能模块，每个模块都变成一个PHP函数，然后通过在脚本中调用函数，以及在函数中调用函数来实现一些大型文体的PHP脚本编写。

- 提高程序的重用性
- 提高软件的可维护性
- 提高软件的开发效率
- 提高软件的可靠性
- 控制程序设计的复杂性

定义和调用函数
-------
函数的定义
^^^^^
函数是一个被命名的、独立的代码段，它执行特定的任务，并可能给调用它的程序返回一个值。该定义中的各部分如下：

- 函数是被命名的：每一个函数都有唯一的名称，在程序的其他部分使用该名称，可以执行函数中的语句，叫做----调用函数
- 函数是独立的：无需程序其它部分的干预，函数便能够独立的执行其任务
- 函数执行特定的任务：任务是程序运行所执行的具体工作
- 函数可以讲一个返回值返回给调用他的程序：程序调用函数时候，将执行函数中的语句，而这些语句可以讲信息返回给调用它们的程序。

.. code-block:: php

    function 函数名 ([参数1, 参数2, ..., 参数n]) // 函数头
	{
	        函数体; // 任何有效的PHP代码都可以作为函数体使用
	        return 返回值; // 可以从函数中返回一个值
	}

- 每个函数的第一行都是函数头，由声明函数的关键字 function 、函数名 和 参数列表 三部分组成，其中每一部分完成特定的功能。
- 每个自定义函数都必须使用 “function”关键字声明。
- 函数名可以代表整个函数，可以将函数，命名为任何名称，只要遵循变量名的命名规则即可。每个函数都有唯一的名称，但需要注意的是，PHP中不能使用函数的重载。所以函数不能重名（包括系统函数）。
- 声明函数是函数名后面的花括号必须有，在花括号中表明了一组可以接受的参数列表，参数就是声明的变量，然后在调用函数时候传递给他值，参数列表可以没有，可以有一个或多个参数，多个参数用逗号（,）分开。
- 函数体位于函数头后面，用{   }  花括号括起来。实际的工作实在函数体重完成，函数被调用后首先执行函数体重第一条语句，执行到 return 或者{  }花括号后结束，返回到调用的程序。
- 关键字 return 可以从函数中返回一个值 ，在return 后面加一个表达式，程序执行到return时，该表达式将被计算，然后返回到调用程序出继续执行。函数的返回值为该表达式的值。

函数的调用
^^^^^
函数不被调用就不会执行，在需要函数的位置进行调用，就开始执行函数体中的内容，执行完毕返回到调用的位置继续向下执行。函数名称在程序中有三个作用：

- 通过函数名称去调用函数，并让函数体的代码运行，调用几次函数体就会执行几次。
- 如果函数有参数列表，还可以通过函数名后面的圆括号传入对应的值给参数，在函数体中使用参数来改变函数内部代码的执行行为。
- 如果函数有返回值，当函数执行完毕就会将return后面的内容传给调用函数的位置没这样就可以吧函数名称当做函数返回的值使用。

**只要函数定义在脚本中可见，不管在函数定义前或者后都可进行调用。**

在函数间传递参数
--------
在调用函数时，需要向函数传递参数，被传入的参数称为实参，而函数定义时的参数为形参。函数间参数传递的方式有按值传递、按引用传递和默认参数3种方式。

按值传递方式
^^^^^^^^^^^
将实参的值赋值到对应的形参中，在函数内部的操作针对形参进行，操作的结果不会影响到实参，即函数返回后，实参的值不会改变。

.. code-block:: php

    <?php
		function exam($var1){
		        $var1++;
		echo "In Exam:" . $var1 . "<br />"; 
		}

		$var1 = 1;
		echo $var1 . "<br />"; // 输出 1
		exam($var1); // 输出 In Exam: 2
		echo $var1 . "<br />";  // 输出 1
    ?>

按引用传递方式
^^^^^^^^^^^^^
按引用传递就是将实参的内存地址传递给形参。这时，在函数内部所有对形参的操作都会影响到实参的值。函数返回后，实参的值会发生变化。引用传递方式就是函数定义时在形参前加“&”符号即可。

.. code-block:: php

    <?php
		function exam( &$var1){
		        $var1++;
		echo "In Exam:" . $var1 . "<br />";
		}

		$var1 = 1;
		echo $var1 . "<br />"; // 输出 1
		exam($var1); // 输出 In Exam: 2
		echo $var1 . "<br />"; // 输出 1
    ?>

默认参数(可选参数)
^^^^^^^^^^^^^^^^^
还有一种设置参数的方式，即可选参数。可以指定某个参数为可选参数，将可选参数放在参数列表末尾，并且指定其默认值为空。

应用一个例子使用可选参数实现一个简单的价格计算功能。设置自定义函数 values 的参数 $tax 为可选参数，其默认值为空。 第一次调用该函数，并且给参数 $tax 赋值，输出价格；第二次调用该函数，不给参数复制，输出价格。

.. code-block:: php

    <?php
		function value($price, $tax=""){     //定义一个函数，第二个参数为空
		        $price = $price*$tax;
		        echo "价格：$price<br>";   //输出价格
		}
		value(10,5);            // 为可选参数赋值5，输出 50
		value(10);              // 没有给可选参数赋值，输出0
	?>

.. note:: 
	- 默认值必须是常量表达式，不是变量，类成员，或者函数调用；
	- 当使用默认参数时，任何默认参数必须放在任何非默认参数的右侧；
	- 从PHP5开始，默认值也可以通过引用传递；

可变长度参数列表
^^^^^^^^
使用默认参数适合实参个数少于形参的情况，而可变参数列表则适合实参个数多于形参的情况。如果在函数中使用不到多传入的参数则没有意义。通常用户定义函数时，设置的参数数量是有限的。如果希望函数可以接受任意数量的参数，需要在函数中使用PHP系统提供的func_get_arags()函数，它将所有传递给脚本函数的参数当做一个数组返回。

格式说明：

``mixed funName(string arg1 [,string...])``

使用默认参数函数适合实参个数少于形参的情况，而可变长度参数函数则适合实参个数多于形参的情况。

- 如果希望函数可以接受任意数量的参数，需要在函数中使用PHP系统提供的func_get_args()函数，它将所有传递个脚本函数的参数当作一个数组返回。
- 获取所有传入的参数：func_get_args();
- 获取所有传入参数的个数：    func_num_args();
- 单独获取指定的参数：    func_get_arg(n);

.. code-block:: php

    <?php

		//可变长度参数函数：传入的参数个数是不确定的
		function show()
		{
		        //获取所有传入的参数,并将其转为一个数组返回
		        $arr = func_get_args();

		        //输出的$arr为数组  
		        print_r($arr);

		        //获取所有传入参数的个数
		        echo func_num_args();

		        //单独获取指定的参数，需要传入参数的顺序号，从0开始
		        echo func_get_arg(3);
		}
		show('a','n','x','y','z');

		function getInfo(){
		        $num = func_num_args();
		        for($i = 0;$i < $num;$i++){
		                echo func_get_arg($i).'<br>';
		        }
		}
		getInfo('姓名：小二','年龄：18','aihao:nvkeguan','teshuaihao:hejiu');
	?>

从函数中返回值
-------
由于变量作用域的差异，调用函数的脚本程序不能直接使用函数体里面的信息，但可以通过关键字return向调用者传递数据。return语句在函数体中作用是将函数的值返回给函数的调用者，即将程序控制权返回到调用者的作用域。如果在全局作用域内使用return关键字，那么将终止脚本的执行。

变量函数
----
PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。

可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数。

.. code-block:: php

    <?php
		function one($a, $b) {
		        return $a + $b;
		}

		function two($a, $b) {
		        return $a*$a + $b*$b;
		}

		function three($a, $b) {
		        return $a*$a*$a + $b*$b*$b;
		}

		$result = "one";
		// $result = "two";
		// $result = "three";
		echo "计算结果：".$result(2,3); 
    ?>


对函数的引用
------
前面函数间参数传递中的按引用传递的方式可以修改实参饿内容。引用不仅可用于普通变量、函数参数，也可作用于函数本身。对函数的引用，就是对函数返回结果的引用。

.. code-block:: php

    <?php
		function &example($tmp=0) {
		        return $tmp;
		}
		$str = &example("看到了");
		echo $str."<br/>"; // 输出$str
    ?>

.. note:: 和参数引用不同，对函数的引用必须在两个地方都是用“&”符，用来说明返回的是一个引用。

取消引用
-------
当不在需要引用时，可以取消引用。取消引用使用unset()函数，它只是断开了变量名和变量内容之间的绑定，而不是销毁变量内容。

.. code-block:: php

    <?php
		$num = 1234;
		$math = &$num;
		echo $math;
		print PHP_EOL;
		unset($math);
		echo $math; // 出现错误
		print PHP_EOL;
		echo $num;
    ?>

使用自定义函数库
==============
函数库并不是定义函数的php 语法，而是编程时的一种设计模式。函数是结构化程序设计的模块，是实现代码重用的核心。为了更好的组织代码，是自定义的函数可以在同一个项目的多个文件中使用，通常将多个自定义的函数组织到同一个文件或多个文件中。这些收集函数定义的文件就是创建PHP函数库。如果在PHP脚本中想使用这些文件中定义的函数，就需要使用 include()、include_once()、require()和 require_once() 中的一个函数，将函数库文件载入脚本程序中。

include() 和 require()比较
--------------------------
require() 语句的性能与 include()，都是包括并运行指定文件。不同之处在于，对 include()语句来说，在执行文件时每次都要进行读取和评估；而对于 require() 语句来说，文件只处理一次（实际上，文件内容替换了 require() 语句）。 **这就意味着如果有可能执行多次的代码，则使用 require()效率比较高。另一方面，如果每次执行代码时是读取不同的文件，或者有通过一组文件迭代的循环，就使用include()语句。**

require() 语句的使用方法如 require(" file.php ") , 这条语句通常放在 php脚本文件的一部分。 include()语句的使用方法和 require() 语句是一样的，如 include(" file.php ")。而这条语句一般放在流程控制的处理区段中。php脚本文件在读到 require() 语句，才将它包含的文件读进来。采用这种方式，可以把程序执行时的流程简单化。

其代码实例如下所示：

.. code-block:: php

    <?php
	 require "config.php";      //使用 require 语句包含执行 config.php文件
	 if($condition){
	         include "file.txt";      //使用include 语句包含并执行 file.txt文件
	 }else{
	         include ("other.php");   // 使用include 语句包含并执行 other.php文件
	 }
	 require("somefile.txt");   // 使用require 语句包含执行 somefile.php文件
	?>

require()和include()语句是语言结构，不是真正的函数，可以像PHP中其它语言结构一样。例如echo()可以使用 echo("abc")形式，也可以使用 echo "abc" 形式输出字符串 abc。 include() 和 require() 语句也可以不加圆括号而直接加参数，例如 include 语句可以使用 include(“file.php”)包含 file.php文件，也可以使用 include "file.php" 形式。

include_once() 和 require_once() 语句也是在脚本执行期间包含并运行指定文件。此行为和 include()及require() 语句类似，使用方法也一样。唯一区别是如果该文件中的代码已经被包括了。则不会再次包括。这两条语句应该用于在脚本执行期间，同一个文件有可能被包括超过一次的情况下，确保被包括一次，以避免函数重新定义及重新赋值等问题。


PHP提供了两种包含外部文件的方法：require()和include()都属于服务器端引用（Server Side Includes）中的常用方法。

- require 的使用方法如 require("MyRequireFile.php"); 。这个函数通常放在 PHP 程序的最前面，PHP 程序在执行前，就会先读入 require 所指定引入的文件，使它变成 PHP 程序网页的一部份。常用的函数，亦可以这个方法将它引入网页中。require包含文件的时候是绝对的包含，如果被包含的文件不存在那么会产生一个致命错误(fatal error)，在错误发生后下面的脚本程序将不会执行，此外,因为require语句相当于将另一个源文件的内容完全复制到本文件中，所以一般将其放在源文件的起始位置，用于引用需要使用的公共函数文件和公共类文件等。

- include 使用方法如 include("MyIncludeFile.php"); 。这个函数一般是放在流程控制的处理部分中。PHP 程序网页在读到 include 的文件时，才将它读进来。这种方式，可以把程序执行时的流程简单化。include的包含文件是相对的，如果被包含文件不存在，那么会产生一个warning警告，但是下面的脚本程序继续执行，此外， include包含的文件一般写在程序执行中。

include()和require()的区别
-------------------------
include()和require()的区别 这相信是PHP中最基本的问题了，这两个的用途是完全一样的，不一定非得哪个放在最前面哪个放在中间。他们最根本的区别在于错误处理的方式不一样。

- require() :如果文件不存在，会报出一个fatal error.脚本停止执行
- include() : 如果文件不存在，会给出一个warning，但脚本会继续执行

php的require()性能与include()相类似。不同之处在于，对include()来说，在 include()执行时文件每次都要进行读取和评估；而对于require()来说，文件只处理一次（实际上，文件内容替换了require()语 句）。这就意味着如果有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高。另一方面，如果每次执行代码时相读取不同的文 件，或者有通过一组文件叠代的循环，就使用include(),因为可以给想要包括的文件名设置一个变量，当参数为include()时使用这个变量。

其他一些联系与区别的补充

1. include有返回值，而require没有。

2. include()包括并运行指定文件 在处理失败时include() 产生一个警告,被导入的程序代码都会被执行，而且这些程序在执行的时候会拥有和源文件中呼叫到include()语句的位置相同的变量范围。你可以导入同一个服务器中的静态页面。

3. include_once()的作用和include()是几乎相同的

唯一的差别在于include_once()会先检查要导入的档案是不是已经在该程序中的其它地方被导入过了，如果有的话就不会再次重复导入（这项功能有时候是很重要的，比方说要导入的里面宣告了一些你自行定义好的函数，那么如果在同一个程序重复导入这个文件，在第二次导入的时候便会发生错误讯息，因为PHP不允许相同名称的函数被重复宣告第二次）。

4. require()会将目标文件的内容读入，并且把自己本身代换成这些读入的内容 在处理失败时require() 则导致一个致命错。

5. 如同include_once()，require_once()会先检查目标文件的内容是不是在之前就已经导入过了，如果是的话，便不会再次重复导入同样的内容。

6. require是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require。


使用系统函数库
=============
PHP 有很多标准的函数和结构。还有一些函数需要和特定地 PHP 扩展模块一起编译，否则在使用它们的时候就会得到一个致命的”未定义函数”错误。例如，要使用 image 函数中的 imagecreatetruecolor()，需要在编译 PHP 的时候加上 GD 的支持。或者，要使用 mysql_connect() 函数，就需要在编译 PHP 的时候加上 MySQL 支持。有很多核心函数已包含在每个版本的 PHP 中如字符串和变量函数。调用 phpinfo() 或者 get_loaded_extensions() 可以得知 PHP 加载了那些扩展库。同时还应该注意，很多扩展库默认就是有效的。PHP 手册按照不同的扩展库组织了它们的文档。请参阅配置，安装以及各自的扩展库章节以获取有关如何设置 PHP 的信息。