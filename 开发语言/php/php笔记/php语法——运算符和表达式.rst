**********
PHP运算符和表达式
**********

PHP运算符
======

算术运算符
-----

+----------+--------+-------------+------------------+
| 运算类型 | 运算符 | 举例        | 结果             |
+==========+========+=============+==================+
| 取反运算 | ``-``  | -$a         | 返回$a的负值     |
+----------+--------+-------------+------------------+
| 加法运算 | ``+``  | $a + $b     | 返回$a与$b的和   |
+----------+--------+-------------+------------------+
| 减法运算 | ``-``  | $a - $b     | 返回$a与$b的差   |
+----------+--------+-------------+------------------+
| 乘法运算 | ``*``  | $a ``*`` $b | 返回$a与$b的积   |
+----------+--------+-------------+------------------+
| 除法运算 | ``/``  | $a / $b     | 返回$a与$b的商   |
+----------+--------+-------------+------------------+
| 取余运算 | ``%``  | $a % $b     | 返回$a与$b的余数 |
+----------+--------+-------------+------------------+
| 自增运算 | ``++`` | $a++、++$a  | $a的值加1        |
+----------+--------+-------------+------------------+
| 自减运算 | ``--`` | $a--、--$a  | $a的值减1        |
+----------+--------+-------------+------------------+

.. note:: 在算术运算符中使用%求余($a)是负数，那么取得的结果也是一个负值。

字符串运算符
------
在PHP中字符串运算符只有一个，是英文的句号(".")，也叫做连接运算符。是一个二元运算符，它返回其左右参数连接后的字符串。不仅可以连接两个字符串，而且也可以将一个字符串和任何标量数据类型相连接。

.. code-block:: php

    <?php
		$name = "Tom"; // 定义一个人的名字为字符串类型
		$age = 27; // 定义一个人的年龄为整型
		$height = 1.71; // 定义一个人的身高为浮点型

		// 将以上不同类型的变量使用点操作符和字符串连接起来，一起输出
		echo "我的名字是：".$name."，我的年龄是：".$age."，我的身高".$height."米。";
    ?>

赋值运算符
-----
赋值运算符“=”是PHP中最基本的运算符，即把“=”右边表达式的值赋给左边的运算数。

另外PHP中也常用到复合赋值运算符。

+----------+--------+---------+--------------------------+
| 运算类型 | 运算符 | 举例    | 结果                     |
+==========+========+=========+==========================+
| 加法赋值 | +=     | $a += 5 | $a 加 5 的和赋值给$a     |
+----------+--------+---------+--------------------------+
| 减法赋值 | -=     | $a -= 5 | $a 减 5 的差赋值给$a     |
+----------+--------+---------+--------------------------+
| 乘法赋值 | *=     | $a *= 5 | $a 乘以 5 的积赋值给$a   |
+----------+--------+---------+--------------------------+
| 除法赋值 | /=     | $a /= 5 | $a 除以 5 的商赋值给$a   |
+----------+--------+---------+--------------------------+
| 取余赋值 | %=     | $a %= 5 | $a 除以 5 的余数赋值给$a |
+----------+--------+---------+--------------------------+

位运算符
----
位逻辑运算符是指对二进制位从低位到高位对齐之后进行运算。

+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| 例子     | 名称                                                        | 结果                                                                                                                                          |
+==========+=============================================================+===============================================================================================================================================+
| $a & $b  | And（按位与）                                               | 将把 $a 和 $b 中都为 1的位设为 1。                                                                                                            |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $a \| $b | Or（按位或）                                                | 将把 $a 和 $b 中任何一个为 1的位设为 1。                                                                                                      |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $a ^ $b  | Xor（按位异或）                                             | 将把 $a 和$ b 中一个为 1另一个为 0 的位设为 1。                                                                                               |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| ~ $a     | Not（按取位反）                                             | 将 $a 中为 0的位设为 1，反之亦然。                                                                                                            |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $a << $b | Shift left（左移）                                          | 将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。                                                                                      |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $a >> $b | Shift right（右移）                                         | 将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”，若不是整除则则为比值小的最近一个整数，如值为-4.12结果为-5；如值为4.23/0.5 结果为4/0）。 |
+----------+-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+

逻辑运算符
-----

+----------+------------+------------------------+--------------------------------------------+
| 运算类型 | 运算符     | 举例                   | 结果                                       |
+==========+============+========================+============================================+
| 逻辑与   | && 或 and  | $a && $b 或 $a and $b  | 当$a 和 $b 均为真时，返回真，否则返回假    |
+----------+------------+------------------------+--------------------------------------------+
| 逻辑或   | \|\| 或 or | $a \|\| $b 或 $a or $b | 当$a 或 $b 为真时，返回真，否则返回假      |
+----------+------------+------------------------+--------------------------------------------+
| 逻辑异或 | xor        | $a xor $b              | 当$a真$b假或$a假$b真时，返回真，否则返回假 |
+----------+------------+------------------------+--------------------------------------------+
| 逻辑非   | !          | !$a                    | 当$a为假时，返回真，否则返回假             |
+----------+------------+------------------------+--------------------------------------------+

其中属于同一个逻辑结构的两个运算符号(&&和and)之间却有着不同的优先级。

.. code-block:: php

    <?php
		$i = true;
		$j = true;
		$z = false;
		if($i or $j and $z)
		        echo "true";
		else
		        echo "false";

		print PHP_EOL;

		if($i || $j and $z)
		        echo "true";
		else
		        echo "false";

		// 结果为：true false
    ?>

比较运算符
-----

+----------+--------+----------------------+-----------------------------------------------------------------------+
| 运算类型 | 运算符 | 举例                 | 结果                                                                  |
+==========+========+======================+=======================================================================+
| 小于     | <      | $a < $b              | 当 $a 的值小于 $b 的值，则返回真，否则返回假                          |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 大于     | >      | $a > $b              | 当 $a 的值大于 $b 的值，则返回真，否则返回假                          |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 小于等于 | <=     | $a <= $b             | 当 $a 的值小于等于 $b 的值，则返回真，否则返回假                      |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 大于等于 | >=     | $a >= $b             | 当 $a 的值大于等于 $b 的值，则返回真，否则返回假                      |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 相等     | ==     | $a == $b             | 当 $a 的值等于 $b 的值，则返回真，否则返回假                          |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 全等     | ===    | $a === $b            | 当 $a 的值等于 $b 的值，且 $a 与 $b的类型也相等，则返回真，否则返回假 |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 不相等   | !=     | $a != $b 或 $a <> $b | 当 $a 的值等于 $b 的值，则返回假，否则返回真                          |
+----------+--------+----------------------+-----------------------------------------------------------------------+
| 不全等   | !==    | $a !== $b            | 当 $a 的值等于 $b 的值，且$a 与 $b 的类型也相等，则返回假，否则返回真 |
+----------+--------+----------------------+-----------------------------------------------------------------------+

错误控制运算符
-------
PHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；

如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。

需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。

三元运算符
-----
PHP 三元运算符是对参数赋值时候的一个简洁的主要用法. 一个主要的用法: PHP 三元运算符能够让你在一行代码中描述判定代码, 从而替换掉类似以下的代码:

.. code-block:: php

    <?php
		if (isset($value)) {
		    $output = $value;
		} else {
		    $output = 'No value set.';
		}
    ?>

使用以下代码替代:

.. code-block:: php

    <?php
		$output = isset($value) ? $value : 'No value set.';
    ?>

问题是: 以上的例子很常用同时也重复的有些烦人: 写两次 $value 就像是感到错误一样.

好在是, 在PHP 5.3中介绍了一个更简洁的使用三元运算符的语法。

.. code-block:: php

    <?php
		$output = $value ?: 'No value set.';
    ?>

运算符的优先顺序和结合规则
-------------
PHP运算符在运算中遵循的规则是：优先级高的操作先执行，优先级低的操作后执行，同一优先级的操作按照从左到右的顺序进行。也可以像四则运算那样使用小括号，括号内的运算最先执行。

+----------+---------------------------------------------------------+-------------------------+
| 结合性   | 运算符                                                  | 额外信息                |
+==========+=========================================================+=========================+
| 无结合性 | clone new                                               | 克隆和new               |
+----------+---------------------------------------------------------+-------------------------+
| 左       | [                                                       | 数组                    |
+----------+---------------------------------------------------------+-------------------------+
| 左       | \*\*                                                    | 算术                    |
+----------+---------------------------------------------------------+-------------------------+
| 右       | ++ — ~ (int) (float) (string) (array) (object) (bool) @ | 类型和自增/自减         |
+----------+---------------------------------------------------------+-------------------------+
| 无结合性 | instanceof                                              | 类型                    |
+----------+---------------------------------------------------------+-------------------------+
| 右       | !                                                       | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | \* / %                                                  | 算术                    |
+----------+---------------------------------------------------------+-------------------------+
| 左       | \+ – .                                                  | 算术和字符串            |
+----------+---------------------------------------------------------+-------------------------+
| 左       | << >>                                                   | 按位运算                |
+----------+---------------------------------------------------------+-------------------------+
| 无结合性 | < <= > >=                                               | 比较运算                |
+----------+---------------------------------------------------------+-------------------------+
| 无结合性 | == != === !== <>                                        | 比较运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | &                                                       | 按位运算和引用          |
+----------+---------------------------------------------------------+-------------------------+
| 左       | ^                                                       | 按位运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | \|                                                      | 按位运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | &&                                                      | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | \|\|                                                    | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | ?:                                                      | 三元条件选择            |
+----------+---------------------------------------------------------+-------------------------+
| 右       | = += -= \*= /= .= %= &=                                 | = ^= <<= >>= => \| 赋值 |
+----------+---------------------------------------------------------+-------------------------+
| 左       | and                                                     | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | xor                                                     | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | or                                                      | 逻辑运算                |
+----------+---------------------------------------------------------+-------------------------+
| 左       | ,                                                       | 很多使用                |
+----------+---------------------------------------------------------+-------------------------+

通过这个表, 我们可以看到 ``and/&&`` 和 ``or/||`` 这两组运算符的优先级竟然是不一样的. ``and`` 和 ``or`` 的优先级是低于 ``=`` 的。

慎重使用 ``and`` , ``or`` 和 ``xor`` 的逻辑运算符, 避免和赋值号以及 ``&&`` 和 ``||`` 一起用, 以免发生不必要的逻辑错误。

.. note:: instanceof操作符检查三件事情：实例是否某个特定的类型，实例是否从某个特定的类型继承，实例或者他的任何祖先类是否实现了特定的接口。

作用：（1）判断一个对象是否是某个类的实例，（2）判断一个对象是否实现了某个接口。

第一种用法：

.. code-block:: php

    <?php
	$obj = new A();
	if ($obj instanceof A) {
	  echo 'A';
	}
    ?>

第二种用法：

.. code-block:: php

    <?php
	interface ExampleInterface
	{
	   public function interfaceMethod();
	 }
	 class ExampleClass implements ExampleInterface
	{
	   public function interfaceMethod()
	   {
	     return 'Hello World!';
	   }
	 }
	$exampleInstance = new ExampleClass();
	 if($exampleInstance instanceof ExampleInterface){
	   echo 'Yes, it is';
	 }else{
	   echo 'No, it is not';
	}//输出 Yes, it is
    ?>

另外，需注意 instanceof 与 is_subclass_of() 的区别，请看代码：

.. code-block:: php

    <?php
	class Foo {
	   public $foobar = 'Foo';
	   public function test() {
	     echo $this->foobar . "\n";
	   }
	 }
	 class Bar extends Foo {
	   public $foobar = 'Bar';
	 }
	$a = new Foo();
	$b = new Bar();
	echo "use of test() method\n";
	$a->test();
	$b->test();
	echo "instanceof Foo\n";
	var_dump($a instanceof Foo); // TRUE
	var_dump($b instanceof Foo); // TRUE
	echo "instanceof Bar\n";
	var_dump($a instanceof Bar); // FALSE
	var_dump($b instanceof Bar); // TRUE
	echo "subclass of Foo\n";
	var_dump(is_subclass_of($a, 'Foo')); // FALSE
	var_dump(is_subclass_of($b, 'Foo')); // TRUE
	echo "subclass of Bar\n";
	var_dump(is_subclass_of($a, 'Bar')); // FALSE
	var_dump(is_subclass_of($b, 'Bar')); // FALSE
    ?>

PHP表达式
======
表达式是PHP中一个重要的概念，可以把表达式理解为“任何有值的东西”。在本教程中涉及到表达式的语法，我们以“expr”来表示表达式。
下面就是一个表达式：
``$x > $y;``
在上面的例子中，当$x的值大于$y时，该表达式值为TRUE，否则为FALSE。
我们经常通过判断一个表达式的值（包括具体数值和布尔值）来确定我们下一步的逻辑，如下面个例子：

.. code-block:: php

    <?php
		if ($x > $y) {
			echo "x > y";
		}
	?>

该例子采用了 if 逻辑判断，判断条件就是括号中的 $x > $y 表达式，如果 $x > $y 成立（为TRUE），那么就输出“y > x”字样。


