*******
PHP语言基础
*******
PHP标记风格
=======
PHP一共支持4种标记风格：

1. XML风格

.. code-block:: php

	<?php
		echo "这是XML风格的标记"
	?>

2. 脚本风格

.. code-block:: php

    <script language="php">
       echo "这是脚本风格的标记";
    </script>

3. 简短风格

.. code-block:: php

    <? echo "这是简短风格的标记"; ?>

4. ASP风格

.. code-block:: php

    <%
        echo '这是ASP风格的标记';
    %>

.. note::

	如果要使用简短风格和ASP风格，需要在php.ini中对其进行设置，把 ``short_open_tag`` 和 ``asp_tags`` 都设置为ON。

PHP注释的应用
========
PHP支持3中风格的注释：
1. C++风格的单行注释(//)

.. code-block:: php

    <?php 
        echo '使用C++风格'; // 这就是C++风格
    ?>

2. C风格的多行注释(/*...*/)

.. code-block:: php

    <?php 
        /*
          C风格的多行注释
         */
        echo '只会看到这句话';
    ?>

.. note:: 多行注释是不允许进行嵌套操作的。

3. Shell风格的注释(#)

.. code-block:: php

    <?php
       echo '这是shell脚本风格的注释'; # 这里的内容是看不到的
    ?>

.. note:: 在单行注释中的内容不要出现"?>"标志，因为解释器会认为PHP脚本结束，而去执行"?>"后面的代码。

PHP数据类型
=======
PHP一共支持8种原始类型，包括4种标量类型(boolean、integer、float/double、string)和两种复合类型(array、object)以及两种特殊类型(resource、null)。

标量数据类型
------
标量数据类型是数据结构最基础的单元，只能存储一个数据。在 PHP 中的标量数据类型分为四种：

+-------------------+------------------------------------------------------+
| 类型              | 功能                                                 |
+===================+======================================================+
| boolean（布尔型） | 最简单的数据类型，只有两个值：true(真) / false(假)   |
+-------------------+------------------------------------------------------+
| string（字符串）  | 字符串是连续的字符序列                               |
+-------------------+------------------------------------------------------+
| integer（整型）   | 整型数据类型包含所有的整数，其可以是整数也可以是负数 |
+-------------------+------------------------------------------------------+
| float（浮点型）   | 浮点型数据类型也是用来存储数字，与整型不同它包含小数 |
+-------------------+------------------------------------------------------+

布尔型（boolean）
^^^^^^^^^^^^^^^
布尔型是 PHP 中较为常用的数据类型之一，它保存一个真值（true） 或 假值（false）,其中 ``true`` 和 ``false`` 是PHP的内部关键字。设定一个布尔型的变量，只需将true或者false赋值给变量即可。

.. code-block:: php

    <?php
       $boo = true; // 声明一个boolean类型变量，赋初值为true
       if($boo == true)  // 判断变量$boo是否为真
           echo '变量$boo为真!'; // 为真，则输出
       else
           echo '变量$boo为假!'; // 为假，则输出
    ?>

.. note:: 在PHP中不是只有boolean值为假，在一些特殊情况下非boolean值也被认为是假的。这些特殊情况为：0、0.0、"0"、空白字符串("")、只声明没有赋值的数组等。

字符串（string）
^^^^^^^^^^^^^^

字符串是连续的字符序列，由数字、字母、符号组成，字符串的每个字符只占一个字节。字符包含以下几种类型

+------------+---------------------------------------------------------------+
| 字符类型名 | 内容                                                          |
+============+===============================================================+
| 数字类型   | 如：1、2、3等                                                 |
+------------+---------------------------------------------------------------+
| 字母类型   | 如：a、b、c等                                                 |
+------------+---------------------------------------------------------------+
| 特殊类型   | 如：#、$、^、&等                                              |
+------------+---------------------------------------------------------------+
| 不可见类型 | 如： ``\n`` (换行符)、 ``\r`` （回车）、 ``\t`` （tab字符）等 |
+------------+---------------------------------------------------------------+

在 PHP 中有 3 种定义字符串的方式：

- 单引号('')

- 双引号("")

- 界定符(<<<)

1. 单引号定义

将字符串用单引号（'）括起来是定义字符串最简单的方法：

.. code-block:: php

    <?php
        $var_char = '码农教程';
    ?>

如果字符串中有单引号，那么需要使用反斜线（\\）进行转义，由此可见反斜线在单引号字符串中是 **元字符** ，输出本身是需要转义的：

.. code-block:: php

    <?php
        $var_char = '字符串中包含\'需要转义';
        echo $var_char;     //输出：字符串中包含'需要转义
    ?>

.. note:: 如果在单引号之前或字符串结尾需要出现一个反斜线，需要用两个反斜线表示。换言之反斜线在此只转义 ' 字符而不会转义其他字符。

如果只是定义一个简单的字符串而不需要解析更多的内容，显然用单引号效率更高。

2. 双引号定义

如果用双引号（""）定义字符串，PHP 懂得更多特殊字符的转义序列：

+------------------------+--------------------------------------------------+
| 转义序列               | 说明                                             |
+========================+==================================================+
| ``\n``                 | 换行                                             |
+------------------------+--------------------------------------------------+
| ``\r``                 | 回车                                             |
+------------------------+--------------------------------------------------+
| ``\t``                 | 水平制表符                                       |
+------------------------+--------------------------------------------------+
| ``\``                  | 反斜线                                           |
+------------------------+--------------------------------------------------+
| ``\$``                 | 美元符号                                         |
+------------------------+--------------------------------------------------+
| ``\"``                 | 双引号                                           |
+------------------------+--------------------------------------------------+
| ``\[0-7]{1,3}``        | 此正则表达式序列匹配一个用八进制符号表示的字符   |
+------------------------+--------------------------------------------------+
| ``\x[0-9A-Fa-f]{1,2}`` | 此正则表达式序列匹配一个用十六进制符号表示的字符 |
+------------------------+--------------------------------------------------+

.. code-block:: php

    <?php
        $var_char = "这里有个换行\n这是第二行文字";
    ?>

注意该例子中的换行是指文本意义上换行，如果需要在浏览器里显示换行，需要用 nl2br() 函数将 ``\n`` 替换成 <br />。

双引号字符串最重要的一点是其中的变量名会被变量值解析替代。如果遇到美元符号($)，解析器会尽可能多地取得后面的字符以组成一个合法的变量名。如果想明示指定名字的结束，用花括号把变量名括起来。

.. code-block:: php

   <?php
        $var_char = "这是一些文字";
        echo "请打印这些文字：$var_char";   //输出：请打印这些文字：这是一些文字
        $beer = 'Heineken';
        echo "He drank some ${beer}s";
        echo "He drank some {$beer}s"; // 两种类型都可以
   ?>


3. 定界符定义

定界符定义字符串是使用定界符语法（<<<），并在定界符之后提供一个标识符，然后是被定义的字符串，最后是同样的标识符结束字符串定义。

.. code-block:: php

    <?php
       $str = <<<EOD
       我是用定界符定义字符串的例子
       这是其他更多字符
       ……
    EOD;
    ?>

该例子中，EOD 就是标识符。结束标识符必须从行的第一列开始。同样，标识符也必须遵循 PHP 中其它任何标签的命名规则：只能包含字母数字下划线，而且必须以下划线或非数字字符开始。

注意：结束标识符所在的行不能有任何其他字符（可能除了一个分号 ; 之外），包括行缩进等。

双引号和单引号定义字符串区别是，双引号中所包含的变量会自动被替换成实际数值，而单引号中包含的变量则按普通字符串输出。

整型（integer）
^^^^^^^^^^^^^^
整型数据类型只能包含整数，在 32 位的操作系统中，有效范围是： -2147483648（2的31次方） ~ 217483647 (2的31次方-1)。整型可以使用十进制、八进制和十六进制表示，如：八进制（数字前面必须加0）、十六进制（数字前面必须加0x）

.. code-block:: php

    <?php 
       $int1 = 1234;
       $int2 = 01234;
       $int3 = 0x1234;

       echo "十进制的结果是：{$int1}<br>";
       echo "八进制的结果是：{$int2}<br>";
       echo "十六进制的结果是：{$int3}<br>";

      结果
      十进制的结果是：1234
      八进制的结果是：668
      十六进制的结果是：4660

    ?>

.. note:: 如果给定的数值超出了 int 型所能表示的最大范围，将会被当作 float 型处理，这种情况叫做：整型溢出。表达式最后的运算结果超出 int 范围，也会返回 float 型。

浮点型（float）
^^^^^^^^^^^^^

浮点型数据类型可以用来存储整数，也可以保存小数。它提供的精度比整数大得多。 在32系统中有效范围： 1.7E-308 ~ 1.7E+308。

在 PHP 4.0 之前的版本 浮点型被标识为 double，也叫双精度浮点数，两者没什么区别

.. code-block:: php

    <?php
         // 定义
         $a = 1.036;
         $b = 2.035;
         $c = 3.48E2; // En代表10*n, E1 代表 * 10, $c = 348

         echo $c;
         结果：348
    ?>

复合数据类型
------
复合数据类型包括两种，即数组和对象：

+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 类型         | 说明                                                                                                                                                                                                                                   |
+==============+========================================================================================================================================================================================================================================+
| array(数组)  | 是一个数据集合，可以包括多种数据：标量数据、数组、对象、资源、及PHP中支持的其他语法结构。数组中每个数据成为一个元素，元素包括索引（键名）和值两部分。元素索引只能有数字或字符串组成。元素值可以是多种数据类型。数组索引自动编号从0开始 |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| object(对象) | 对象是类的实例，使用new命令来创建                                                                                                                                                                                                      |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

1. 数组

数组是一组数据的集合，他把一系列数据组成起来，形成一个可以操作的整体。数组中可以包括很多数据，例如：标量数据、数组，对象、资源以及 PHP支持的其他数据类型。

元素：数组成每一个数据成为元素；索引：每一个元素对应的唯一编码。索引只能由 **数字或字符串** 组成。

key 可以是 integer 或者 string。value 可以是任意类型。
此外 key 会有如下的强制转换：

- 包含有合法整型值的字符串会被转换为整型。例如键名 "8" 实际会被储存为 8。但是 "08" 则不会强制转换，因为其不是一个合法的十进制数值。
- 浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。
- 布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。
- Null 会被转换为空字符串，即键名 null 实际会被储存为 ""。
- 数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。
- 如果在数组定义中多个单元都使用了同一个键名，则只使用了最后一个，之前的都被覆盖了。

PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。此类型在很多方面做了优化，因此可以把它当成真正的数组，或列表（向量），散列表（是映射的一种实现），字典，集合，栈，队列以及更多可能性。由于数组元素的值也可以是另一个数组，树形结构和多维数组也是允许的。
一般来说定义方法如下面几种：

定义数组的语法格式如下：

- $array = array('value1','value2',....)
- $array[key] = 'value'
- $array = array(key1=>value1,key2=value2,...)
- $array = [key1=>value1,key2=value2,....] // php5.4以后支持

2. 对象
 
在编程语言中用到的方法有：面向对象 和 面向过程。在PHP中，用户可以自由使用这两种方法。在PHP中可以自由使用这两种方式。

特殊数据类型
------
特殊数据类型包括资源和空值两种：

+----------------+------------------------------------------------------------------------------------------------+
| 类型           | 说明                                                                                           |
+================+================================================================================================+
| resource(资源) | 资源是一种特殊变量，又叫做句柄，保存到外部资源的一个引用。资源是通过专门的函数来建立和使用的。 |
+----------------+------------------------------------------------------------------------------------------------+
| null(空值)     | 特殊的值，表示变量没有值，唯一的值就是null。                                                   |
+----------------+------------------------------------------------------------------------------------------------+

1. 资源（resource）

资源是由专门的函数来建立和使用的，它是一种特殊的数据类型，并由程序员分配。在使用资源时，要及时的释放不需要的资源，如果忘记释放资源，系统自动启动垃圾回收机制，避免内存消耗殆尽。

2. 空值(null)

控制顾名思义，表示没有为该变量设置任何值。另外，空值（null）不区分大小写，null 和 NULL 效果是一样的。下面是三种空值情况：

- 没有赋值
- 被赋值为 null
- 被 unset() 函数处理过的变量

.. code-block:: php

    <?php 
        $a;// 没有赋值的变量
        $b = null; // 被赋值为 null 的变量
        $c = 1;
        unset($c(); // 被 unset() 函数处理过的变量
    ?>

.. note:: is_null()函数用来判断变量是否为null，该函数返回一个boolean型，如果变量为null，则返回true，否则返回false。unset()函数用来销毁指定的变量。

.. note:: 从PHP4开始，unset()函数就不再有返回值，所以不要试图获取或输出unset()。

转换数据类型
------
类型转换格式为: ``（type）value``

+-------------------------+--------------+
| 类型关键字              | 类型转换     |
+=========================+==============+
| (int),(integer)         | 转换成整形   |
+-------------------------+--------------+
| (array)                 | 转换成数组   |
+-------------------------+--------------+
| (float),(double),(real) | 转换成浮点型 |
+-------------------------+--------------+
| (object)                | 转换成对象   |
+-------------------------+--------------+
| (bool),(boolean)        | 转换成布尔型 |
+-------------------------+--------------+
| (string)                | 转换成字符型 |
+-------------------------+--------------+

.. note:: 
   - 转换为boolean：null、0、未赋值的变量或数组会转换为false，其他为true
   - 转化为integer：boolean的false为0，true为1；float:小数部分被舍去；string:以数字开头则截取到非数字位，否则输出0。

PHP数据类型有三种转换方式
^^^^^^^^^^^^^^^^^^^^^^^
- 在要转换的变量之前加上用括号括起来的目标类型;

  .. code-block:: php

      <?php
           $num1=3.14;
           $num2=(int)$num1;
           var_dump($num1); //输出float(3.14)
           var_dump($num2); //输出int(3)
      ?>

- 使用3个具体类型的转换函数，intval()、floatval()、strval();

  .. code-block:: php

      <?php
           $str="123.9abc";
           $int=intval($str);     //转换后数值：123
           $float=floatval($str); //转换后数值：123.9
           $str=strval($float);   //转换后字符串："123.9"
      ?>

- 使用通用类型转换函数settype(mixed var,string type);

  通过函数 ``bool settpye（mixed var , string type）`` var为指定变量；type为要转换的类型。该参数有7个可选值，即boolean/float/integer/string/array/null/object。如果转换成功函数返回true，否则返回false。
  **settype会改变变量自身类型**

  .. code-block:: php

      <?php
           $num4=12.8;
           $flg=settype($num4,"int");
           var_dump($flg);  //输出bool(true)
           var_dump($num4); //输出int(12)，改变原始数据类型
      ?>

检测数据类型
------
PHP内置了检测数据类型的系列函数，可以对不同类型的数据进行检测，判断其是否属于某个类型，如果符合则返回true，否则返回false。

+--------------------+------------------------------------------------------------+----------------------------------------+
| 函数               | 检测类型                                                   | 举例                                   |
+====================+============================================================+========================================+
| is_bool            | 检查变量是否是布尔类型                                     | is_bool(true)、is_bool(false)          |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_string          | 检查变量是否是字符串类型                                   | is_string('string')、is_string(1234)   |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_float/is_double | 检查变量是否为浮点类型                                     | is_float(3.145)、is_float('3.145')     |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_integer/is_int  | 检查变量是否为整数                                         | is_integer(34)、is_integer('34')       |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_null            | 检查变量是否为null                                         | is_null(null)                          |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_array           | 检查变量是否为数组类型                                     | is_array($arr)                         |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_object          | 检查变量是否是一个对象类型                                 | is_object($obj)                        |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_numeric         | 检查变量是否为数字或由数字组成的字符串                     | is_numeric('5')、is_numeric('becd110') |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_resource()      | 检查变量是否是资源类型                                     | is_resource($res)                      |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_scalar()        | 检查变量是否是标量，也就是一个整数、浮点数、布尔型或字符串 | is_scalar($temp)                       |
+--------------------+------------------------------------------------------------+----------------------------------------+
| is_callable()      | 检查变量是否是有效的函数名                                 | is_callable($function)                 |
+--------------------+------------------------------------------------------------+----------------------------------------+

.. code-block:: php

    <?php
		$bool = TRUE; // 一个布尔型
		$str = "foo"; // 一个字符串类型
		$int = 12; // 一个整型

		echo gettype($bool); // 使用gettype()函数通过echo输出变量$bool类型
		var_dump($str); // 使用var_dump()函数直接输出变量$str的类型和值

		// 通过is_int()函数用条件判断，如果变量$int是整形，累加4
		if(is_int($int)){
		        $int += 4;
		}

		// 如果判断变量$bool是字符串类型，就打印输出，但变量$bool是布尔类型，所以不会输出
		if(is_string($bool)) {
		        echo 'String:$bool';
		}

		// 如果判断变量$bool是布尔类型，就打印输出
		if(is_bool($bool)) {
		        echo 'boolean:$bool';
		}
	?>

PHP常量
=====
常量的作用域是全局的，不用管作用域就可以在脚本的任何地方声明和访问常量。常量只能包含标量数据（boolean,integer,float和string）。

声明和使用常量
-------
在PHP中是通过使用define()函数来定义常量的。常量的命名与变量相似，也要遵循PHP标识符的命名规则。常量默认为大小写敏感，按照惯例常量标识符总是大写的，且不能在常量前面加上“$”符号。

声明常量
^^^^^^^
define()函数的格式如下：

``boolean define(string name,mixed value[,bool case_insensitive]);``

此函数的第一个参数为常量名；第二个参数为常量的值或是表达式；第三个参数是可选的，用来区分大小写。

获取常量值
^^^^^^^^^
获取常量的值有两种方法：

1. 一种是使用常量名直接获取值；
2. 另一种是使用 ``constant(string constant_name)`` 函数；constant()函数和直接使用常量名输出的效果是一样的，但函数可以动态地输出不同的常量；该函数成功返回常量值，否则提示错误信息。

判断常量是否定义
^^^^^^^^^^^^^^
如果想检查是否定义某常量，用 ``defined(string constant_name)`` 函数。

.. code-block:: php

    <?php
		define("MESSAGE","能看到一次"); 
		echo MESSAGE; // 输出常量MESSAGE的值
		echo Message; // 输出“Message”，表示没有该常量
		define("COUNT","能看到多次",true);
		echo COUNT; // 输出常量COUNT的值
		echo Count; // 输出常量COUNT的值，因为设定大小写不敏感
		$name = "count"; 
		echo constant($name); // 输出常量COUNT
		echo (defined("MESSAGE")); //如果被定义，则返回true，使用echo输出显示1
	?>

常量和变量的区别
^^^^^^^^^^^^^^^
常量和变量都是PHP的存储单元，但名称、作用域以及声明方式有所不同，以下是常量和变量的不同点：

- 常量前面没有美元符号($)；
- 常量只能用define()函数定义，而不能通过赋值语句；
- 常量可以不用理会变量范围的规则而在任何地方定义和访问；
- 常量一旦定义就不能被重新定义或者取消定义；
- 常量的值只能是标量；

预定义常量
-----
在php中，除了可以自己定义常量外，还预定了一系列常量，可以在程序中直接使用来完成一些特殊的功能。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。这些预定义的常量有多重不同的开头，决定了各种不同的类型，有些常量会根据他们使用的位置为改变。例如__LINE__的值就依赖于它在脚本中所处的行来决定。 **这些特殊的常量不区分大小写。** 以下是整理的一些常见的预定义常量：

+---------------------+------------------+------------------------------------------+
| 常量名              | 常量值           | 说明                                     |
+=====================+==================+==========================================+
| __FILE__            | 当前的文件名     | 在哪个文件中使用，就代表哪个文件名称     |
+---------------------+------------------+------------------------------------------+
| __LINE__            | 当前的行数       | 在代码的哪行使用，就代表哪行的行号       |
+---------------------+------------------+------------------------------------------+
| __FUNCTION__        | 当前的函数名     | 在哪个函数中使用，就代表哪个函数名       |
+---------------------+------------------+------------------------------------------+
| __CLASS__           | 当前的类名       | 在哪个类中使用，就代表哪个类的类名       |
+---------------------+------------------+------------------------------------------+
| __METHOD__          | 当前对象的方法名 | 在对象中的哪个方法使用，就代表这个方法名 |
+---------------------+------------------+------------------------------------------+
| PHP_OS              | UNIX或WINNT等    | 执行PHP解析的操作系统名称                |
+---------------------+------------------+------------------------------------------+
| PHP_VERSION         | 5.5              | 当前php服务器的版本                      |
+---------------------+------------------+------------------------------------------+
| TRUE                | TRUE             | 代表布尔值，真                           |
+---------------------+------------------+------------------------------------------+
| FALSE               | FALSE            | 代表布尔值，假                           |
+---------------------+------------------+------------------------------------------+
| NULL                | NULL             | 代表空值                                 |
+---------------------+------------------+------------------------------------------+
| DIRECTORY_SEPARATOR | \\或/            | 根据操作系统决定目录的分隔符             |
+---------------------+------------------+------------------------------------------+
| PATH_SEPARATOR      | :或;             | 在linux上是一个":"号,WIN上是一个";"号    |
+---------------------+------------------+------------------------------------------+
| E_ERROR             | 1                | 错误，导致php脚本运行终止                |
+---------------------+------------------+------------------------------------------+
| E_WARNING           | 2                | 警告，不会导致php脚本运行终止            |
+---------------------+------------------+------------------------------------------+
| E_PARSE             | 4                | 解析错误，由程序解析器报告               |
+---------------------+------------------+------------------------------------------+
| E_NOTICE            | 8                | 非关键的错误，例如变量未初始化           |
+---------------------+------------------+------------------------------------------+
| M_PI                | 3.141592653      | π 圆周率                                 |
+---------------------+------------------+------------------------------------------+

PHP变量
=====
PHP脚本语言是一种弱类型检查的语言。和其它语言不同的是变量或常量的数据类型由程序的上下文决定。

变量声明及使用
-------
变量不需要在使用之前声明，PHP中的变量名称用$和标识符表示，变量名是区分大小写的。

.. code-block:: php

    <?php
		$a = 100; // 声明一个变量a赋上一个整型数据值100
		$b = "string"; // 声明一个变量b赋上一个字符串值“string”
		$c = true; // 声明一个变量c赋上一个布尔数据值真
		$d = 99.99; // 声明一个变量d赋上一个浮点数据值99.99

		$key1 = $a; // 声明一个变量key1，将a变量的值赋给它
		$key2 = $b; // 声明一个变量key2，将b变量的值赋给它

		$a = $b = $c = $d = "value"; //同时声明多个变量，并赋上相同的值
    ?>

变量赋值的三种方式：

- 直接赋值

  .. code-block:: php

      <?php
      	$name = 'value';
      ?>

- 变量间赋值

  .. code-block:: php

    <?php
    	$name = 'value';
    	$test = $name; //使用$name初始化$test;
    ?>

- 引用赋值

  .. code-block:: php

    <?php
    	$name = 'value';
    	$test = & $name; //使用引用赋值
    ?>

.. note:: 引用和赋值的区别在于，赋值是将原变量内容复制下来，开辟一个新的内存空间来保存，而引用则是给变量的内容再起一个名字。

变量作用域用
----------

+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 作用域   | 说明                                                                                                                                                                                                                                           |
+==========+================================================================================================================================================================================================================================================+
| 局部变量 | 在函数的内部定义的变量，其作用域是所在函数                                                                                                                                                                                                     |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 全局变量 | 被定义在所有函数以外的变量，其作用域是整个PHP文件，但在用户自定义函数内部是不可用的。如果希望在用户自定义函数内部使用全局变量，则要使用global关键字声明全局变量                                                                                |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 静态变量 | 能够在函数调用结束后仍保留变量值，当再次回到其作用域时，又可以继续使用原来的值。而一般变量是在函数调用结束后，其存储的数据值即被清除，所占的内存空间也被释放。使用静态变量时，先要用关键字static来声明变量，把关键字static放在要定义的变量之前 |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

在变量的使用范围内，我们可以通过unset()函数释放指定的变量，使用isset()函数检测变量是否设置和使用empty()函数检查一个变量是否为空。

.. code-block:: php

    <?php
		$example = "在。。。函数外"; // 声明全局变量
		function example() {
		        $example = "。。。。在函数内。。。。"; // 声明局部变量
		        echo "在函数内输出的内容是：$example"; // 输出局部变量
		}

		example(); // 调用函数，输出变量值
		echo "在函数外输出的内容是：$example"; // 输出全局变量

		////////////////////////////////////////////////
		function zdy () {
		        static $message = 0; // 初始化静态变量
		        $message += 1; // 静态变量加1
		        echo $message.""; // 输出静态变量
		}

		function zdy1() {
		        $message = 0; // 声明函数内部变量（局部变量）
		        $message += 1; // 局部变量加1
		        echo $message.""; // 输出局部变量
		}

		for($i=0; $i<10; $i++) zdy(); // 输出1~10

		for($i=0; $i<10; $i++) zdy1(); // 输出10个1

		/////////////////////////////////////////////
		$zy = "不会看到"; // 声明全局变量$zy
		$zyy = "会看到"; // 声明全局变量$zyy

		function lxt() {
		        echo $zy; // $zy不能被调用，没有输出
		        global $zyy; // 利用关键字global在函数内部定义全局变量
		        echo $zyy; // 此处调用$zyy
		}
		lxt();
    ?>


可变变量
----
一个变量的变量名可以动态地设置和使用。一个普通的变量通过声明来设置，而一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。

.. code-block:: php

    <?php
		$hi = 'hello'; // 声明一个普通的变量$hi值为"hello"
		$$hi = "world"; // 声明一个可变变量$$hi，$hi的值是hello，相当于声明$hello的值是“world”

		echo "$hi $hello"; // 输出两个单词hello world
		echo "$hi ${$hi}"; // 输出两个单词hello world
    ?>

PHP预定义变量
--------
PHP 在运行的脚本中提供了大量预定义的变量来供使用。PHP提供了一套附加的预定义数组，这些数组变量包含了来自 web 服务器环境和用户输入。这些新的数组被称为超全局变量：

以下所有的变量在全局范围内自动生效：

PHP 超全局变量：

+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 变量          | 说明                                                                                                                                                                                                |
+===============+=====================================================================================================================================================================================================+
| $GLOBALS      | 包含一个引用变量这就表示其在脚本的所有作用域中都是可用的，变量的名字就是数组的键。                                                                                                                  |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER      | 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；见下一节的完整列表的所有服务器变量。 |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_GET         | 通过HTTP GET方法传递给当前脚本的变量的关联数组。                                                                                                                                                    |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_POST        | 通过HTTP POST方法传递给当前脚本的变量的关联数组。                                                                                                                                                   |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_FILES       | 通过 HTTP POST 方式上传到当前脚本的项目的数组。                                                                                                                                                     |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_REQUEST     | 一个关联数组包含了 GET，_POST 和 $_COOKIE 的数组。                                                                                                                                                  |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_COOKIE      | 通过 HTTP Cookies 方式传递给当前脚本的变量的关联数组。                                                                                                                                              |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_SESSION     | 通过会话方式使用于当前脚本的变量的关联数组。                                                                                                                                                        |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $_PHP_SELF    | 包含一个PHP脚本的文件名的字符串。                                                                                                                                                                   |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| $php_errormsg | 是一个包含文本的最后一个PHP生成的错误消息的变量。                                                                                                                                                   |
+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
服务器变量：$ _SERVER

$_SERVER是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目。

+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| 变量                             | 说明                                                                                                                                          |
+==================================+===============================================================================================================================================+
| $_SERVER['PHP_SELF']             | 当前执行脚本的文件名，与 document root 有关。                                                                                                 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['argv']                 | 传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含查询字符串。 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['argc']                 | 包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。                                                                            |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['GATEWAY_INTERFACE']    | 服务器使用的 CGI 规范的版本；例如，“CGI/1.1”。                                                                                                |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_ADDR']          | 当前运行脚本所在的服务器的 IP 地址。                                                                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_NAME']          | 当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。                                            |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_SOFTWARE']      | 服务器标识字符串，在响应请求时的头信息中给出。                                                                                                |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_PROTOCOL']      | 请求页面时通信协议的名称和版本。例如，“HTTP/1.0”。                                                                                            |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REQUEST_METHOD']       | 访问页面使用的请求方法；例如，“GET”, “HEAD”，“POST”，“PUT”。                                                                                  |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REQUEST_TIME']         | 请求开始时的时间戳。从 PHP 5.1.0 起可用。                                                                                                     |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['QUERY_STRING']         | query string（查询字符串），如果有的话，通过它进行页面访问。                                                                                  |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['DOCUMENT_ROOT']        | 当前运行脚本所在的文档根目录。在服务器配置文件中定义。                                                                                        |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_ACCEPT']          | 当前请求头中 Accept: 项的内容，如果存在的话。                                                                                                 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_ACCEPT_CHARSET']  | 当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：“iso-8859-1,*,utf-8”。                                                             |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_ACCEPT_ENCODING'] | 当前请求头中 Accept-Encoding: 项的内容，如果存在的话。例如：“gzip”。                                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_ACCEPT_LANGUAGE'] | 当前请求头中 Accept-Language: 项的内容，如果存在的话。例如：“en”。                                                                            |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_CONNECTION']      | 当前请求头中 Connection: 项的内容，如果存在的话。例如：“Keep-Alive”。                                                                         |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_HOST']            | 当前请求头中 Host: 项的内容，如果存在的话。                                                                                                   |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_REFERER']         | 页面的地址(如果有的话),将当前页面的用户代理。                                                                                                 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTP_USER_AGENT']      | 该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)。                                     |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['HTTPS']                | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。                                                                                       |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REMOTE_ADDR']          | 浏览当前页面的用户的 IP 地址。                                                                                                                |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REMOTE_HOST']          | 浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。                                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REMOTE_PORT']          | 服务器机器上的端口使用的web服务器进行通信。为默认设置,这将是“80”。                                                                            |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SCRIPT_FILENAME']      | 当前执行脚本的绝对路径。                                                                                                                      |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_ADMIN']         | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。                              |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_PORT']          | Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。                                                  |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SERVER_SIGNATURE']     | 包含了服务器版本和虚拟主机名的字符串。                                                                                                        |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['PATH_TRANSLATED']      | 当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。                                                |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['SCRIPT_NAME']          | 包含当前脚本的路径。这是有用的页面需要指向自己。                                                                                              |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['REQUEST_URI']          | 给定的URI来访问这个页面;例如,/ index . html。                                                                                                 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['PHP_AUTH_DIGEST']      | 当运行在Apache模块做消化HTTP身份验证这个变量设置为发送的“授权”头端。                                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['PHP_AUTH_USER']        | 运行在Apache和IIS(ISAPI PHP 5)作为HTTP身份验证模块做这个变量设置为用户提供的用户名。                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['PHP_AUTH_PW']          | 当运行在Apache和IIS(ISAPI PHP 5)作为HTTP身份验证模块做这个变量设置为用户提供的密码。                                                          |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| $_SERVER['AUTH_TYPE']            | 当运行在Apache HTTP身份验证模块做这个变量设置为身份验证类型。                                                                                 |
+----------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+


