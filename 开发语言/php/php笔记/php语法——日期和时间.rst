日期和时间
=====

系统时区设置
-----------

时区划分
^^^^^^^
整个地球分为24个时区，每个时区都有自己的本地时间。同一时间，每个时区的本地时间相差1~23小时，例如，英国伦敦本地时间与北京本地时间相差8个小时。在国际无线电通信领域，使用一个统一的时间，称为通用协调时间(Universal Time Coordinated,UTC)，UTC与格林威治标准时间(Greenwich Mean Time,GMT)相同，都与英国伦敦的本地时间相同。

时区设置
^^^^^^^^
由于PHP 5.0对data()函数进行了重写，因此，目前的日期时间函数比系统时间少8个小时。在PHP语言中默认设置的是标准的格林威治时间（即采用的是零时区），所以要获取本地当前的时间必须更改PHP语言中的时区设置。
更改PHP语言中的时区设置有两种方法：

- 修改php.ini文件中的设置，找到[date]下的“;date.timezone =”选项，将其修改为“date.timezone =Asia/Hong_Kong”，然后重新启动Apache服务器；
- 在应用程序中，在使用时间日期函数之前添加如下函数：

  ``date_default_timezone_set(timezone);``

  参数timezone为PHP可识别的时区名称，如果时区名称PHP无法识别，则系统采用UTC时区。在PHP手册中提供了各时区名称列表，其中，设置我国北京时间可以使用的时区包括：PRC（中华人民共和国）、Asia/Chongqing（重庆）、Asia/Shanghai（上海）或者Asia/Urumqi（乌鲁木齐），这几个时区名称是等效的。

设置完成后，date()函数便可以正常使用，不会再出现时差问题。

Unix时间戳
----------
UNIX时间戳是保存日期和时间的一种紧凑简洁的方法，是大多数UNIX系统中保存当前日期和时间的一种方法，也是在大多数计算机语言中表示日期和时间的一种标准格式。以32位整数表示格林威治标准时间，例如，使用证书11230499325表示当前时间的时间戳。 **UNIX时间戳是从1970年1月1日零点（UTC/GMT的午夜）开始起到当前时间所经过的秒数。1970年1月1日零点作为所有日期计算的基础，这个日期通常成为UNIX纪元。** 

因为UNIX时间戳是一个32位的数字格式，所以特别适用于计算机处理，例如计算两个时间点之间相差的天数。另外，由于文化和地区的差异，存在不同的时间格式，以及时区的问题。所以UNIX时间戳也是根据一个时区进行标准化而设计的一种通用格式，并且这种格式可以很容易地转换为任何格式。也因为UNIX时间戳是一个32位的证书表示的，所以在处理 **1902年以前或2038年以后** 的事件将会遇到一些问题。另外，在Windows下，由于时间戳不能为负数，所以使用PHP中提供的时间戳函数处理1970年之前的日期，就会发生错误。要使PHP代码具有可移植性，必须记住这一点。

将日期和时间转变成UNIX时间戳
^^^^^^^^^^^^^^^^^^^^^^^^^^
在PHP中，如果需要将日期和时间转变成UNIX时间戳，可以调用mktime()函数。该函数的原型如下所示：

``int mktime([int hour [,int minute[,int second[,int month[,int day[int year]]]]]])``

该函数中所有参数都是可选的，如果参数为空，默认将当前时间转变成UNIX时间戳。这样，和直接调用time()函数获取当前的UNIX时间戳功能相同。参数也可以从右向左省略，任何省略的参数会被设置成本地日期和时间的当前值。如果只想转变日期，对具体的时间不在乎，可以将前三个转变时间的参数都设置为0。 **mktime()函数对于日期运算和验证非常有用，它可以自动校政越界的输入。** 如下所示：

.. code-block:: php

    <?php
	echo date("Y-m-d",mktime(0,0,0,12,36,2008))."\n"; //日期超过31天，计算后输出 2009-01-05
	echo date("Y-m-d",mktime(0,0,0,14,1,2010))."\n"; //月份超过12月，计算后输出2011-02-01
	echo date("Y-m-d",mktime(0,0,0,1,1,2012))."\n";  //没有问题的转变，输出结果2012-01-01
	echo date("Y-m-d",mktime(0,0,0,1,1,99))."\n";    //会将99年转变为1999年， 1990-01-01
    ?>

如果有需要将任何英文文本的日期时间描述直接解析为UNIX时间戳，可以使用strtotime()函数，该函数的圆形如下所示：

``int strtotime(string time[,int now])``

函数strtotime()可以用英语的自然语言创建讴歌时刻的时间戳，接受一个包含美国英语日期格式的字符串并尝试将其解析为UNIX时间戳（自January 1 1970 00:00:00 GMT起的描述），其值相对于now参数给出的时间，如果没有提供次参数则用系统当前时间。该函数执行成功则返回时间戳，否则返回FALSE。和mktime()的对比如下所示：

.. code-block:: php

    <?php
	echo date("Y-m-d", strtotime("now")); //输出现在的时间戳
	echo date("Y-m-d", strtotime("8 may 2012")); //输出2012-05-08
	echo date("Y-m-d", strtotime("+1 day")); //输出现在的日期加1天
	echo date("Y-m-d", strtotime("last monday")); //输出2012-04-02
    ?>

下例通过使用strtotime()函数编写一个纪念日的倒计时程序，来介绍一下该函数在项目开发中的实际应用，示例代码如下所示：

.. code-block:: php

    <?php
	$now =strtotime("now"); //当前时间
	$endtime= strtotime("2018-08-18 08:08:08"); //设定毕业时间，转成时间戳

	$second = $endtime-$now; //获取毕业时间到现在时间的时间戳（秒数）
	$year = floor($second/3600/24/365); //从这个时间戳中换算出年头数

	$temp =$second-$year*365*24*3600; //从这个时间戳中去掉整年的秒数，就剩下月份的秒数
	$month=floor($temp/3600/24/30); //从这个时间戳中共换算出月数

	$temp=$temp-$month*30*3600*24; //从时间戳中去掉整月的秒数，就剩下天的描述
	$day = floor($temp/24/3600); //从这个时间戳中换算出剩余的天数

	$temp=$temp-$day*3600*24; //从这个时间戳中去掉整天的秒数，就剩下小时的秒数
	$hour = floor($temp/3600); //从这个时间戳中换算出剩余的小时数

	$temp=$temp- $hour*3600; //从时间戳中去掉小时的秒数，就剩下分的秒数
	$minute=floor($temp/60); //从这个时间戳中换算出剩余的分数

	$second1=$temp-$minute*60; //最后只有剩余的秒数了

	echo "距离培训毕业还有($year)年($month)月($day)天($hour)小时($minute)分($second1)秒。";
    ?>

日期的计算
^^^^^^^^^
在PHP中，计算两个日期之间相隔的长度，最简单的方法就是通过计算两个UNIX时间戳之差来获得。例如，在PHP脚本中接收来自HTML表单用户提交的出生日期，计算这个用户的年龄。如下所示：

.. code-block:: php

    <?php
	//从表单中接收用户提交的出生日期中的年份、月份、天
	$year = 1981;
	$month = 11;
	$day = 05;
	$birthday = mktime(0,0,0,$month,$day,$year); //将出生日期转变为UNIX时间戳
	$nowdate = time(); //调用time()函数获取当前时间的UNIX时间戳
	$ageunix = $nowdate -$birthday; //两个时间戳相减获取用户年龄的UNIX时间戳
	$age = floor($ageunix/3600/24/365); //将UNIX时间戳除以一年的秒数获取用户的年龄
	echo "年龄：$age";
    ?>

在以上的脚本中，调用mktime()函数将从用户出生日期转变为UNIX时间戳，再调用time()函数获取当前时间的UNIX时间戳。因为这个日期的格式都是使用整数表示的，所以可以将他们相减。又将计算后获取的UNIX时间戳除以一年的秒数，将UNIX时间戳转变为以年度量的单位。

PHP日期和时间函数
----------------
PHP提供了大量的日期和时间内置函数，使开发人员在日期和时间上游刃有余，大大提高了工作效率。除了通过time()函数获取当前的UNIX时间戳外，调用getdate()函数确定当前时间，通过gettimeofday()函数获取某一天中的具体时间。此外，在PHP中还可以通过date_sunrise()和date_sunset()两个函数，获取某些地点某天的日出和日落时间。

获得本地化UNIX时间戳
^^^^^^^^^^^^^^
PHP应用mktime()函数将一个时间转换成UNIX的时间戳。

mktime()函数根据给出的参数返回UNIX时间戳。时间戳是一个长整数。其参数可以从右向左省略，任何省略的参数会被设置成本地日期和时间的当前值。该函数的语法格式如下：

``int mktime([int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]])``

+--------+----------------------------------------------------------------------------------------------+
| 参数   | 说明                                                                                         |
+========+==============================================================================================+
| hour   | 小时数                                                                                       |
+--------+----------------------------------------------------------------------------------------------+
| minute | 分钟数                                                                                       |
+--------+----------------------------------------------------------------------------------------------+
| second | 秒数(一分钟之内)                                                                             |
+--------+----------------------------------------------------------------------------------------------+
| month  | 月份数                                                                                       |
+--------+----------------------------------------------------------------------------------------------+
| day    | 天数                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| year   | 年份数，可以是两位或4位数字，0~69对应于2000~2069,70~100对应于1970~2000                       |
+--------+----------------------------------------------------------------------------------------------+
| is_dst | 参数is_dst在夏令时可以被设置为1，如果不是则设置为0；如果不确定是否为夏令时则设置为-1(默认值) |
+--------+----------------------------------------------------------------------------------------------+

获取当前UNIX时间戳
^^^^^^^^^^^^^
PHP通过time()函数获取当前的UNIX时间戳，返回值为从UNIX纪元(格林威治时间1970年1月1日00:00:00)到当前时间的秒数。

``int time(void)``

获取当前日期和时间
^^^^^^^^^^^^^^^^
在PHP中通过date()函数获取当前的日期和时间。date()函数的语法如下：

``string date(string $format [, int $timestamp ])``

date()函数将返回参数timesamp按照指定格式而产生的字符串。其中的参数timestamp是可选的，如果省略，则使用当前时间。format参数可以使开发人员按其指定的格式输出日期时间。这里给出几个时间日期的预定义常量，可用于日期格式函数。

+--------------+----------------------------------------------------------+
| 预定义常量   | 说明                                                     |
+==============+==========================================================+
| DATE_ATOM    | 原子钟格式（例如：2013-04-12T15:52:01+00:00）            |
+--------------+----------------------------------------------------------+
| DATE_COOKIE  | HTTP Cookies格式（例如：Friday, 12-Apr-13 15:52:01 UTC） |
+--------------+----------------------------------------------------------+
| DATE_ISO8601 | ISO-8601格式（例如：2013-04-12T15:52:01+0000）           |
+--------------+----------------------------------------------------------+
| DATE_RFC822  | RFC 822（例如：Fri, 12 Apr 13 15:52:01 +0000）           |
+--------------+----------------------------------------------------------+
| DATE_RFC850  | RFC 850（例如：Friday, 12-Apr-13 15:52:01 UTC）          |
+--------------+----------------------------------------------------------+
| DATE_RFC1036 | RFC 1036（例如：Fri, 12 Apr 13 15:52:01 +0000）          |
+--------------+----------------------------------------------------------+
| DATE_RFC1123 | RFC 1123（例如：Fri, 12 Apr 2013 15:52:01 +0000）        |
+--------------+----------------------------------------------------------+
| DATE_RFC2822 | RFC 2822（Fri, 12 Apr 2013 15:52:01 +0000）              |
+--------------+----------------------------------------------------------+
| DATE_RFC3339 | 与 DATE_ATOM 相同（从 PHP 5.1.3 开始）                   |
+--------------+----------------------------------------------------------+
| DATE_RSS     | RSS（Fri, 12 Aug 2013 15:52:01 +0000）                   |
+--------------+----------------------------------------------------------+
| DATE_W3C     | 万维网联盟（例如：2013-04-12T15:52:01+00:00）            |
+--------------+----------------------------------------------------------+

 注意：也许得到的时间和系统时间并不相同，这是因为在PHP语言中默认设置的是标准的格林威治时间，而不是北京时间。如果出现了时间不符的情况，可以设置系统时区。

获取日期信息
^^^^^^^^^^^
日期是数据处理中经常使用到的信息之一。通过getdate()函数获取日期指定部分的相关信息。语法如下：

``array getdate([ int $timestamp = time() ])``

getdate()函数返回数组形式的日期和时间信息，如果没有参数timestamp，则以当前时间为准。该函数返回的关联数组元素的说明如下表：

+--------------+---------------------------------------------------+
| 关联数组元素 | 说明                                              |
+==============+===================================================+
| seconds      | 秒，返回值为0~59                                  |
+--------------+---------------------------------------------------+
| minutes      | 分钟，返回值为0~59                                |
+--------------+---------------------------------------------------+
| hours        | 小时，返回值为0~23                                |
+--------------+---------------------------------------------------+
| mday         | 月份中第几天，返回值为1~31                        |
+--------------+---------------------------------------------------+
| wday         | 星期中第几天，返回值为0(表示星期日)~6(表示星期六) |
+--------------+---------------------------------------------------+
| mon          | 月份数字，返回值1~12                              |
+--------------+---------------------------------------------------+
| year         | 4为数字表示的完整年份，返回的值如2000或2008       |
+--------------+---------------------------------------------------+
| yday         | 一年中第几天，返回值为0~365                       |
+--------------+---------------------------------------------------+
| weekday      | 星期几的完整文本表示，返回值为Sunday~Saturday     |
+--------------+---------------------------------------------------+
| month        | 月份的完整文本表示，返回值为January~December      |
+--------------+---------------------------------------------------+
| 0            | 返回从UNIX纪元开始到当前时间的秒数                |
+--------------+---------------------------------------------------+

使用getdate()函数获取系统当前的日期信息，并输出该函数的返回值。

.. code-block:: php

    <?php
	$arr = getdate();
	print_r($arr);
	/*
	 Array
	(
	    [seconds] => 42 // 秒的数值表示
	    [minutes] => 50 // 分钟的数值表示
	    [hours] => 10 // 小时的数值表示
	    [mday] => 13 // 月份中日的数值表示
	    [wday] => 1 // 一周中日的数值表示
	    [mon] => 11 // 月份的数值表示
	    [year] => 2017 // 年份的4位表示
	    [yday] => 316 // 一年中日的数值偏移
	    [weekday] => Monday  // 一周中日的完整文本表示
	    [month] => November  // 月份的完整文本表示
	    [0] => 1510570242  // 自从UNIX纪元开始至今的秒数
	)
	 * */
    ?>

校验日期的有效性
^^^^^^^^^^^^^^

输出格式化的日期和时间
^^^^^^^^^^^^^^^^^^^^
在PHP中可以调用date()函数格式化一个本地时间和日期，该函数的原型如下：

``string date(string format[,int timestamp])``

该函数返回一个格式化后表示适当日期的字符串。参数format的格式化选项如下表所示：

+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 格式化字符         | 描述                                                                                                                           | 示例                                |
+====================+================================================================================================================================+=====================================+
| 日                 | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| d                  | 月份中的第几天，有前导零的 2 位数字                                                                                            | 01 到 31                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| D                  | 星期中的第几天，文本表示，3 个字母                                                                                             | Mon 到 Sun                          |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| j                  | 月份中的第几天，没有前导零                                                                                                     | 1 到 31                             |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| l（“L”的小写字母） | 星期几，完整的文本格式                                                                                                         | Sunday 到 Saturday                  |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| N                  | ISO-8601 格式数字表示的星期中的第几天（PHP 5.1.0 新加）                                                                        | 1（表示星期一）到 7（表示星期天）   |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| S                  | 每月天数后面的英文后缀，2 个字符                                                                                               | st，nd，rd 或者 th。可以和 j 一起用 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| w                  | 星期中的第几天，数字表示                                                                                                       | 0（表示星期天）到 6（表示星期六）   |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| z                  | 年份中的第几天                                                                                                                 | 0 到 365                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 星期               | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| W                  | ISO-8601 格式年份中的第几周，每周从星期一开始（PHP 4.1.0 新加的）                                                              | 1~53                                |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 月                 | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| F                  | 月份，完整的文本格式，例如 January 或者 March                                                                                  | January 到 December                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| m                  | 数字表示的月份，有前导零                                                                                                       | 01 到 12                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| M                  | 三个字母缩写表示的月份                                                                                                         | Jan 到 Dec                          |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| n                  | 数字表示的月份，没有前导零                                                                                                     | 1 到 12                             |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| t                  | 指定的月份有几天                                                                                                               | 28 到 31                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 年                 | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| L                  | 是否为闰年                                                                                                                     | 如果是闰年为 1，否则为 0            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| o                  | ISO-8601 格式年份数字。这和 Y 的值相同，只除了如果 ISO 的星期数（W）属于前一年或下一年，则用那一年。（PHP 5.1.0 新加）         | Examples: 1999 or 2003              |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| Y                  | 4 位数字完整表示的年份                                                                                                         | 例如：1999 或 2003                  |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| y                  | 2 位数字表示的年份                                                                                                             | 例如：99 或 03                      |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 时间               | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| a                  | 小写的上午和下午值                                                                                                             | am 或 pm                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| A                  | 大写的上午和下午值                                                                                                             | AM 或 PM                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| B                  | Swatch Internet 标准时                                                                                                         | 000 到 999                          |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| g                  | 小时，12 小时格式，没有前导零                                                                                                  | 1 到 12                             |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| G                  | 小时，24 小时格式，没有前导零                                                                                                  | 0 到 23                             |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| h                  | 小时，12 小时格式，有前导零                                                                                                    | 01 到 12                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| H                  | 小时，24 小时格式，有前导零                                                                                                    | 00 到 23                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| i                  | 有前导零的分钟数                                                                                                               | 00 到 59                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| s                  | 秒数，有前导零                                                                                                                 | 00 到 59                            |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| u                  | 毫秒（PHP 5.2.2 新加）。需要注意的是 date() 函数总是返回 000000 因为它只接受 integer 参数， 而 DateTime::format() 才支持毫秒。 | 示例: 654321                        |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| 时区               | ---                                                                                                                            | ---                                 |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| e                  | 时区标识（PHP 5.1.0 新加）                                                                                                     | 例如：UTC，GMT，Atlantic/Azores     |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| I                  | 是否为夏令时                                                                                                                   | 如果是夏令时为 1，否则为 0          |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| O                  | 与格林威治时间相差的小时数                                                                                                     | 例如：+0200                         |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| P                  | 与格林威治时间（GMT）的差别，小时和分钟之间有冒号分隔（PHP 5.1.3 新加）                                                        | 例如：+02:00                        |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| T                  | 本机所在的时区                                                                                                                 | 例如：EST，MDT、PST、MST、CST。     |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+
| Z                  | 时差偏移量的秒数。UTC 西边的时区偏移量总是负的，UTC 东边的时区偏移量总是正的。                                                 | -43200 到 43200                     |
+--------------------+--------------------------------------------------------------------------------------------------------------------------------+-------------------------------------+



显示本地化的日期和时间
^^^^^^^^^^^^^^^^^^^^
不同的国家和地区，使用不同的时间、日期、货币和字符集。如例10.4中的星期的表示，在大多数西方国家都使用Tuesday，但在以汉语为主的国家中，都是用星期四。虽然都是同一个含义，但表示的方式却不尽相同，这时就需要设置本地化环境。这里将使用setlocale()函数和strftime()函数来设置本地化环境和格式化输出日期和时间。

setlocale()函数
"""""""""

``string setlocale(int $category , array $locale)``

参数category的选项如表所示

+-------------+-------------------------------------------+
| 选项        | 说明                                      |
+=============+===========================================+
| LC_ALL      | 包含下面所有的设置                        |
+-------------+-------------------------------------------+
| LC_COLLATE  | 字符串比较, 详见 strcoll()                |
+-------------+-------------------------------------------+
| LC_CTYPE    | 字符串的分类与转换, 参见例子 strtoupper() |
+-------------+-------------------------------------------+
| LC_MONETARY | 本地化环境的货币形式                      |
+-------------+-------------------------------------------+
| LC_NUMERIC  | 本地化环境的数值形式                      |
+-------------+-------------------------------------------+
| LC_TIME     | 本地化环境的时间形式                      |
+-------------+-------------------------------------------+
| LC_MESSAGES | 系统响应 (如果PHP使用libintl编译)         |
+-------------+-------------------------------------------+

参数locale如果为空，就会使用系统环境变量的locale或lang的值，否则就会应用locale参数所指定的本地化环境。如en_US为美国本地化环境，chs则指简体中文，cht为繁体中文。

strftime()函数
""""""""

``string strftime(string $format [, int $timestamp = time() ])``

该函数返回给定的字符串对参数timestamp进行格式化后输出的字符串。如果没有给出参数timestamp则用本地时间。月份、星期以及其它和语言有关的字符串写法和setlocale函数设置的当前区域用有关。参数format识别的转换标记如下表：

转换标记  说明

http://php.net/manual/zh/function.strftime.php

注意：

- strftime()：函数根据区域设置格式化本地时间／日期。
- date()：格式化本地时间／日期。
- 后者函数依赖于服务器的本地设置；前者根据自身需要选择。

.. code-block:: php

    <?php
	setlocale(LC_ALL, 'en_US');
	echo "美国格式：".strftime("Today is %A");
	echo PHP_EOL;
	setlocale(LC_ALL,"chs");
	echo "中文简体格式：".strftime("今天是%A");
	echo PHP_EOL;
	setlocale(LC_ALL,"cht");
	echo "繁体中文格式：".strftime("今天是%A");
    ?>

将日期和时间解析为UNIX时间戳
^^^^^^^^^^^^^^^^^^^^^^^^^^
PHP中应用strtotime()函数将任何英文文本的日期和时间解析为UNIX时间戳，其值是相对于参数now给出的时间，如果没有提供此参数now则用系统当前时间。语法格式如下：

``int strtotime(string $time [, int $now = time() ])``

该函数有两个参数。如果参数time的格式是绝对时间，则now参数不起作用；如果参数time格式是相对时间，那么其对应的时间就是参数now来提供的；如果没有提供参数now，对应的时间就为当前时间。如果解析失败返回false。

.. code-block:: php

    <?php
	echo strtotime("now"); // 当前时间的时间戳
	echo "输出时间：".date("Y-m-d H:i:s", strtotime("now"));
	echo PHP_EOL;
	echo strtotime("21 May 2009");
	echo "输出时间：".date("Y-m-d H:i:s", strtotime("21 May 2009"));
	echo PHP_EOL;
	echo strtotime("+3 day");
	echo "输出时间：".date("Y-m-d", strtotime("+3 day"));
	echo PHP_EOL;
	echo strtotime("+1 week");
	echo PHP_EOL;
	echo strtotime("next Thursday");
	echo PHP_EOL;
	echo strtotime("last Monday");

	/*
	1510576509输出时间：2017-11-13 12:35:09
	1242864000输出时间：2009-05-21 00:00:00
	1510835709输出时间：2017-11-16
	1511181309
	1510790400
	1509926400 
	*/
    ?>

日期和时间的应用
--------------

比较两个时间的大小
^^^^^^^^^^^^^^^^
在实际开发中经常会对两个时间的大小进行判断，但PHP中的时间是
不可以直接进行比较的。所以，首先要将时间解析为时间戳的格式，然后再进行比较。使用strtotime()函数即可完成该操作。

.. code-block:: php

    <?php
	$time1 = date("Y-m-d H:i:s"); //获取当前时间
	$time2 = "2008-2-3 16:30:00";
	echo "变量\$time1 的时间为：".$time1;
	echo PHP_EOL;
	echo "变量\$time2的时间为：".$time2;
	echo PHP_EOL;
	if(strtotime($time1) - strtotime($time2) < 0) {
	    echo "\$time1早于$time2";
	}else {
	    echo "\$time2早于$time1";
	}
	/*
	变量$time1 的时间为：2017-11-13 12:49:42
	变量$time2的时间为：2008-2-3 16:30:00
	$time2早于2017-11-13 12:49:42
	*/
    ?>

实现倒计时功能
^^^^^^^^^^^^^

.. code-block:: php

    <?php
	$time1 = strtotime(date("Y-m-d H:i:s")); // 当前的系统时间
	$time2 = strtotime("2019-2-10 17:10:00"); // 放假的时间
	$time3 = strtotime("2019-1-1"); // 2010年元旦
	$sub1 = ceil(($time2 - $time1) / 3600);  // (60秒*60分)秒/小时
	$sub2 = ceil(($time3 - $time1) / 86400); // (60秒*60分*24小时)秒/天
	echo "离放假还有{$sub1}小时！！！";
	echo PHP_EOL;
	echo "离2010年元旦还有{$sub2}天！！！";
    ?>

 说明：ceil()函数的格式为float ceil(float value)，该函数为取整函数，返回不小于参数value值得最小整数。如果小数部分，则进一位。应该注意函数的返回类型为float型，而不是整型。

计算页面脚本的运行时间
^^^^^^^^^^^^^^^^^^^^
使用microtime()函数，该函数返回当前UNIX时间戳和微秒数。返回格式为msec sec的字符串，其中sec是当前UNIX时间戳，msec为微秒数。

``mixed microtime([ bool $get_as_float ])``

- 如果调用时不带可选参数，本函数以 "msec sec"（微秒 秒） 的格式返回一个字符串，其中 sec 是自 Unix 纪元（0:00:00 January 1, 1970 GMT）起到现在的秒数，msec 是微秒部分。字符串的两部分都是以秒为单位返回的。
- 如果给出了 get_as_float 参数并且其值等价于 TRUE，microtime() 将返回一个浮点数。小数点前面还是以时间戳的格式表示，而小数点后面则表示微秒的值。该参数是PHP5.0版本中新加的。

.. code-block:: php

    <?php
	function run_time() {
	    list($msec, $sec) = explode(" ", microtime()); // 使用explode函数返回两个变量
	    return ((float)$msec + (float)$sec); // 返回两个变量的和
	}

	$start_time = run_time(); // 第一次运行run_time()函数
	$time1 = strtotime(date("Y-m-d H:i:s"));
	$time2 = strtotime("2010-2-10 17:10:00");
	$time3 = strtotime("2010-1-1");
	$sub1 = ceil(($time2 - $time1) / 3600); // 60*60，即每小时包含的秒数
	$sub2 = ceil(($time3 - $time1) / 86400); // 60*60*24，即每天包含的秒数
	echo "离放假还有{$sub1}小时！！！";
	echo PHP_EOL;
	echo "离2010年元旦还有{$sub2}天！！！";
	$end_time = run_time(); // 再次运行run_time()函数
	echo PHP_EOL;
	sleep(1);
	echo ($end_time - $start_time);
    ?>

.. code-block:: php
    
        <?php
		class Timer {
		    private $startTime;
		    private $stopTime;

		    function __construct ()
		    {
		        $this->startTime = 0;
		        $this->stopTime = 0;
		    }

		    function start() {
		        $this->startTime = microtime(true);
		    }

		    function stop() {
		        $this->stopTime = microtime(true);
		    }

		    function spent() {
		        return round(($this->stopTime - $this->startTime), 4);
		    }
		}

		$timer = new Timer();
		$timer->start();
		usleep(1000);
		$timer->stop();
		echo "执行该脚本用时".$timer->spent()."秒。";
        ?>